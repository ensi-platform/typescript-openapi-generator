openapi: 3.0.3
info:
  title: Admin GUI Backend
  contact:
    name: API Support
    url: https://ensi.tech/contacts
    email: mail@greensight.ru
  version: 1.0.0
  description: Admin GUI Backend
servers:
  - url: /api/v1
tags:
  - name: common
    description: Administration panel
  - name: cms_menus
    description: Content. Menu
  - name: cms_products
    description: Content. Products
  - name: cms_nameplates
    description: Content. Nameplates
  - name: cms_nameplate_products
    description: Content. Links between nameplates and products
  - name: cms_banners
    description: Content. Banners
  - name: cms_pages
    description: Content. Pages
  - name: cms_seo_templates
    description: Content. SEO templates
  - name: cms_seo_template_products
    description: Content. Links between SEO templates and products
  - name: auth
    description: Authorization
  - name: logistic_points
    description: Logistics. Delivery points
  - name: logistic_delivery_services
    description: Logistics. Delivery services
  - name: logistic_delivery_service_documents
    description: Logistics. Logistics operators. Documents
  - name: logistic_delivery_service_managers
    description: Logistics. Logistics operators. Managers
  - name: logistic_federal_districts
    description: Logistics. Federal districts
  - name: logistic_regions
    description: Logistics. Regions
  - name: logistic_delivery_prices
    description: Logistics. Regional delivery prices
  - name: logistic_delivery_kpi
    description: Logistics. Status time planner. Common settings
  - name: logistic_delivery_kpi_ct
    description: Logistics. Status time planner. CT for sellers
  - name: logistic_delivery_kpi_ppt
    description: Logistics. Status time planner. PPT for sellers
  - name: logistic_enums
    description: Logistics. Enums
  - name: logistic_cargo_orders
    description: Logistics. Management of pickup orders
  - name: orders_orders
    description: Orders. Orders
  - name: orders_deliveries
    description: Orders. Deliveries
  - name: orders_common
    description: Orders. Settings
  - name: orders
    description: Orders. Common
  - name: orders_refunds
    description: Orders. Refunds
  - name: orders_shipments
    description: Orders. Shipments
  - name: order_items
    description: Orders. Order items
  - name: orders_baskets
    description: Orders. Baskets
  - name: marketing_promo_codes
    description: Marketing. Promo codes
  - name: marketing_discounts
    description: Marketing. Discounts
  - name: marketing_discount_products
    description: Marketing. Product discounts
  - name: catalog_brands
    description: Catalog. Brands
  - name: catalog_categories
    description: Catalog. Categories
  - name: catalog_properties
    description: Catalog. Product attributes
  - name: catalog_products
    description: Catalog. Products
  - name: catalog_offers_common
    description: Catalog. Offers common routes
  - name: catalog_offers
    description: Catalog. Offers
  - name: catalog_offers_failed_jobs
    description: Catalog. Offers failed jobs
  - name: catalog_stocks
    description: Catalog. Stocks
  - name: catalog_product_groups
    description: Catalog. Product groups
  - name: catalog_bulk_operations
    description: Catalog. Mass operations
  - name: catalog_product_events
    description: Catalog. Product Events
  - name: catalog_product_statuses
    description: Catalog. Product statuses
  - name: catalog_pim_failed_jobs
    description: Catalog. Pim. Failed Jobs
  - name: catalog_pim_temp_files
    description: Catalog. Pim. Temp Files
  - name: catalog_reviews
    description: Catalog. Reviews
  - name: catalog_feed_settings
    description: Catalog. Feed settings
  - name: catalog_feeds
    description: Catalog. Feeds
  - name: catalog_feed_common
    description: Catalog. Feeds common routes
  - name: catalog_imports
    description: Catalog. Imports
  - name: catalog_cloud_integrations
    description: Catalog. Cloud integrations
  - name: catalog_cache_common
    description: Catalog. Catalog cache common routes
  - name: catalog_cache_categories
    description: Catalog Cache. Categories
  - name: catalog_cache_property_directory_values
    description: Catalog Cache. Property Directory Values
  - name: catalog_cache_properties
    description: Catalog Cache. Properties
  - name: catalog_cache_nameplates
    description: Catalog Cache. Nameplates
  - name: catalog_cache_brands
    description: Catalog Cache. Brands
  - name: catalog_cache_product_groups
    description: Catalog Cache. Product Groups
  - name: catalog_cache_products
    description: Catalog Cache. Products
  - name: catalog_cache_offers
    description: Catalog Cache. Offers
  - name: catalog_cache_discounts
    description: Catalog Cache. Discounts
  - name: catalog_cache_failed_jobs
    description: Catalog Cache. Failed Jobs
  - name: catalog_cache_indexer_timestamps
    description: Catalog Cache. Indexer Timestamps
  - name: customers_customers
    description: Clients
  - name: customers_users
    description: Clients. Users
  - name: customers_customer_address
    description: Clients. Customer addresses
  - name: customers_customer_status
    description: Clients. Customer statuses
  - name: customers_customer_favourites
    description: Customers. Management of an object CustomerFavorite
  - name: customers_customers_info
    description: Clients. Customers info from CRM
  - name: customers_product_subscribes
    description: Clients. Product subscriptions
  - name: customers_preferences
    description: Clients. Preferences
  - name: customers_bonus_operations
    description: Clients. Bonus operations
  - name: customers_confirmation_codes
    description: Customers. Confirmation Codes
  - name: menu
    description: Menu
  - name: communication
    description: Communication. Common
  - name: communication_messages
    description: Communication. Messages
  - name: communication_chats
    description: Communication. Chats
  - name: communication_statuses
    description: Communication. Statuses
  - name: communication_themes
    description: Communication. Themes
  - name: communication_types
    description: Communication. Types
  - name: communication_notifications
    description: Communication. Notifications
  - name: communication_channels
    description: Communication. Channels
  - name: communication_attachments
    description: Communication. Attachments
  - name: units_sellers
    description: Business units. Sellers
  - name: units_stores
    description: Business units. Seller stores
  - name: units_seller_users
    description: Business units. Seller users (Seller's account)
  - name: units_admin_users
    description: Business units. Users (Administration panel)
paths:
  /common/files/download-protected:
    post:
      tags:
        - common
      operationId: downloadProtectedFile
      x-lg-handler: App\Http\ApiV1\Modules\Common\Controllers\FilesController@downloadProtected
      x-lg-route-name: downloadProtectedFile
      x-lg-skip-request-generation: true
      summary: Скачать приватный файл
      description: Скачать приватный файл
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileProtected"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/menus:search:
    post:
      tags:
        - cms_menus
      operationId: searchMenus
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\MenusController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Menu
      description: Search for objects of Menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchMenusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchMenusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/menus:search-one:
    post:
      tags:
        - cms_menus
      operationId: searchOneMenus
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\MenusController@searchOne
      x-lg-skip-request-generation: true
      summary: Search for an object ofMenu
      description: Search for an object ofMenu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchOneMenusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/menus/{id}/trees:
    put:
      tags:
        - cms_menus
      operationId: replaceMenuTrees
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\MenuTreesController@update
      summary: Updating the Menu tree
      description: Updating the Menu tree
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuTreesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMenuTreesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners:search:
    post:
      tags:
        - cms_banners
      operationId: searchBanners
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannersController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Banner
      description: Search for objects of Banner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBannersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBannersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners:search-one:
    post:
      tags:
        - cms_banners
      operationId: searchOneBanner
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannersController@searchOne
      x-lg-skip-request-generation: true
      summary: Search for an object of Banner
      description: Search for an object of Banner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchOneBannerRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners:
    post:
      tags:
        - cms_banners
      operationId: createBanner
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannersController@create
      summary: Creating an object of Banner
      description: Creating an object of Banner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBannersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners/{id}:
    put:
      tags:
        - cms_banners
      operationId: replaceBanner
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannersController@replace
      summary: Replacing an object of Banner
      description: Replacing an object of Banner
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceBannersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - cms_banners
      operationId: deleteBanner
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannersController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Banner
      description: Deleting an object of Banner
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners:meta:
    get:
      tags:
        - cms_banners
      operationId: getBannersMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannersController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners/{id}:upload-file:
    post:
      tags:
        - cms_banners
      operationId: uploadBannerFile
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannerFilesController@upload
      summary: Uploading file for object type Banner
      description: Uploading file for object type Banner
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Image type (value from BannerImageTypeEnum)
                  example: desktop
                file:
                  type: string
                  format: binary
                  description: Uploaded file
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadBannerFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banners/{id}:delete-file:
    post:
      tags:
        - cms_banners
      operationId: deleteBannerFile
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannerFilesController@delete
      summary: Deleting a file for an object of type Banner
      description: Deleting a file for an object of type Banner
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBannerFileRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banner-types:search:
    post:
      tags:
        - cms_banners
      operationId: searchBannerTypes
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannerTypesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of BannerType
      description: Search for objects of BannerType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBannerTypesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBannerTypesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banner-types:meta:
    get:
      tags:
        - cms_banners
      operationId: getBannerTypesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\BannerTypesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banner-button-types:
    get:
      tags:
        - cms_banners
      operationId: getBannerButtonTypes
      summary: Getting objects of BannerButtonType
      description: Getting objects of BannerButtonType
      x-lg-skip-resource-generation: true
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\EnumsController@bannerButtonTypes
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBannerButtonTypesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/banner-button-locations:
    get:
      tags:
        - cms_banners
      operationId: getBannerButtonLocations
      summary: Getting objects of BannerButtonLocation
      description: Getting objects of BannerButtonLocation
      x-lg-skip-resource-generation: true
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\Banners\EnumsController@bannerButtonLocations
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBannerButtonLocationsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/pages:search:
    post:
      tags:
        - cms_pages
      operationId: searchPages
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Page
      description: Search for objects of Page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPagesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPagesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/pages:search-one:
    post:
      tags:
        - cms_pages
      operationId: searchOnePage
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@searchOne
      x-lg-skip-request-generation: true
      summary: Search for an object ofPage
      description: Search for an object ofPage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchOnePageRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/pages:
    post:
      tags:
        - cms_pages
      operationId: createPage
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@create
      summary: Creating an object of Page
      description: Creating an object of Page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePageRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/pages/{id}:
    get:
      tags:
        - cms_pages
      operationId: getPage
      summary: Get the object of Page by ID
      description: Get the object of Page by ID
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - cms_pages
      operationId: patchPage
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@patch
      summary: Patching an object of Page
      description: Patching an object of Page
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPageRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - cms_pages
      operationId: deletePage
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Page
      description: Deleting an object of Page
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/pages:meta:
    get:
      tags:
        - cms_pages
      operationId: getPagesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\PagesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/products/{id}:add-nameplates:
    post:
      tags:
        - cms_products
      operationId: addProductNameplates
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\ProductsController@addNameplates
      summary: Linking objects of Nameplate to object of Product
      description: Linking objects of Nameplate to object of Product
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsObject"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/products/{id}:delete-nameplates:
    delete:
      tags:
        - cms_products
      operationId: deleteProductNameplates
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\ProductsController@deleteNameplates
      summary: Deleting links between objects of Nameplate and object of Product
      description: Deleting links between objects of Nameplate and object of Product
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsObject"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates:
    post:
      tags:
        - cms_nameplates
      operationId: createNameplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@create
      summary: Creating an object of Nameplate
      description: Creating an object of Nameplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNameplateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameplateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates/{id}:
    get:
      tags:
        - cms_nameplates
      operationId: getNameplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@get
      summary: Get the object of Nameplate by ID
      description: Get the object of Nameplate by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameplateResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - cms_nameplates
      operationId: patchNameplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@patch
      summary: Patching an object of Nameplate
      description: Patching an object of Nameplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchNameplateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameplateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - cms_nameplates
      operationId: deleteNameplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Nameplate
      description: Deleting an object of Nameplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates/{id}:add-products:
    post:
      tags:
        - cms_nameplates
      operationId: addNameplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@addProducts
      summary: Linking objects of Product to object of Nameplate
      description: Linking objects of Product to object of Nameplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsObject"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates/{id}:delete-products:
    delete:
      tags:
        - cms_nameplates
      operationId: deleteNameplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@deleteProducts
      summary: Deleting links between objects of Product and object of Nameplate
      description: Deleting links between objects of Product and object of Nameplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsObject"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates:search:
    post:
      tags:
        - cms_nameplates
      operationId: searchNameplates
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Nameplate
      description: Search for objects of Nameplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchNameplatesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchNameplatesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates:meta:
    get:
      tags:
        - cms_nameplates
      operationId: getNameplatesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplatesController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates/nameplate-products/{id}:
    get:
      tags:
        - cms_nameplate_products
      operationId: getNameplateProduct
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplateProductsController@get
      summary: Get the object of ProductNameplateLink by ID
      description: Get the object of ProductNameplateLink by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameplateProductResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates/nameplate-products:search:
    post:
      tags:
        - cms_nameplate_products
      operationId: searchNameplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplateProductsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductNameplateLink
      description: Search for objects of ProductNameplateLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchNameplateProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchNameplateProductsResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/nameplates/nameplate-products:meta:
    get:
      tags:
        - cms_nameplate_products
      operationId: getNameplateProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\NameplateProductsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/templates:
    post:
      tags:
        - cms_seo_templates
      operationId: createSeoTemplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@create
      summary: Creating an object of SeoTemplate
      description: Creating an object of SeoTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSeoTemplateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeoTemplateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/templates/{id}:add-products:
    post:
      tags:
        - cms_seo_templates
      operationId: addSeoTemplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@addProducts
      summary: Linking objects of Product to object of SeoTemplate
      description: Linking objects of Product to object of SeoTemplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddSeoTemplateProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/templates/{id}:delete-products:
    delete:
      tags:
        - cms_seo_templates
      operationId: deleteSeoTemplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@deleteProducts
      summary: Deleting links between objects of Product and object of SeoTemplate
      description: Deleting links between objects of Product and object of SeoTemplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSeoTemplateProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/templates/{id}:
    get:
      tags:
        - cms_seo_templates
      operationId: getSeoTemplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@get
      summary: Get the object of SeoTemplate by ID
      description: Get the object of SeoTemplate by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeoTemplateResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - cms_seo_templates
      operationId: patchSeoTemplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@patch
      summary: Patching an object of SeoTemplate
      description: Patching an object of SeoTemplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchSeoTemplateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeoTemplateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - cms_seo_templates
      operationId: deleteSeoTemplate
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of SeoTemplate
      description: Deleting an object of SeoTemplate
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/templates:search:
    post:
      tags:
        - cms_seo_templates
      operationId: searchSeoTemplates
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of SeoTemplate
      description: Search for objects of SeoTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSeoTemplatesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSeoTemplatesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/templates:meta:
    get:
      tags:
        - cms_seo_templates
      operationId: getSeoTemplatessMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplatesController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/template-types:
    get:
      tags:
        - cms_seo_templates
      operationId: getTemplateTypes
      summary: Getting objects of CmsSeoVariable
      description: Getting objects of CmsSeoVariable
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\EnumsController@templateTypes
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSeoTemplateTypesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/template-variables:
    get:
      tags:
        - cms_seo_templates
      operationId: getTemplateVariables
      summary: Getting objects of CmsSeoTemplateType
      description: Getting objects of CmsSeoTemplateType
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\EnumsController@templateVariables
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVariablesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/template-products/{id}:
    get:
      tags:
        - cms_seo_template_products
      operationId: getSeoTemplateProduct
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplateProductsController@get
      summary: Get the object of SeoTemplateProduct by ID
      description: Get the object of SeoTemplateProduct by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeoTemplateProductResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/template-products:search:
    post:
      tags:
        - cms_seo_template_products
      operationId: searchSeoTemplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplateProductsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of SeoTemplateProduct
      description: Search for objects of SeoTemplateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSeoTemplateProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSeoTemplateProductsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /cms/seo/template-products:meta:
    get:
      tags:
        - cms_seo_template_products
      operationId: getSeoTemplateProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Cms\Controllers\SeoTemplateProductsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: Вход в систему по логину/паролю
      description: Вход в систему по логину/паролю
      x-lg-handler: App\Http\ApiV1\Modules\Auth\Controllers\AuthController@login
      x-lg-without-middleware: auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/logout:
    get:
      tags:
        - auth
      operationId: logout
      summary: Выход из системы
      description: Выход из системы
      x-lg-handler: App\Http\ApiV1\Modules\Auth\Controllers\AuthController@logout
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmptyResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/refresh:
    post:
      tags:
        - auth
      operationId: refresh
      summary: Повторная авторизация в системе с использованием refresh_token
      description: Повторная авторизация в системе
      x-lg-handler: App\Http\ApiV1\Modules\Auth\Controllers\AuthController@refresh
      x-lg-without-middleware: auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /auth/current-user:
    get:
      tags:
        - auth
      operationId: getCurrentUser
      summary: Получить текущего пользователя
      description: Получить текущего пользователя
      x-lg-handler: App\Http\ApiV1\Modules\Auth\Controllers\AuthController@currentUser
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/points/{id}:
    get:
      tags:
        - logistic_points
      operationId: getPoint
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\PointsController@get
      summary: Получение объекта типа Point
      description: Получение объекта типа Point
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PointResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_points
      operationId: patchPoint
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\PointsController@patch
      summary: Обновления части полей объекта типа Point
      description: Обновления части полей объекта типа Point
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPointRequest"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PointResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/points:search:
    post:
      tags:
        - logistic_points
      operationId: searchPoints
      summary: Поиск пунктов приема/выдачи товара
      description: Поиск пунктов приема/выдачи товара
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\PointsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPointsRequest"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPointsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/points:meta:
    get:
      tags:
        - logistic_points
      operationId: getPointMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\PointsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/point-enum-values:search:
    post:
      tags:
        - logistic_points
      operationId: searchPointEnumValues
      summary: Поиск пунктов приема/выдачи товара для справочника
      description: Поиск пунктов приема/выдачи товара для справочника
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\PointsController@searchEnumValues
      x-lg-route-name: logistic.searchPointEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-services/{id}:
    get:
      tags:
        - logistic_delivery_services
      operationId: getDeliveryService
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicesController@get
      summary: Получение объекта типа DeliveryService
      description: Получение объекта типа DeliveryService
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_services
      operationId: patchDeliveryService
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicesController@patch
      summary: Обновления части полей объекта типа DeliveryService
      description: Обновления части полей объекта типа DeliveryService
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryServiceRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-services:search:
    post:
      tags:
        - logistic_delivery_services
      operationId: searchDeliveryServices
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicesController@search
      x-lg-skip-request-generation: true
      summary: Поиск объектов типа DeliveryService
      description: Поиск объектов типа DeliveryService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryServicesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDeliveryServicesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-enum-values:search:
    post:
      tags:
        - logistic_points
      operationId: searchDeliveryServiceEnumValues
      summary: Поиск объектов типа DeliveryService для справочника
      description: Поиск объектов типа DeliveryService для справочника
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicesController@searchEnumValues
      x-lg-route-name: logistic.searchDeliveryServiceEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-services:search-one:
    post:
      tags:
        - logistic_delivery_services
      operationId: searchOneDeliveryService
      summary: Поиск объекта типа DeliveryService
      description: Поиск объектов типа DeliveryService
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicesController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryServicesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-services/{id}:add-payment-methods:
    post:
      tags:
        - logistic_delivery_services
      operationId: addPaymentMethodsToDeliveryService
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicePaymentMethodLinksController@add
      summary: Добавление доступных способов оплаты службе доставки
      description: Добавление доступных способов оплаты службе доставки
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPaymentMethodsToDeliveryServiceRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-services/{id}:delete-payment-method:
    post:
      tags:
        - logistic_delivery_services
      operationId: deletePaymentMethodFromDeliveryService
      summary: Удаление доступного способа оплаты у службы доставки
      description: Удаление доступного способа оплаты у службы доставки
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServicePaymentMethodLinksController@delete
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePaymentMethodFromDeliveryServiceRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-documents:
    post:
      tags:
        - logistic_delivery_service_documents
      operationId: createDeliveryServiceDocument
      summary: Создание объекта типа DeliveryServiceDocument
      description: Создание объекта типа DeliveryServiceDocument
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentsController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeliveryServiceDocumentRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceDocumentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-documents/{id}:
    get:
      tags:
        - logistic_delivery_service_documents
      operationId: getDeliveryServiceDocument
      summary: Получение объекта типа DeliveryServiceDocument
      description: Получение объекта типа DeliveryServiceDocument
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceDocumentResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_service_documents
      operationId: patchDeliveryServiceDocument
      summary: Обновления части полей объекта типа DeliveryServiceDocument
      description: Обновления части полей объекта типа DeliveryServiceDocument
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryServiceDocumentRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceDocumentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_delivery_service_documents
      operationId: deleteDeliveryServiceDocument
      summary: Удаление объекта типа DeliveryServiceDocument
      description: Удаление объекта типа DeliveryServiceDocument
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentsController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-documents/{id}:upload-file:
    post:
      tags:
        - logistic_delivery_service_documents
      operationId: uploadDeliveryServiceDocumentFile
      summary: Загрузка файла с документом службы доставки
      description: Загрузка файла с документом службы доставки
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentFilesController@upload
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceDocumentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-documents/{id}:delete-file:
    post:
      tags:
        - logistic_delivery_service_documents
      operationId: deleteDeliveryServiceDocumentFile
      summary: Удаление файла с документом службы доставки
      description: Удаление файла с документом службы доставки из базы и файловой системы
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentFilesController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceDocumentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-documents:search:
    post:
      tags:
        - logistic_delivery_service_documents
      operationId: searchDeliveryServiceDocuments
      summary: Поиск объектов типа DeliveryServiceDocument
      description: Поиск объектов типа DeliveryServiceDocument
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryServiceDocumentsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDeliveryServiceDocumentsResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-documents:search-one:
    post:
      tags:
        - logistic_delivery_service_documents
      operationId: searchOneDeliveryServiceDocument
      summary: Поиск объекта типа DeliveryServiceDocument
      description: Поиск объектов типа DeliveryServiceDocument
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceDocumentsController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryServiceDocumentsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceDocumentResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-managers:
    post:
      tags:
        - logistic_delivery_service_managers
      operationId: createDeliveryServiceManager
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceManagersController@create
      summary: Создание объекта типа DeliveryServiceManager
      description: Создание объекта типа DeliveryServiceManager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeliveryServiceManagerRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceManagerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-managers/{id}:
    get:
      tags:
        - logistic_delivery_service_managers
      operationId: getDeliveryServiceManager
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceManagersController@get
      summary: Получение объекта типа DeliveryServiceManager
      description: Получение объекта типа DeliveryServiceManager
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceManagerResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_service_managers
      operationId: patchDeliveryServiceManager
      summary: Обновления части полей объекта типа DeliveryServiceManager
      description: Обновления части полей объекта типа DeliveryServiceManager
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceManagersController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryServiceManagerRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceManagerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_delivery_service_managers
      operationId: deleteDeliveryServiceManager
      summary: Удаление объекта типа DeliveryServiceManager
      description: Удаление объекта типа DeliveryServiceManager
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceManagersController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-managers:search:
    post:
      tags:
        - logistic_delivery_service_managers
      operationId: searchDeliveryServiceManagers
      summary: Поиск объектов типа DeliveryServiceManager
      description: Поиск объектов типа DeliveryServiceManager
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceManagersController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryServiceManagersRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDeliveryServiceManagersResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-managers:search-one:
    post:
      tags:
        - logistic_delivery_service_managers
      operationId: searchOneDeliveryServiceManager
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\DeliveryServiceManagersController@searchOne
      x-lg-skip-request-generation: true
      summary: Поиск объекта типа DeliveryServiceManager
      description: Поиск объектов типа DeliveryServiceManager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryServiceManagersRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryServiceManagerResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/federal-districts:
    post:
      tags:
        - logistic_federal_districts
      operationId: createFederalDistrict
      summary: Создание объекта типа FederalDistrict
      description: Создание объекта типа FederalDistrict
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFederalDistrictRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FederalDistrictResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/federal-districts/{id}:
    get:
      tags:
        - logistic_federal_districts
      operationId: getFederalDistrict
      summary: Получение объекта типа FederalDistrict
      description: Получение объекта типа FederalDistrict
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FederalDistrictResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_federal_districts
      operationId: patchFederalDistrict
      summary: Обновления части полей объекта типа FederalDistrict
      description: Обновления части полей объекта типа FederalDistrict
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchFederalDistrictRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FederalDistrictResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_federal_districts
      operationId: deleteFederalDistrict
      summary: Удаление объекта типа FederalDistrict
      description: Удаление объекта типа FederalDistrict
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/federal-districts:search:
    post:
      tags:
        - logistic_federal_districts
      operationId: searchFederalDistricts
      summary: Поиск объектов типа FederalDistrict
      description: Поиск объектов типа FederalDistrict
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFederalDistrictsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchFederalDistrictsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/federal-districts:search-one:
    post:
      tags:
        - logistic_federal_districts
      operationId: searchOneFederalDistrict
      summary: Поиск объекта типа FederalDistrict
      description: Поиск объектов типа FederalDistrict
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFederalDistrictsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FederalDistrictResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/federal-district-enum-values:search:
    post:
      tags:
        - logistic_federal_districts
      operationId: searchFederalDistrictEnumValues
      summary: Поиск федерального округа для справочника
      description: Поиск федерального округа для справочника
      x-lg-handler: \App\Http\ApiV1\Modules\Logistic\Controllers\Geos\FederalDistrictsController@searchEnumValues
      x-lg-route-name: logistic.searchFederalDistrictEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/regions:
    post:
      tags:
        - logistic_regions
      operationId: createRegion
      summary: Создание объекта типа Region
      description: Создание объекта типа Region
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRegionRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/regions/{id}:
    get:
      tags:
        - logistic_regions
      operationId: getRegion
      summary: Получение объекта типа Region
      description: Получение объекта типа Region
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_regions
      operationId: patchRegion
      summary: Обновления части полей объекта типа Region
      description: Обновления части полей объекта типа Region
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRegionRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_regions
      operationId: deleteRegion
      summary: Удаление объекта типа Region
      description: Удаление объекта типа Region
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/regions:search:
    post:
      tags:
        - logistic_regions
      operationId: searchRegions
      summary: Поиск объектов типа Region
      description: Поиск объектов типа Region
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRegionsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRegionsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/regions:search-one:
    post:
      tags:
        - logistic_regions
      operationId: searchOneRegion
      summary: Поиск объекта типа Region
      description: Поиск объектов типа Region
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRegionsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/region-enum-values:search:
    post:
      tags:
        - logistic_regions
      operationId: searchRegionEnumValues
      summary: Поиск регионов для справочника
      description: Поиск регионов для справочника
      x-lg-handler: \App\Http\ApiV1\Modules\Logistic\Controllers\Geos\RegionsController@searchEnumValues
      x-lg-route-name: logistic.searchRegionEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-prices:
    post:
      tags:
        - logistic_delivery_prices
      operationId: createDeliveryPrice
      summary: Создание объекта типа DeliveryPrice
      description: Создание объекта типа DeliveryPrice
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeliveryPriceRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryPriceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-prices/{id}:
    get:
      tags:
        - logistic_delivery_prices
      operationId: getDeliveryPrice
      summary: Получение объекта типа DeliveryPrice
      description: Получение объекта типа DeliveryPrice
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryPriceResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_prices
      operationId: patchDeliveryPrice
      summary: Обновления части полей объекта типа DeliveryPrice
      description: Обновления части полей объекта типа DeliveryPrice
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryPriceRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryPriceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_delivery_prices
      operationId: deleteDeliveryPrice
      summary: Удаление объекта типа DeliveryPrice
      description: Удаление объекта типа DeliveryPrice
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-prices:search:
    post:
      tags:
        - logistic_delivery_prices
      operationId: searchDeliveryPrices
      summary: Поиск объектов типа DeliveryPrice
      description: Поиск объектов типа DeliveryPrice
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryPricesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDeliveryPricesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-prices:search-one:
    post:
      tags:
        - logistic_delivery_prices
      operationId: searchOneDeliveryPrice
      summary: Поиск объекта типа DeliveryPrice
      description: Поиск объектов типа DeliveryPrice
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryPricesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryPriceResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-prices:meta:
    get:
      tags:
        - logistic_delivery_prices
      operationId: getDeliveryPriceMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryPrices\DeliveryPricesController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi:
    get:
      tags:
        - logistic_delivery_kpi
      operationId: getDeliveryKpi
      summary: Получение объекта типа DeliveryKpi
      description: Получение объекта типа DeliveryKpi
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiController@get
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_kpi
      operationId: patchDeliveryKpi
      summary: Обновления части полей объекта типа DeliveryKpi
      description: Обновления части полей объекта типа DeliveryKpi
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiController@patch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryKpiRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi:meta:
    get:
      tags:
        - logistic_delivery_kpi
      operationId: getDeliveryKpiMeta
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi-ct:search:
    post:
      tags:
        - logistic_delivery_kpi_ct
      operationId: searchDeliveryKpiCts
      summary: Поиск объектов типа DeliveryKpiCt
      description: Поиск объектов типа DeliveryKpiCt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiCtController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryKpiCtRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDeliveryKpiCtResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi-ct:search-one:
    post:
      tags:
        - logistic_delivery_kpi_ct
      operationId: searchOneDeliveryKpiCt
      summary: Поиск объекта типа DeliveryKpiCt
      description: Поиск объектов типа DeliveryKpiCt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiCtController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryKpiCtRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiCtResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi-ct/{id}:
    get:
      tags:
        - logistic_delivery_kpi_ct
      operationId: getDeliveryKpiCt
      summary: Получение объекта типа DeliveryKpiCt
      description: Получение объекта типа DeliveryKpiCt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiCtController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiCtResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - logistic_delivery_kpi_ct
      operationId: createDeliveryKpiCt
      summary: Создание объекта типа DeliveryKpiCt
      description: Создание объекта типа DeliveryKpiCt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiCtController@create
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeliveryKpiCtRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiCtResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_kpi_ct
      operationId: patchDeliveryKpiCt
      summary: Обновление объекта типа DeliveryKpiCt
      description: Обновление объекта типа DeliveryKpiCt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiCtController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryKpiCtRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiCtResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_delivery_kpi_ct
      operationId: deleteDeliveryKpiCt
      summary: Удаление объекта типа DeliveryKpiCt
      description: Удаление объекта типа DeliveryKpiCt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiCtController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi-ppt:search:
    post:
      tags:
        - logistic_delivery_kpi_ppt
      operationId: searchDeliveryKpiPpts
      summary: Поиск объектов типа DeliveryKpiPpt
      description: Поиск объектов типа DeliveryKpiPpt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiPptController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryKpiPptRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDeliveryKpiPptResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi-ppt:search-one:
    post:
      tags:
        - logistic_delivery_kpi_ppt
      operationId: searchOneDeliveryKpiPpt
      summary: Поиск объекта типа DeliveryKpiPpt
      description: Поиск объектов типа DeliveryKpiPpt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiPptController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDeliveryKpiPptRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiPptResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-kpi-ppt/{id}:
    get:
      tags:
        - logistic_delivery_kpi_ppt
      operationId: getDeliveryKpiPpt
      summary: Получение объекта типа DeliveryKpiPpt
      description: Получение объекта типа DeliveryKpiPpt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiPptController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiPptResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - logistic_delivery_kpi_ppt
      operationId: createDeliveryKpiPpt
      summary: Создание объекта типа DeliveryKpiPpt
      description: Создание объекта типа DeliveryKpiPpt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiPptController@create
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeliveryKpiPptRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiPptResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - logistic_delivery_kpi_ppt
      operationId: patchDeliveryKpiPpt
      summary: Обновление объекта типа DeliveryKpiPpt
      description: Обновление объекта типа DeliveryKpiPpt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiPptController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryKpiPptRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryKpiPptResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - logistic_delivery_kpi_ppt
      operationId: deleteDeliveryKpiPpt
      summary: Удаление объекта типа DeliveryKpiPpt
      description: Удаление объекта типа DeliveryKpiPpt
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryKpis\DeliveryKpiPptController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-methods:
    get:
      tags:
        - logistic_enums
      operationId: getDeliveryMethods
      summary: Получение объекта типа DeliveryMethod
      description: Получение объекта типа DeliveryMethod
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\EnumsController@getDeliveryMethods
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeliveryMethodsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/delivery-service-statuses:
    get:
      tags:
        - logistic_enums
      operationId: getDeliveryServiceStatuses
      summary: Получение объекта типа DeliveryServiceStatus
      description: Получение объекта типа DeliveryServiceStatus
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\EnumsController@getDeliveryServiceStatuses
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeliveryServiceStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/shipment-methods:
    get:
      tags:
        - logistic_enums
      operationId: getShipmentMethods
      summary: Получение объекта типа ShipmentMethod
      description: Получение объекта типа ShipmentMethod
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\DeliveryServices\EnumsController@getShipmentMethods
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShipmentMethodsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/cargo/{id}:
    patch:
      tags:
        - logistic_cargo_orders
      operationId: patchCargo
      summary: Обновить данные по грузу
      description: Обновить данные по грузу
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\CargoOrders\CargoController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCargoRequest"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CargoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/cargo/{id}:cancel:
    post:
      tags:
        - logistic_cargo_orders
      operationId: cancelCargo
      summary: Отмена груза
      description: Отмена груза
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\CargoOrders\CargoController@cancel
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CargoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/cargo:search:
    post:
      tags:
        - logistic_cargo_orders
      operationId: searchCargo
      summary: Поиск грузов
      description: Поиск грузов
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\CargoOrders\CargoController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCargoRequest"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCargoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/cargo-orders/{id}:cancel:
    post:
      tags:
        - logistic_cargo_orders
      operationId: cancelCargoOrders
      summary: Отменить заказ на забор груза
      description: Отменить заказ на забор груза
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\CargoOrders\CargoOrdersController@cancel
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CargoOrderResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /logistic/cargo-orders:search:
    post:
      tags:
        - logistic_cargo_orders
      operationId: searchCargoOrders
      summary: Поиск заказов на забор груза
      description: Поиск заказов на забор груза
      x-lg-handler: App\Http\ApiV1\Modules\Logistic\Controllers\CargoOrders\CargoOrdersController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCargoOrdersRequest"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCargoOrdersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders:search:
    post:
      tags:
        - orders_orders
      operationId: searchOrders
      summary: Получение объектов типа Order
      description: Получение объектов типа Order
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchOrdersRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchOrdersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders:meta:
    get:
      tags:
        - orders_orders
      operationId: getOrderMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:
    get:
      tags:
        - orders_orders
      operationId: getOrder
      summary: Получение объекта типа Order
      description: Получение объекта типа Order
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - orders_orders
      operationId: patchOrder
      summary: Обновление части полей объекта типа Order
      description: Обновление части полей объекта типа Order
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrderRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:change-delivery:
    post:
      tags:
        - orders_orders
      operationId: changeOrderDelivery
      summary: Обновление полей по доставке объекта типа Order
      description: Обновление части полей по доставке объекта типа Order
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@changeDelivery
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrderDeliveryRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:add-order-items:
    post:
      tags:
        - order_items
      operationId: addOrderItems
      summary: Добавление OrderItems в заказ
      description: Добавление OrderItems в заказ
      x-lg-handler: \App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@addItem
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderItemsAddRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItemsAddResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:delete-order-items:
    post:
      tags:
        - order_items
      operationId: deleteOrderItems
      summary: Удаление OrderItems из заказа
      description: Удаление OrderItems из заказа
      x-lg-handler: \App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@deleteItem
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderItemsDeleteRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:change-order-items-qty:
    post:
      tags:
        - order_items
      operationId: changeOrderItemQty
      summary: Изменение количества OrderItem
      description: Изменение количества OrderItem
      x-lg-handler: \App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@changeItemQty
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderItemChangeQtyRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderItemChangeQtyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:change-payment-method:
    post:
      tags:
        - orders
      operationId: changeOrderPaymentSystem
      summary: Изменить систему оплаты заказа
      description: Изменить систему оплаты заказа
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@changePaymentSystem
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderChangePaymentSystemRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:attach-file:
    post:
      tags:
        - orders
      operationId: attachOrderFile
      summary: Прикрепить файл к заказу
      description: Прикрепить файл к заказу
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@attachFile
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderAttachFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/orders/{id}:delete-files:
    delete:
      tags:
        - orders
      operationId: deleteOrderFiles
      summary: Удалить прикрепленные файлы к заказу
      description: Удалить прикрепленные файлы к заказу
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\OrdersController@deleteFiles
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderDeleteFilesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/order-statuses:
    get:
      tags:
        - orders
      operationId: getOrderStatuses
      summary: Получение объектов типа OrderStatus
      description: Получение объектов типа OrderStatus
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\EnumsController@orderStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrderStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/order-sources:
    get:
      tags:
        - orders
      operationId: getOrderSources
      summary: Получение объектов типа OrderSource
      description: Получение объектов типа OrderSource
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\EnumsController@orderSources
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrderSourcesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/payment-methods:
    get:
      tags:
        - orders
      operationId: getPaymentMethods
      summary: Получение объектов типа PaymentMethod
      description: Получение объектов типа PaymentMethod
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\EnumsController@paymentMethods
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPaymentMethodsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/payment-statuses:
    get:
      tags:
        - orders
      operationId: getPaymentStatuses
      summary: Получение объектов типа PaymentStatus
      description: Получение объектов типа PaymentStatus
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\EnumsController@paymentStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPaymentStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/delivery-statuses:
    get:
      tags:
        - orders
      operationId: getDeliveryStatuses
      summary: Получение объектов типа DeliveryStatus
      description: Получение объектов типа DeliveryStatus
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\EnumsController@deliveryStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeliveryStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/shipment-statuses:
    get:
      tags:
        - orders
      operationId: getShipmentStatuses
      summary: Получение объектов типа ShipmentStatus
      description: Получение объектов типа ShipmentStatus
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\EnumsController@shipmentStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShipmentStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refund-statuses:
    get:
      tags:
        - orders
      operationId: getRefundStatuses
      summary: Получение объекта типа RefundStatus
      description: Получение объекта типа RefundStatus
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\EnumsController@refundStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refund-reasons:
    post:
      tags:
        - orders
      operationId: createRefundReason
      summary: Создание объекта типа RefundReason
      description: Создание объекта типа RefundReason
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundReasonsController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRefundReasonRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundReasonResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      tags:
        - orders
      operationId: getRefundReasons
      summary: Получение объекта типа RefundReason
      description: Получение объекта типа RefundReason
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\EnumsController@refundReasons
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundReasonsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refund-reasons/{id}:
    patch:
      tags:
        - orders
      operationId: patchRefundReason
      summary: Обновление части полей объекта типа RefundReason
      description: Обновление части полей объекта типа RefundReason
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundReasonsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRefundReasonRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundReasonResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/shipments/{id}:
    patch:
      tags:
        - orders_shipments
      operationId: patchShipment
      summary: Обновление части полей объекта типа Shipments
      description: Обновление части полей объекта типа Shipments
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\ShipmentsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchShipmentRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShipmentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/deliveries/{id}:
    patch:
      tags:
        - orders_deliveries
      operationId: patchDelivery
      summary: Обновление части полей объекта типа Delivery
      description: Обновление части полей объекта типа Delivery
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Orders\DeliveriesController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDeliveryRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/oms-settings:
    get:
      tags:
        - orders_common
      operationId: searchOmsSettings
      summary: Получение всех параметров
      description: Получение всех параметров
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\OmsCommon\SettingsController@search
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - orders_common
      operationId: patchOmsSettings
      summary: Обновление параметров
      description: Обновление параметров
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\OmsCommon\SettingsController@patchSeveral
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchSeveralSettingsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/oms-settings:meta:
    get:
      tags:
        - orders_common
      operationId: getOmsSettingsMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\OmsCommon\SettingsController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/baskets-settings:
    get:
      tags:
        - orders_common
      operationId: searchBasketsSettings
      summary: Получение всех параметров
      description: Получение всех параметров
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\BasketsCommon\SettingsController@search
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - orders_common
      operationId: patchBasketsSettings
      summary: Обновление параметров
      description: Обновление параметров
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\BasketsCommon\SettingsController@patchSeveral
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchSeveralSettingsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/baskets-settings:meta:
    get:
      tags:
        - orders_common
      operationId: getBasketsSettings
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\BasketsCommon\SettingsController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refunds:
    post:
      tags:
        - orders_refunds
      operationId: createRefund
      summary: Создание объекта типа Refund
      description: Создание объекта типа Refund
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRefundRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refunds:search:
    post:
      tags:
        - orders_refunds
      operationId: searchRefunds
      summary: Поиск объектов типа Refund
      description: Поиск объектов типа Refund
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRefundsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchRefundsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refunds:meta:
    get:
      tags:
        - orders_refunds
      operationId: getRefundsMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@meta
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refunds/{id}:
    get:
      tags:
        - orders_refunds
      operationId: getRefund
      summary: Получение объекта типа Refund
      description: Получение объекта типа Refund
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - orders_refunds
      operationId: patchRefund
      summary: Обновление части полей объекта типа Refund
      description: Обновление части полей объекта типа Refund
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRefundRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refunds/{id}:attach-file:
    post:
      tags:
        - orders_refunds
      operationId: attachRefundFile
      summary: Загрузка вложения для заявки на возврат
      description: Загрузка вложения для заявки на возврат
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@attachFile
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/refunds/{id}:delete-files:
    delete:
      tags:
        - orders_refunds
      operationId: deleteRefundFiles
      summary: Удаление вложений для заявки на возврат
      description: Удаление вложений для заявки на возврат
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Refunds\RefundsController@deleteFiles
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRefundFilesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/basket-items:search:
    post:
      tags:
        - orders_baskets
      operationId: searchBasketItems
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Baskets\BasketItemsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of the type BasketItem
      description: Search for objects of the type BasketItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBasketItemsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBasketItemsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/basket-items:meta:
    get:
      tags:
        - orders_baskets
      operationId: getBasketItemMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Baskets\BasketItemsController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/baskets:search:
    post:
      tags:
        - orders_baskets
      operationId: searchBaskets
      summary: Search for objects of the type Basket
      description: Search for objects of the type Basket
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Baskets\BasketsController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBasketsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBasketsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /orders/baskets:meta:
    get:
      tags:
        - orders_baskets
      operationId: getBasketMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Orders\Controllers\Baskets\BasketsController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/pim/failed-jobs:search:
    post:
      tags:
        - catalog_pim_failed_jobs
      operationId: searchPimFailedJobs
      summary: Search for objects of FailedJob
      description: Search for objects of FailedJob
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\PimCommon\FailedJobsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFailedJobsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchFailedJobsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/pim/failed-jobs:meta:
    get:
      tags:
        - catalog_pim_failed_jobs
      operationId: getPimFailedJobsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\PimCommon\FailedJobsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/pim/temp-files:search:
    post:
      tags:
        - catalog_pim_temp_files
      operationId: searchPimTempFiles
      summary: Search for objects of TempFiles
      description: Search for objects of TempFiles
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\PimCommon\TempFilesController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchTempFilesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTempFilesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/pim/temp-files:meta:
    get:
      tags:
        - catalog_pim_temp_files
      operationId: getPimTempFilesMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\PimCommon\TempFilesController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands:meta:
    get:
      tags:
        - catalog_brands
      operationId: getBrandsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands:search:
    post:
      tags:
        - catalog_brands
      operationId: searchBrands
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Brand
      description: Search for objects of Brand
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBrandsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBrandsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brand-enum-values:search:
    post:
      tags:
        - catalog_brands
      operationId: searchBrandEnumValues
      summary: Search for objects of Brand for enum
      description: Search for objects of Brand for enum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@searchEnumValues
      x-lg-route-name: catalog.searchBrandEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands:
    post:
      tags:
        - catalog_brands
      operationId: createBrand
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@create
      summary: Creating an object of Brand
      description: Creating an object of Brand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBrandRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands:preload-image:
    post:
      tags:
        - catalog_brands
      operationId: preloadBrandImage
      summary: Uploading image for brands to use
      description: Uploading image for brands to use
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@preloadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          $ref: "#/components/responses/PreloadFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands/{id}:
    get:
      tags:
        - catalog_brands
      operationId: getBrand
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@get
      summary: Get the object of Brand by ID
      description: Get the object of Brand by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - catalog_brands
      operationId: replaceBrand
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@replace
      summary: Replacing an object of Brand
      description: Replacing an object of Brand
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceBrandRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_brands
      operationId: patchBrand
      summary: Patching an object of Brand
      description: Patching an object of Brand
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchBrandRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_brands
      operationId: deleteBrand
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Brand
      description: Deleting an object of Brand
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands/{id}:upload-image:
    post:
      tags:
        - catalog_brands
      operationId: uploadBrandImage
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@uploadImage
      summary: Uploading image for Brand
      description: Uploading image for Brand
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/brands/{id}:delete-image:
    post:
      tags:
        - catalog_brands
      operationId: deleteBrandImage
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\BrandsController@deleteImage
      x-lg-skip-request-generation: true
      summary: Deleting current Brand image
      description: Deleting current Brand image
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories:meta:
    get:
      tags:
        - catalog_categories
      operationId: getCategoriesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/category-properties:meta:
    get:
      tags:
        - catalog_categories
      operationId: getCategoryPropertiesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@propertiesMeta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories:search:
    post:
      tags:
        - catalog_categories
      operationId: searchCategories
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Category
      description: >
        ### Search for objects of Category


        Available include values:

        * _properties_ - Current attributes available for products in the
        category

        * _hidden_properties_ - Attributes associated with a category but not
        used, e.g. due to inactivity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCategoriesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCategoriesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/category-enum-values:search:
    post:
      tags:
        - catalog_categories
      operationId: searchCategoryEnumValues
      summary: Search for objects of Category for enum
      description: Search for objects of Category for enum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@searchEnumValues
      x-lg-route-name: catalog.searchCategoryEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories:
    post:
      tags:
        - catalog_categories
      operationId: createCategory
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@create
      summary: Creating an object of Category
      description: Creating an object of Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories/{id}:bind-properties:
    post:
      tags:
        - catalog_categories
      operationId: bindCategoryProperties
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@bindProperties
      parameters:
        - $ref: "#/components/parameters/PathId"
      summary: Changing attributes linked to a category
      description: Changing attributes linked to a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BindCategoryPropertiesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories/{id}:
    get:
      tags:
        - catalog_categories
      operationId: getCategory
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@get
      summary: Get the object of Category by ID
      description: >
        ### Get the object of Category by ID


        Available include values:

        * _properties_ - Current attributes available for products in the
        category

        * _hidden_properties_ - Attributes associated with a category but not
        used, e.g. due to inactivity
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - catalog_categories
      operationId: replaceCategory
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@replace
      summary: Replacing an object of Category
      description: Replacing an object of Category
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceCategoryRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_categories
      operationId: deleteCategory
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Category
      description: Deleting an object of Category
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories:tree:
    post:
      tags:
        - catalog_categories
      operationId: getCategoriesTree
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@tree
      x-lg-skip-request-generation: true
      summary: Forming a complete category tree
      description: Forming a complete category tree
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriesTreeResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/actual-category-properties:search:
    post:
      tags:
        - catalog_categories
      operationId: searchActualCategoryProperties
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\ActualCategoryPropertiesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ActualCategoryProperty
      description: Search for objects of ActualCategoryProperty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchActualCategoryPropertiesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchActualCategoryPropertiesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/actual-category-properties:meta:
    get:
      tags:
        - catalog_categories
      operationId: getActualCategoryPropertiesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\ActualCategoryPropertiesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/categories:actualize:
    post:
      tags:
        - catalog_categories
      operationId: actualizeCategories
      summary: Actualize all categories
      description: Actualize all categories
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Categories\CategoriesController@actualize
      x-lg-skip-request-generation: true
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmptyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties:meta:
    get:
      tags:
        - catalog_properties
      operationId: getPropertiesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties:search:
    post:
      tags:
        - catalog_properties
      operationId: searchProperties
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Property
      description: |
        ### Search for objects of Property

        Available include values:
        * _directory_
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPropertiesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPropertiesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties:
    post:
      tags:
        - catalog_properties
      operationId: createProperty
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@create
      summary: Creating an object of Property
      description: Creating an object of Property
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePropertyRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/{id}:
    get:
      tags:
        - catalog_properties
      operationId: getProperty
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@get
      x-lg-skip-request-generation: true
      summary: Get the object of Property by ID
      description: |
        ### Get the object of Property by ID

        Available include values:
        * _directory_
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - catalog_properties
      operationId: replaceProperty
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@replace
      summary: Replacing an object of Property
      description: Replacing an object of Property
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplacePropertyRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_properties
      operationId: patchProperty
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@patch
      summary: Patching an object of Property
      description: Patching an object of Property
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPropertyRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_properties
      operationId: deleteProperty
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\PropertiesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Property
      description: Deleting an object of Property
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/properties-types:
    get:
      tags:
        - catalog_properties
      operationId: getPropertiesTypes
      summary: Get available property types
      description: Get available property types corresponding to the CatalogPropertyTypeEnum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@propertyTypes
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertiesTypesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/{id}:add-directory:
    post:
      tags:
        - catalog_properties
      operationId: createDirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@create
      summary: Creating an object of DirectoryValue
      description: Creating an object of DirectoryValue
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDirectoryValueRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryValueResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/{id}:mass-add-directory:
    post:
      tags:
        - catalog_properties
      operationId: massCreateDirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@massCreate
      summary: Mass creating of objects DirectoryValue
      description: Mass creating of objects DirectoryValue
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MassCreateDirectoryValueRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MassDirectoryValueResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/directory:search:
    post:
      tags:
        - catalog_properties
      operationId: searchDirectoryValues
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of DirectoryValue
      description: Search for objects of DirectoryValue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDirectoryValuesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDirectoryValuesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/directory:preload-image:
    post:
      tags:
        - catalog_properties
      operationId: preloadDirectoryValueImage
      summary: Uploading image for DirectoryValue
      description: Uploading image for DirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@preloadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          $ref: "#/components/responses/PreloadFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/directory:preload-file:
    post:
      tags:
        - catalog_properties
      operationId: preloadDirectoryValueFile
      summary: Uploading file for DirectoryValue
      description: Uploading file for DirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@preloadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          $ref: "#/components/responses/PreloadFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/properties/directory/{id}:
    get:
      tags:
        - catalog_properties
      operationId: getDirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@get
      summary: Get the object of DirectoryValue by ID
      description: Get the object of DirectoryValue by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryValueResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - catalog_properties
      operationId: replaceDirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@replace
      summary: Replacing an object of DirectoryValue
      description: Replacing an object of DirectoryValue
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceDirectoryValueRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryValueResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_properties
      operationId: deleteDirectoryValue
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Properties\DirectoryValuesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of DirectoryValue
      description: Deleting an object of DirectoryValue
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products:preload-image:
    post:
      tags:
        - catalog_products
      operationId: preloadImage
      summary: Upload image for product or product attribute
      description: Upload image for product or product attribute
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@preloadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          $ref: "#/components/responses/PreloadFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products:search:
    post:
      tags:
        - catalog_products
      operationId: searchProducts
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Product
      description: |
        ### Search for objects of Product

        Available include values:
        * _brand_
        * _categories_
        * _images_
        * _attributes_
        * _product_groups_
        * _product_groups.category_
        * _product_groups.main_product_
        * _product_groups.products_
        * _no_filled_required_attributes_
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products:
    post:
      tags:
        - catalog_products
      operationId: createProduct
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@create
      summary: Creating an object of Product
      description: |
        Creating an object of Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDraftResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products:mass-patch:
    post:
      tags:
        - catalog_products
      operationId: massPatchProducts
      summary: Mass patching of object Product
      description: Mass patching of object Product
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@massPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MassPatchProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MassPatchProductsResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products:mass-patch-by-query:
    post:
      tags:
        - catalog_products
      operationId: massPatchProductsByQuery
      summary: Mass patching of object Product by filter
      description: Mass patching of object Product by filter
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@massPatchByQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MassPatchProductsByQueryRequest"
      responses:
        "200":
          description: Job added to query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products:common-attributes:
    post:
      tags:
        - catalog_products
      operationId: getProductsCommonAttributes
      summary: Getting common attributes for selected products
      description: Getting common attributes for selected products
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@commonAttributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductsCommonAttributesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsCommonAttributesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/{id}:
    get:
      tags:
        - catalog_products
      operationId: getProduct
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductsController@get
      summary: Get the object of Product by ID
      description: Get the object of Product by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - catalog_products
      operationId: replaceProduct
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@replace
      summary: Replacing an object of Product
      description: Replacing an object of Product
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceProductRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDraftResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_products
      operationId: patchProduct
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@patch
      summary: Patching an object of Product
      description: Patching an object of Product
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProductRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDraftResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_products
      operationId: deleteProduct
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Product
      description: Deleting an object of Product
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/drafts:search:
    post:
      tags:
        - catalog_products
      operationId: searchProductDrafts
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductDraft
      description: |
        ### Search for objects of ProductDraft

        Available include values:
        * _brand_
        * _categories_
        * _images_
        * _attributes_
        * _product_groups_
        * _product_groups.category_
        * _product_groups.main_product_
        * _product_groups.products_
        * _no_filled_required_attributes_
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductDraftsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductDraftsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/drafts:meta:
    get:
      tags:
        - catalog_products
      operationId: getProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/draft-enum-values:search:
    post:
      tags:
        - catalog_products
      operationId: searchProductDraftEnumValues
      summary: Search for objects of ProductDraft for enum
      description: Search for objects of ProductDraft for enum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@searchEnumValues
      x-lg-route-name: catalog.searchProductDraftEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/drafts/{id}:
    get:
      tags:
        - catalog_products
      operationId: getProductDraft
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@get
      summary: Search for objects of ProductDraft
      description: |
        ### Search for objects of ProductDraft

        Available include values:
        * _brand_
        * _categories_
        * _images_
        * _attributes_
        * _product_groups_
        * _product_groups.category_
        * _product_groups.main_product_
        * _product_groups.products_
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDraftResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/{property}/enum-values:search:
    post:
      tags:
        - catalog_products
      operationId: searchProductsPropertyEnumValues
      summary: Search for objects of Product for enum
      description: Search for objects of Product for enum
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductsController@searchEnumValues
      x-lg-route-name: catalog.searchProductsEnumValues
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/Property"
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/{id}/attributes:
    put:
      tags:
        - catalog_products
      operationId: replaceProductAttributes
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@replaceAttributes
      summary: Replacing all product attributes
      description: Replacing all product attributes. All not specified in the request
        attributes will be deleted
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceProductAttributesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAttributesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_products
      operationId: patchProductAttributes
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@patchAttributes
      summary: Patching product attributes
      description: Creating new attributes and updating specified ones. Attributes not
        specified in the request won't be changed
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProductAttributesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAttributesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_products
      operationId: deleteProductAttributes
      summary: Deleting object of ProductAttribute
      description: Deleting object of ProductAttribute
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@deleteAttributes
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteProductAttributesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/{id}/images:
    put:
      tags:
        - catalog_products
      operationId: replaceImages
      summary: Replacing all product images
      description: Replacing all product images. All not specified in request images
        will be deleted
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@replaceImages
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceProductImagesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductImagesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_products
      operationId: patchImages
      summary: Patching product images
      description: Creating new images and updating specified ones. Images not
        specified in the request won't be changed
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@patchImages
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProductImagesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductImagesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/{id}:upload-image:
    post:
      tags:
        - catalog_products
      operationId: uploadProductImage
      summary: Uploading product image
      description: Uploading product image
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@uploadImage
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductImageUploadRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductImageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/{id}:delete-image:
    post:
      tags:
        - catalog_products
      operationId: deleteProductImage
      summary: Deleting product image
      description: Deleting product image
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductDraftsController@deleteImage
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductImageDeleteRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/fields:search:
    post:
      tags:
        - catalog_products
      operationId: searchProductFields
      summary: Search for objects of ProductField
      description: Search for objects of ProductField
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductFieldsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductFieldsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductFieldsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/fields/{id}:
    get:
      tags:
        - catalog_products
      operationId: getProductField
      summary: Get the object of ProductField by ID
      description: Get the object of ProductField by ID
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductFieldsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductFieldResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_products
      operationId: patchProductField
      summary: Patching an object of ProductField
      description: Patching an object of ProductField
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Products\ProductFieldsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProductFieldRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductFieldResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/product-types:
    get:
      tags:
        - catalog_products
      operationId: getProductTypes
      summary: Get available product types
      description: Get available product types corresponding to the values of the
        CatalogProductTypeEnum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@productTypes
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/product-tariffing-volumes:
    get:
      tags:
        - catalog_products
      operationId: getProductTariffingVolumes
      summary: Get available product tariffs
      description: Get available product tariffs corresponding to the values of the
        CatalogProductTariffingVolumeEnum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@productTariffingVolumes
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTariffingVolumesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/products/product-uom:
    get:
      tags:
        - catalog_products
      operationId: getProductUom
      summary: Get available units of measure for a product
      description: Get available units of measure for a product corresponding to the
        values of the CatalogProductUomEnum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@productUom
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductUomResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups:
    post:
      tags:
        - catalog_product_groups
      operationId: createProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@create
      summary: Creating an object of ProductGroup
      description: Creating an object of ProductGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductGroupResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups/{id}:
    get:
      tags:
        - catalog_product_groups
      operationId: getCatalogProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@get
      summary: Get the object of ProductGroup by ID
      description: Get the object of ProductGroup by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductGroupResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_product_groups
      operationId: patchProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@patch
      summary: Patching an object of ProductGroup
      description: Patching an object of ProductGroup
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProductGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductGroupResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_product_groups
      operationId: deleteCatalogProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of ProductGroup
      description: Deleting an object of ProductGroup
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups/{id}:bind-products:
    post:
      tags:
        - catalog_product_groups
      operationId: bindProductGroupProducts
      summary: Changing the products linked to the ProductGroup
      description: Changing the products linked to the ProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@bindProducts
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BindProductGroupProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductGroupsBindResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups:mass-delete:
    post:
      tags:
        - catalog_product_groups
      operationId: deleteCatalogProductGroups
      summary: Mass deleting objects of ProductGroup
      description: Mass deleting objects of ProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@massDelete
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/MassDeleteBody"
      responses:
        "200":
          $ref: "#/components/responses/MassOperationResultResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups:meta:
    get:
      tags:
        - catalog_product_groups
      operationId: getCatalogProductGroupsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups:search:
    post:
      tags:
        - catalog_product_groups
      operationId: searchCatalogProductGroups
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductGroup
      description: Search for objects of ProductGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductGroupsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductGroupsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-groups:search-one:
    post:
      tags:
        - catalog_product_groups
      operationId: searchOneCatalogProductGroup
      summary: Search for an object of ProductGroup
      description: Search for an object of ProductGroup
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\ProductGroups\ProductGroupsController@searchOne
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductGroupsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductGroupResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/bulk-operations:search:
    post:
      tags:
        - catalog_bulk_operations
      operationId: searchBulkOperations
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\PimCommon\BulkOperationsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of BulkOperation
      description: Search for objects of BulkOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBulkOperationsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBulkOperationsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/bulk-operations:meta:
    get:
      tags:
        - catalog_bulk_operations
      operationId: getBulkOperationsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\PimCommon\BulkOperationsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-imports:
    post:
      tags:
        - catalog_imports
      operationId: createProductImport
      summary: Creating an object of ProductImport
      description: Creating an object of ProductImport and starting import
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Imports\ProductImportsController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductImportRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductImportResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-imports:preload-file:
    post:
      tags:
        - catalog_imports
      operationId: preloadImportFile
      summary: Uploading a file for ProductImport
      description: Uploading a file for ProductImport
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Imports\ProductImportsController@preloadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          $ref: "#/components/responses/PreloadFileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-imports:search:
    post:
      tags:
        - catalog_imports
      operationId: searchProductImports
      summary: Search for objects of ProductImport
      description: Search for objects of ProductImport
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Imports\ProductImportsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductImportsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductImportsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-imports:meta:
    get:
      tags:
        - catalog_imports
      operationId: getProductImportsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Imports\ProductImportsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields for ProductImport
      description: Getting a list of available fields for ProductImport
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-import-warnings:search:
    post:
      tags:
        - catalog_imports
      operationId: searchProductImportWarnings
      summary: Search for objects of ProductImportWarning
      description: Search for objects of ProductImportWarning
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Imports\ProductImportWarningsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductImportWarningsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductImportWarningsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-import-warnings:meta:
    get:
      tags:
        - catalog_imports
      operationId: getProductImportWarningsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Imports\ProductImportWarningsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields for ProductImportWarning
      description: Getting a list of available fields for ProductImportWarning
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-statuses:next:
    post:
      tags:
        - catalog_product_statuses
      operationId: nextProductStatuses
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@getNext
      summary: Getting available statuses from the current one
      description: Getting available statuses from the current one
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetNextStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-statuses/{id}:set-previous:
    post:
      tags:
        - catalog_product_statuses
      operationId: setPreviousProductStatuses
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@setPrevious
      summary: Setting statuses from which you can go to the current one
      description: Setting statuses from which you can go to the current one
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPreviousStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusSettingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-status-enum-values:search:
    post:
      tags:
        - catalog_product_statuses
      operationId: searchProductStatusEnumValues
      summary: Search for objects of ProductStatusSetting for enum
      description: Search for objects of ProductStatusSetting for enum
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@searchEnumValues
      x-lg-route-name: catalog.searchProductStatusEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-statuses:search:
    post:
      tags:
        - catalog_product_statuses
      operationId: searchProductStatuses
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductStatusSetting
      description: Search for objects of ProductStatusSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStatusSettingsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusSettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-statuses:meta:
    get:
      tags:
        - catalog_product_statuses
      operationId: getProductStatusesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-statuses:
    post:
      tags:
        - catalog_product_statuses
      operationId: createProductStatus
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@create
      summary: Creating an object of ProductStatusSetting
      description: Creating an object of ProductStatusSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStatusSettingRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusSettingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-statuses/{id}:
    get:
      tags:
        - catalog_product_statuses
      operationId: getProductStatus
      summary: Get the object of ProductStatusSetting by ID
      description: Get the object of ProductStatusSetting by ID
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusSettingResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_product_statuses
      operationId: patchProductStatus
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@patch
      summary: Patching an object of ProductStatusSetting
      description: Patching an object of ProductStatusSetting
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStatusSettingRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusSettingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_product_statuses
      operationId: deleteProductStatus
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Classifiers\ProductStatusesController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of ProductStatusSetting
      description: Deleting an object of ProductStatusSetting
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-status-types:
    get:
      tags:
        - catalog_product_statuses
      operationId: getProductStatusType
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@productStatusType
      x-lg-skip-resource-generation: true
      summary: Search for objects of CatalogProductStatusTypeEnum
      description: Search for objects of CatalogProductStatusTypeEnum
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductStatusTypesResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-events:
    get:
      tags:
        - catalog_product_events
      operationId: getProductEvents
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@productEvents
      x-lg-skip-resource-generation: true
      summary: Search for objects of CatalogProductEventEnum
      description: Search for objects of CatalogProductEventEnum
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEventsResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-event-operations:
    get:
      tags:
        - catalog_product_events
      operationId: getProductEventOperations
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@productEventOperations
      x-lg-skip-resource-generation: true
      summary: Search for objects of CatalogEventOperationEnum
      description: Search for objects of CatalogEventOperationEnum
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEventOperationsResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-events:search:
    post:
      tags:
        - catalog_product_events
      operationId: searchProductEvent
      summary: Search for objects of ProductEvent
      description: Search for objects of ProductEvent
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\ProductEvents\ProductEventsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductEventsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductEventsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/product-events:meta:
    get:
      tags:
        - catalog_product_events
      operationId: getProductEventsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\ProductEvents\ProductEventsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers/entities:sync:
    post:
      tags:
        - catalog_offers_common
      operationId: syncEntities
      summary: Start synchronization of offers data
      description: Start synchronization of offers data
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Offers\EntitiesController@sync
      x-lg-skip-request-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers:migrate:
    post:
      tags:
        - catalog_offers_common
      operationId: offersMigration
      summary: Start synchronization of data objects from master services
      description: Start synchronization of data objects from master services
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Offers\OffersController@migrate
      x-lg-skip-request-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers/failed-jobs:search:
    post:
      tags:
        - catalog_offers_failed_jobs
      operationId: searchAnalyticsFailedJobs
      summary: Search for objects of FailedJob
      description: Search for objects of FailedJob
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Offers\FailedJobsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFailedJobsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchFailedJobsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers/failed-jobs:meta:
    get:
      tags:
        - catalog_offers_failed_jobs
      operationId: getAnalyticsFailedJobsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Offers\FailedJobsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers/{id}:
    get:
      tags:
        - catalog_offers
      operationId: getOffer
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Offers\OffersController@get
      summary: Get the object of Offer by ID
      description: Get the object of Offer by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_offers
      operationId: patchOffer
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Offers\OffersController@patch
      summary: Patching an object of Offer
      description: Patching an object of Offer
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOfferRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers:search:
    post:
      tags:
        - catalog_offers
      operationId: searchOffers
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Offers\OffersController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Offer
      description: Search for objects of Offer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchOffersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchOffersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/offers:meta:
    get:
      tags:
        - catalog_offers
      operationId: getOffersMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Offers\OffersController@meta
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/stocks/{id}:
    get:
      tags:
        - catalog_stocks
      operationId: getStock
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Offers\StocksController@get
      summary: Get the object of Stock by ID
      description: Get the object of Stock by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_stocks
      operationId: patchStock
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Offers\StocksController@patch
      summary: Patching an object of Stock
      description: Patching an object of Stock
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStockRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/stocks:search:
    post:
      tags:
        - catalog_stocks
      operationId: searchStocks
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Offers\StocksController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Stock
      description: Search for objects of Stock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStocksRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchStocksResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/stocks:meta:
    get:
      tags:
        - catalog_stocks
      operationId: getStocksMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Offers\StocksController@meta
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews/review-statuses:
    get:
      tags:
        - catalog_reviews
      operationId: getReviewStatuses
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@reviewStatuses
      x-lg-skip-resource-generation: true
      summary: Get available review statuses
      description: Get available review statuses corresponding to the ReviewStatusEnum
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewStatusesResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews/{id}:
    get:
      tags:
        - catalog_reviews
      operationId: getReview
      summary: Get the object of Review by ID
      description: |
        ### Get the object of Review by ID

        Available include values:
        * _customers_ - Details of the user who created the review
        * _products_ - Details of the product that was reviewed
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_reviews
      operationId: patchReview
      summary: Patching an object of Review
      description: Patching an object of Review
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchReviewRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_reviews
      operationId: deleteReview
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@delete
      x-lg-skip-request-generation: true
      summary: Deleting an object of Review
      description: Deleting an object of Review
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews:search:
    post:
      tags:
        - catalog_reviews
      operationId: searchReviews
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Review
      description: Search for objects of Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchReviewsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchReviewsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews:mass-delete:
    post:
      tags:
        - catalog_reviews
      operationId: massDeleteReviews
      summary: Mass deleting of object Review
      description: Mass deleting of object Review
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@massDelete
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/MassDeleteBody"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews:meta:
    get:
      tags:
        - catalog_reviews
      operationId: getReviewsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews/review-customer:meta:
    get:
      tags:
        - catalog_reviews
      operationId: getReviewCustomerMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@customerMeta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/reviews/review-product:meta:
    get:
      tags:
        - catalog_reviews
      operationId: getReviewProductMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Reviews\ReviewsController@productMeta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feeds/entities:migrate:
    post:
      tags:
        - catalog_feed_common
      operationId: entitiesMigrationFeeds
      summary: Start synchronization of data objects from master services
      description: Start synchronization of data objects from master services
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\EntitiesController@migrate
      x-lg-skip-request-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feeds/{id}:
    get:
      tags:
        - catalog_feeds
      operationId: getFeed
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedsController@get
      summary: Get the object of Feed by ID
      description: Get the object of Feed by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feeds:search:
    post:
      tags:
        - catalog_feeds
      operationId: searchFeeds
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Feed
      description: Search for objects of Feed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFeedsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchFeedsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feeds:meta:
    get:
      tags:
        - catalog_feeds
      operationId: getFeedsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feed-types:
    get:
      tags:
        - catalog_feed_settings
      operationId: getFeedTypes
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@feedTypes
      x-lg-skip-resource-generation: true
      summary: Search for objects of CatalogFeedTypeEnum
      description: Search for objects of CatalogFeedTypeEnum
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedTypesResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feed-platforms:
    get:
      tags:
        - catalog_feed_settings
      operationId: getFeedPlatforms
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\EnumsController@feedPlatforms
      x-lg-skip-resource-generation: true
      summary: Search for objects of CatalogFeedPlatformEnum
      description: Search for objects of CatalogFeedPlatformEnum
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedPlatformsResponse"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feed-settings:
    post:
      tags:
        - catalog_feed_settings
      operationId: createFeedSettings
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedSettingsController@create
      summary: Creating an object of FeedSettings
      description: Creating an object of FeedSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedSettingsForCreate"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedSettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feed-settings/{id}:
    get:
      tags:
        - catalog_feed_settings
      operationId: getFeedSettings
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedSettingsController@get
      summary: Get the object of FeedSettings by ID
      description: Get the object of FeedSettings by ID
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedSettingsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_feed_settings
      operationId: patchFeedSettings
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedSettingsController@patch
      summary: Patching an object of FeedSettings
      description: Patching an object of FeedSettings
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedSettingsForPatch"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedSettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feed-settings:search:
    post:
      tags:
        - catalog_feed_settings
      operationId: searchFeedSettings
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedSettingsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of FeedSettings
      description: Search for objects of FeedSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFeedSettingsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchFeedSettingsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/feed-settings:meta:
    get:
      tags:
        - catalog_feed_settings
      operationId: getFeedSettingsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\FeedSettingsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/cloud-integrations:
    get:
      tags:
        - catalog_cloud_integrations
      operationId: getCloudIntegration
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\CloudIntegrationsController@get
      summary: Get the object of CloudIntegration
      description: Get the object of CloudIntegration
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudIntegrationResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - catalog_cloud_integrations
      operationId: createCloudIntegration
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\CloudIntegrationsController@create
      summary: Creating an object of CloudIntegration
      description: Creating an object of CloudIntegration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCloudIntegrationRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudIntegrationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - catalog_cloud_integrations
      operationId: patchCloudIntegration
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\Feeds\CloudIntegrationsController@patch
      summary: Patching an object of CloudIntegration
      description: Patching an object of CloudIntegration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCloudIntegrationRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudIntegrationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog/catalog-cache/entities:migrate:
    post:
      tags:
        - catalog_cache_common
      operationId: entitiesMigrationCatalogCache
      summary: Start synchronization of data objects from master services
      description: Start synchronization of data objects from master services
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\EntitiesController@migrate
      x-lg-skip-request-generation: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/category-properties:search:
    post:
      tags:
        - catalog_cache_categories
      operationId: searchCatalogCacheCategoryProperties
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ActualCategoryPropertiesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of CategoryProperties
      description: Search for objects of CategoryProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchActualCategoryPropertiesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchActualCategoryPropertiesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/category-properties:meta:
    get:
      tags:
        - catalog_cache_categories
      operationId: getCatalogCacheCategoryPropertiesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ActualCategoryPropertiesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/categories:search:
    post:
      tags:
        - catalog_cache_categories
      operationId: searchCatalogCacheCategories
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\CategoriesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Categories
      description: Search for objects of Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCategoriesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCategoriesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/categories:meta:
    get:
      tags:
        - catalog_cache_categories
      operationId: getCatalogCacheCategoriesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\CategoriesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/failed-jobs:search:
    post:
      tags:
        - catalog_cache_failed_jobs
      operationId: searchCatalogCacheFailedJobs
      summary: Search for objects of FailedJob
      description: Search for objects of FailedJob
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\FailedJobsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFailedJobsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchFailedJobsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/failed-jobs:meta:
    get:
      tags:
        - catalog_cache_failed_jobs
      operationId: getCatalogCacheFailedJobsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\FailedJobsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/indexer-timestamps:search:
    post:
      tags:
        - catalog_cache_indexer_timestamps
      operationId: searchCatalogCacheIndexerTimestamp
      summary: Search for objects of IndexerTimestamp
      description: Search for objects of IndexerTimestamp
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\IndexerTimestampsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchIndexerTimestampsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchIndexerTimestampsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/indexer-timestamps:meta:
    get:
      tags:
        - catalog_cache_indexer_timestamps
      operationId: getCatalogCacheIndexerTimestampsMeta
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\IndexerTimestampsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/indexer-timestamps/{id}:
    patch:
      tags:
        - catalog_cache_indexer_timestamps
      operationId: patchCatalogCacheIndexerTimestamp
      summary: Patching an object of IndexerTimestamp
      description: Patching an object of IndexerTimestamp
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\IndexerTimestampsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchIndexerTimestampRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexerTimestampResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - catalog_cache_indexer_timestamps
      operationId: deleteCatalogCacheIndexerTimestamp
      summary: Deleting an object of IndexerTimestamp
      description: Deleting an object of IndexerTimestamp
      x-lg-handler: \App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\IndexerTimestampsController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/properties:search:
    post:
      tags:
        - catalog_cache_properties
      operationId: searchCatalogCacheProperties
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\PropertiesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Properties
      description: Search for objects of Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPropertiesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPropertiesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/properties:meta:
    get:
      tags:
        - catalog_cache_properties
      operationId: getCatalogCachePropertiesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\PropertiesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/nameplates:search:
    post:
      tags:
        - catalog_cache_nameplates
      operationId: searchCatalogCacheNameplates
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\NameplatesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Nameplates
      description: Search for objects of Nameplates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchNameplatesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchNameplatesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/nameplates:meta:
    get:
      tags:
        - catalog_cache_nameplates
      operationId: getCatalogCacheNameplatesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\NameplatesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/nameplate-products:search:
    post:
      tags:
        - catalog_cache_nameplates
      operationId: searchCatalogCacheNameplateProducts
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\NameplateProductsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of NameplateProducts
      description: Search for objects of NameplateProducts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchNameplateProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchNameplateProductsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/nameplate-products:meta:
    get:
      tags:
        - catalog_cache_nameplates
      operationId: getCatalogCacheNameplateProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\NameplateProductsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/brands:search:
    post:
      tags:
        - catalog_cache_brands
      operationId: searchCatalogCacheBrands
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\BrandsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Brands
      description: Search for objects of Brands
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBrandsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBrandsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/brands:meta:
    get:
      tags:
        - catalog_cache_brands
      operationId: getCatalogCacheBrandsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\BrandsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/property-directory-values:search:
    post:
      tags:
        - catalog_cache_property_directory_values
      operationId: searchCatalogCachePropertyDirectoryValues
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\PropertyDirectoryValuesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of PropertyDirectoryValues
      description: Search for objects of PropertyDirectoryValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPropertyDirectoryValuesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPropertyDirectoryValuesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/property-directory-values:meta:
    get:
      tags:
        - catalog_cache_property_directory_values
      operationId: getCatalogCachePropertyDirectoryValuesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\PropertyDirectoryValuesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/product-groups:search:
    post:
      tags:
        - catalog_cache_product_groups
      operationId: searchCatalogCacheProductGroups
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductGroupsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductGroups
      description: Search for objects of ProductGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductGroupsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductGroupsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/product-groups:meta:
    get:
      tags:
        - catalog_cache_product_groups
      operationId: getCatalogCacheProductGroupsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductGroupsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/product-group-products:search:
    post:
      tags:
        - catalog_cache_product_groups
      operationId: searchCatalogCacheProductGroupProducts
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductGroupProductsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductGroupProducts
      description: Search for objects of ProductGroupProducts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductGroupProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductGroupProductsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/product-group-products:meta:
    get:
      tags:
        - catalog_cache_product_groups
      operationId: getCatalogCacheProductGroupProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductGroupProductsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/offers:search:
    post:
      tags:
        - catalog_cache_offers
      operationId: searchCatalogCacheOffers
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\OffersController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Offers
      description: Search for objects of Offers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchOffersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchOffersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/offers:meta:
    get:
      tags:
        - catalog_cache_offers
      operationId: getCatalogCacheOffersMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\OffersController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/discounts:search:
    post:
      tags:
        - catalog_cache_discounts
      operationId: searchCatalogCacheDiscounts
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\DiscountsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Discounts
      description: Search for objects of Discounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDiscountsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDiscountsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/discounts:meta:
    get:
      tags:
        - catalog_cache_offers
      operationId: getCatalogCacheDiscountsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\DiscountsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/products:search:
    post:
      tags:
        - catalog_cache_products
      operationId: searchCatalogCacheProducts
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Products
      description: Search for objects of Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/products:meta:
    get:
      tags:
        - catalog_cache_products
      operationId: getCatalogCacheProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/images:search:
    post:
      tags:
        - catalog_cache_products
      operationId: searchCatalogCacheImages
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ImagesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Images
      description: Search for objects of Images
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchImagesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchImagesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/images:meta:
    get:
      tags:
        - catalog_cache_products
      operationId: getCatalogCacheImagesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ImagesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/product-property-values:search:
    post:
      tags:
        - catalog_cache_products
      operationId: searchCatalogCacheProductPropertyValues
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductPropertyValuesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of ProductPropertyValues
      description: Search for objects of ProductPropertyValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductPropertyValuesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductPropertyValuesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /catalog-cache/product-property-values:meta:
    get:
      tags:
        - catalog_cache_products
      operationId: getCatalogCacheProductPropertyValuesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Catalog\Controllers\CatalogCache\ProductPropertyValuesController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers:meta:
    get:
      tags:
        - customers_customers
      operationId: getCustomerMeta
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers:search:
    post:
      tags:
        - customers_customers
      operationId: searchCustomers
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@search
      x-lg-skip-request-generation: true
      summary: Search for customers that meet the filter
      description: Search for customers matching the filter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCustomersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCustomersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customer-enum-values:search:
    post:
      tags:
        - customers_customers
      operationId: searchCustomerEnumValues
      summary: Search for customers for a directory
      description: Search for customers for a directory
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@searchEnumValues
      x-lg-route-name: customers.searchCustomerEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers:
    post:
      tags:
        - customers_customers
      operationId: createCustomer
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@create
      x-lg-request-class-name: Customers/CreateCustomerRequest
      summary: Request to create a new customer
      description: Request to create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers/{id}:
    get:
      tags:
        - customers_customers
      operationId: getCustomer
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@get
      summary: Request to get a customer
      description: Request to get a customer
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - customers_customers
      operationId: patchCustomer
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@patch
      x-lg-request-class-name: Customers/PatchCustomerRequest
      summary: Updating an object of type Customer
      description: Updating an object of type Customer
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCustomerRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers/{id}:delete-personal-data:
    post:
      tags:
        - customers_customers
      operationId: deleteCustomerPersonalData
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@deletePersonalData
      x-lg-skip-request-generation: true
      summary: Request to delete customer's personal data
      description: Request to delete customer's personal data
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers/{id}:upload-avatar:
    post:
      tags:
        - customers_customers
      operationId: uploadCustomerAvatar
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@uploadAvatar
      x-lg-request-class-name: Customers/UploadCustomerAvatarRequest
      summary: Uploading a file with customer avatar
      description: Uploading a file with customer avatar
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers/{id}:delete-avatar:
    post:
      tags:
        - customers_customers
      operationId: deleteCustomerAvatar
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersController@deleteAvatar
      x-lg-skip-request-generation: true
      summary: Deleting a customer avatar
      description: Deleting a customer avatar from the database and file system
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/orders:meta:
    get:
      tags:
        - customers_customers
      operationId: getCustomerOrderMeta
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerOrdersController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/users:search:
    post:
      tags:
        - customers_users
      operationId: searchCustomerUsers
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@search
      x-lg-skip-request-generation: true
      summary: Request to search for a User matching the filter
      description: Request to search for a User matching the filter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchUsersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/users-enum-values:search:
    post:
      tags:
        - customers_users
      operationId: searchCustomerUserEnumValues
      summary: Search users for directory
      description: Search users for a directory
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@searchEnumValues
      x-lg-route-name: customers.searchCustomerUserEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/users:search-one:
    post:
      tags:
        - customers_users
      operationId: searchOneCustomerUser
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@searchOne
      x-lg-skip-request-generation: true
      summary: Request to search for one User matching the filter
      description: Request to search for one User matching the filter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchUsersRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/users:
    post:
      tags:
        - customers_users
      operationId: createCustomerUser
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@create
      x-lg-request-class-name: Users/CreateCustomerUserRequest
      summary: Request to create a new user
      description: Request to create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/users/{id}:
    get:
      tags:
        - customers_users
      operationId: getCustomerUser
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@get
      summary: Request to get user by id
      description: Request to get user by id
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - customers_users
      operationId: patchCustomerUser
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@patch
      x-lg-request-class-name: Users/PatchCustomerUserRequest
      summary: Request to update part of user's fields
      description: Request to update part of user's fields
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUserRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - customers_users
      operationId: deleteCustomerUser
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@delete
      x-lg-skip-request-generation: true
      summary: Request to delete a user
      description: Request to delete a user
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/users/{id}:refresh-password-token:
    post:
      tags:
        - customers_users
      operationId: customerUserRefreshPasswordToken
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerUsersController@refreshPasswordToken
      x-lg-skip-request-generation: true
      summary: Update token for password setting for customer user
      description: Update token for password setting for customer user
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmptyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/addresses:search:
    post:
      tags:
        - customers_customer_address
      operationId: searchCustomerAddresses
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersAddressesController@search
      x-lg-skip-request-generation: true
      summary: Searching for addresses that match the filter
      description: Searching for addresses that match the filter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCustomerAddressesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCustomerAddressesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/addresses:
    post:
      tags:
        - customers_customer_address
      operationId: createCustomerAddress
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersAddressesController@create
      x-lg-request-class-name: Addresses/CreateCustomerAddressRequest
      summary: Request to create a new customer address
      description: Request to create a new customer address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerAddressRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAddressResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/addresses/{id}:
    get:
      tags:
        - customers_customer_address
      operationId: getCustomerAddress
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersAddressesController@get
      summary: Request to get address by id
      description: Request to get address by id
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAddressResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - customers_customer_address
      operationId: replaceCustomerAddress
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersAddressesController@replace
      x-lg-request-class-name: Addresses/ReplaceCustomerAddressRequest
      summary: Request to update customer address
      description: Request to update customer address
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceCustomerAddressRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAddressResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - customers_customer_address
      operationId: deleteCustomerAddress
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersAddressesController@delete
      x-lg-skip-request-generation: true
      summary: Request to delete customer address
      description: Request to delete customer address
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/addresses/{id}:set-as-default:
    post:
      tags:
        - customers_customer_address
      operationId: setCustomerAddressesAsDefault
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersAddressesController@setDefault
      x-lg-skip-request-generation: true
      summary: Request to set default address
      description: Request to set default address
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/statuses:search:
    post:
      tags:
        - customers_customer_status
      operationId: searchCustomerStatuses
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerStatusesController@search
      x-lg-skip-request-generation: true
      summary: Search for statuses matching the filter
      description: Search for statuses matching the filter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCustomerStatusesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCustomerStatusesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/statuses-enum-values:search:
    post:
      tags:
        - customers_customer_status
      operationId: searchCustomerStatusEnumValues
      summary: Search client status for a directory
      description: Search client status for a directory
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerStatusesController@searchEnumValues
      x-lg-route-name: customers.searchCustomerStatusEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/statuses:
    post:
      tags:
        - customers_customer_status
      operationId: createCustomerStatus
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerStatusesController@create
      x-lg-request-class-name: Statuses/CreateCustomerStatusRequest
      summary: Request to create a new client status
      description: Request to create a new client status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerStatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/statuses/{id}:
    get:
      tags:
        - customers_customer_status
      operationId: getCustomerStatus
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerStatusesController@get
      summary: Request to get status by id
      description: Request to get status by id
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerStatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - customers_customer_status
      operationId: patchCustomerStatus
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerStatusesController@patch
      x-lg-request-class-name: Statuses/PatchCustomerStatusRequest
      summary: Request to update customer status
      description: Request to update customer status
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCustomerStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerStatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - customers_customer_status
      operationId: deleteCustomerStatus
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerStatusesController@delete
      x-lg-skip-request-generation: true
      summary: Request to delete client status
      description: Request to delete customer status
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/favorites:search:
    post:
      tags:
        - customers_customer_favourites
      operationId: searchCustomerFavorite
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersFavoritesController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of CustomerFavorite
      description: Search for objects of CustomerFavorite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCustomerFavoritesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCustomerFavoritesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/favorites:
    post:
      tags:
        - customers_customer_favourites
      operationId: createCustomerFavorites
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersFavoritesController@create
      x-lg-request-class-name: Favorites/CreateCustomerFavoriteRequest
      summary: Mass creating objects of CustomerFavorite
      description: Mass creating objects of CustomerFavorite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerFavoritesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/favorites:delete-product:
    post:
      tags:
        - customers_customer_favourites
      operationId: deleteCustomerFavorites
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersFavoritesController@delete
      x-lg-request-class-name: Favorites/DeleteCustomerFavoriteRequest
      summary: Mass deleting objects of CustomerFavorite
      description: Mass deleting objects of CustomerFavorite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCustomerFavoritesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/favorites:clear:
    post:
      tags:
        - customers_customer_favourites
      operationId: clearCustomerFavorites
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersFavoritesController@clear
      x-lg-request-class-name: Favorites/ClearCustomerFavoritesRequest
      summary: Deleting all objects of CustomerFavorite by Customer
      description: Deleting all objects of CustomerFavorite by Customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClearCustomerFavoritesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers-info:search:
    post:
      tags:
        - customers_customers_info
      operationId: searchCustomersInfo
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersInfoController@search
      x-lg-skip-request-generation: true
      summary: Searching for crm customer information
      description: Searching for crm customer information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCustomersInfoRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCustomersInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers-info:
    post:
      tags:
        - customers_customers_info
      operationId: createCustomerInfo
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersInfoController@create
      x-lg-request-class-name: CustomersInfo/CreateCustomerInfoRequest
      summary: Create customer crm information
      description: Create customer crm information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerInfoRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/customers-info/{id}:
    get:
      tags:
        - customers_customers_info
      operationId: getCustomersInfo
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersInfoController@get
      summary: Request to receive customer crm information by id
      description: Request to receive customer crm information by id
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - customers_customers_info
      operationId: patchCustomerInfo
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersInfoController@patch
      x-lg-request-class-name: CustomersInfo/PatchCustomerInfoRequest
      summary: Request to update customer crm information
      description: Request to update customer crm information
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceCustomerInfoRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - customers_customers_info
      operationId: deleteCustomersInfo
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersInfoController@delete
      x-lg-skip-request-generation: true
      summary: Request to delete customer crm information
      description: Request to delete customer crm information
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/bonus-operations:search:
    post:
      tags:
        - customers_bonus_operations
      operationId: searchCustomersBonusOperations
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersBonusOperationsController@search
      x-lg-skip-request-generation: true
      summary: Search for customer's bonus operations
      description: Search for customer's bonus operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchBonusOperationsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchBonusOperationsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/bonus-operations:
    post:
      tags:
        - customers_bonus_operations
      operationId: createBonusOperation
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersBonusOperationsController@create
      x-lg-request-class-name: BonusOperations/CreateBonusOperationRequest
      summary: Creating customer's bonus operations
      description: Creating customer's bonus operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBonusOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BonusOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/bonus-operations/{id}:
    get:
      tags:
        - customers_bonus_operations
      operationId: getBonusOperation
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersBonusOperationsController@get
      summary: Getting customer's bonus operations by id
      description: Getting customer's bonus operations by id
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BonusOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - customers_bonus_operations
      operationId: patchBonusOperation
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersBonusOperationsController@patch
      x-lg-request-class-name: BonusOperations/PatchBonusOperationRequest
      summary: Updating the customer's bonus transaction
      description: Updating the customer's bonus operations
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchBonusOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BonusOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - customers_bonus_operations
      operationId: deleteBonusOperation
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersBonusOperationsController@delete
      x-lg-skip-request-generation: true
      summary: Deleting customer bonus transactions
      description: Deleting customer bonus transactions
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/product-subscribes:search:
    post:
      tags:
        - customers_product_subscribes
      operationId: searchCustomerProductSubscribes
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersProductSubscribesController@search
      x-lg-skip-request-generation: true
      summary: Search for product subscriptions
      description: Search for product subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchProductSubscribesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProductSubscribesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/product-subscribes:
    post:
      tags:
        - customers_product_subscribes
      operationId: createCustomerProductSubscribes
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersProductSubscribesController@create
      x-lg-request-class-name: ProductSubscribes/CreateCustomerProductSubscribeRequest
      summary: Creating a customer subscription to a product
      description: Creating a customer subscription to a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductSubscribeRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSubscribeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/product-subscribes:delete-product:
    post:
      tags:
        - customers_product_subscribes
      operationId: deleteCustomerProductSubscribes
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersProductSubscribesController@delete
      x-lg-request-class-name: ProductSubscribes/DeleteCustomerProductSubscribeRequest
      summary: Deleting a customer's subscription to a product
      description: Deleting a customer's subscription to a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteProductSubscribesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/product-subscribes:clear:
    post:
      tags:
        - customers_product_subscribes
      operationId: clearCustomerProductSubscribes
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersProductSubscribesController@clear
      x-lg-request-class-name: ProductSubscribes/ClearCustomerProductSubscribesRequest
      summary: Deleting all customer subscriptions for goods
      description: Deleting all customer subscriptions for goods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClearProductSubscribesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/preferences:search:
    post:
      tags:
        - customers_preferences
      operationId: searchCustomerPreferences
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomersPreferencesController@search
      x-lg-skip-request-generation: true
      summary: Search for customer preferences
      description: Search for customer preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPreferencesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPreferencesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/confirmation-codes:search:
    post:
      tags:
        - customers_confirmation_codes
      operationId: customerConfirmationCodesSearch
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerConfirmationCodesController@search
      x-lg-skip-request-generation: true
      summary: Search for customer confirmation codes
      description: Search for customer confirmation codes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchConfirmationCodesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchConfirmationCodesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /customers/confirmation-codes:meta:
    get:
      tags:
        - customers_confirmation_codes
      operationId: customerConfirmationCodesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Customers\Controllers\CustomerConfirmationCodesController@meta
      x-lg-skip-request-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/promo-codes:
    post:
      tags:
        - marketing_promo_codes
      operationId: createPromoCode
      summary: Создание объекта типа PromoCode
      description: Создание объекта типа PromoCode
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\PromoCodesController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromoCodeForCreate"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoCodeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/promo-codes/{id}:
    get:
      tags:
        - marketing_promo_codes
      operationId: getPromoCode
      summary: Получение объекта типа PromoCode
      description: Получение объекта типа PromoCode
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\PromoCodesController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoCodeResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - marketing_promo_codes
      operationId: patchPromoCode
      summary: Обновления части полей объекта типа PromoCode
      description: Обновления части полей объекта типа PromoCode
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\PromoCodesController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromoCodeForPatch"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoCodeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - marketing_promo_codes
      operationId: deletePromoCode
      summary: Удаление объекта типа PromoCode
      description: Удаление объекта типа PromoCode
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\PromoCodesController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/promo-codes:search:
    post:
      tags:
        - marketing_promo_codes
      operationId: searchPromoCodes
      summary: Поиск объектов типа PromoCode
      description: Поиск объектов типа PromoCode
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\PromoCodesController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPromoCodesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPromoCodesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/promo-codes:meta:
    get:
      tags:
        - marketing_promo_codes
      operationId: getPromoCodesMeta
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\PromoCodesController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/promo-code-statuses:
    get:
      tags:
        - marketing_promo_codes
      operationId: getPromoCodeStatuses
      summary: Получение объектов типа PromoCodeStatus
      description: Получение объектов типа PromoCodeStatus
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\EnumsController@promoCodeStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPromoCodeStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts:
    post:
      tags:
        - marketing_discounts
      operationId: createDiscount
      summary: Создание объекта типа Discount
      description: Создание объекта типа Discount
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountForCreate"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts/{id}:
    get:
      tags:
        - marketing_discounts
      operationId: getDiscount
      summary: Получение объекта типа Discount
      description: Получение объекта типа Discount
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - marketing_discounts
      operationId: patchDiscount
      summary: Обновления части полей объекта типа Discount
      description: Обновления части полей объекта типа Discount
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@patch
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountForPatch"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - marketing_discounts
      operationId: deleteDiscount
      summary: Удаление объекта типа Discount
      description: Удаление объекта типа Discount
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts:search:
    post:
      tags:
        - marketing_discounts
      operationId: searchDiscounts
      summary: Поиск объектов типа Discount
      description: Поиск объектов типа Discount
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDiscountsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDiscountsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts:meta:
    get:
      tags:
        - marketing_discounts
      operationId: getDiscountsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts:mass-status-update:
    post:
      tags:
        - marketing_discounts
      operationId: massDiscountsStatusUpdate
      summary: Массовое обновление статусов для объектов типа Discount
      description: Массовое обновление статусов для объектов типа Discount
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountsController@massStatusUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MassDiscountsStatusUpdateRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts/{id}/products:
    post:
      tags:
        - marketing_discounts
      operationId: patchDiscountProducts
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountRelationsController@patchProducts
      parameters:
        - $ref: "#/components/parameters/PathId"
      summary: Обновление только заданных продуктов в скидке
      description: Обновление только заданных продуктов в скидке
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDiscountProductsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - marketing_discounts
      operationId: deleteDiscountProducts
      summary: Удаление заданных продуктов в скидке
      description: Удаление заданных продуктов в скидке
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountRelationsController@deleteProducts
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDiscountProductsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discount-statuses:
    get:
      tags:
        - marketing_discounts
      operationId: getDiscountStatuses
      summary: Получение объектов типа DiscountStatus
      description: Получение объектов типа DiscountStatus
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\EnumsController@discountStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDiscountStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discount-types:
    get:
      tags:
        - marketing_discounts
      operationId: getDiscountTypes
      summary: Получение объектов типа DiscountType
      description: Получение объектов типа DiscountType
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\EnumsController@discountTypes
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDiscountTypesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discount-value-types:
    get:
      tags:
        - marketing_discounts
      operationId: getDiscountValueTypes
      summary: Получение объектов типа DiscountValueType
      description: Получение объектов типа DiscountValueType
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\EnumsController@discountValueTypes
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountValueTypesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts/discount-products/{id}:
    get:
      tags:
        - marketing_discount_products
      operationId: getDiscountProduct
      summary: Получение объекта типа DiscountProduct
      description: Получение объекта типа DiscountProduct
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountProductsController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountProductResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts/discount-products:search:
    post:
      tags:
        - marketing_discount_products
      operationId: searchDiscountProducts
      summary: Поиск объектов типа DiscountProduct
      description: Поиск объектов типа DiscountProduct
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountProductsController@search
      x-lg-skip-request-generation: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchDiscountProductsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDiscountProductsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /marketing/discounts/discount-products:meta:
    get:
      tags:
        - marketing_discount_products
      operationId: getDiscountProductsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Marketing\Controllers\DiscountProductsController@meta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /menu:
    get:
      tags:
        - menu
      operationId: getMenu
      summary: Получение меню
      description: Получение меню (разделы недоступные пользователю не передаются)
      x-lg-handler: App\Http\ApiV1\Modules\Common\Controllers\MenuController@menu
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/statuses:search:
    post:
      tags:
        - communication_statuses
      operationId: searchStatuses
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\StatusesController@search
      x-lg-skip-request-generation: true
      summary: Поиск статусов
      description: Поиск статусов
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStatusesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchStatusesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/statuses:
    post:
      tags:
        - communication_statuses
      operationId: createStatus
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\StatusesController@create
      summary: Создание статуса
      description: Создание статуса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStatusRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/statuses/{id}:
    patch:
      tags:
        - communication_statuses
      operationId: patchStatus
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\StatusesController@patch
      summary: Обновление данных статуса
      description: Обновление данных статуса
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStatusRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - communication_statuses
      operationId: deleteStatus
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\StatusesController@delete
      x-lg-skip-request-generation: true
      summary: Удаление статуса
      description: Удаление статуса
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/themes:search:
    post:
      tags:
        - communication_themes
      operationId: searchThemes
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ThemesController@search
      x-lg-skip-request-generation: true
      summary: Поиск тем
      description: Поиск тем
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchThemesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchThemesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/themes:
    post:
      tags:
        - communication_themes
      operationId: createTheme
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ThemesController@create
      summary: Создание темы
      description: Создание темы
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThemeRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThemeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/themes/{id}:
    patch:
      tags:
        - communication_themes
      operationId: patchTheme
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ThemesController@patch
      summary: Обновление данных темы
      description: Обновление данных темы
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchThemeRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThemeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - communication_themes
      operationId: deleteTheme
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ThemesController@delete
      x-lg-skip-request-generation: true
      summary: Удаление темы
      description: Удаление темы
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/types:search:
    post:
      tags:
        - communication_types
      operationId: searchTypes
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\TypesController@search
      x-lg-skip-request-generation: true
      summary: Поиск типов
      description: Поиск типов
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchTypesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTypesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/types:
    post:
      tags:
        - communication_types
      operationId: createType
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\TypesController@create
      summary: Создание типа
      description: Создание типа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTypeRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/types/{id}:
    patch:
      tags:
        - communication_types
      operationId: patchType
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\TypesController@patch
      summary: Обновление данных типа
      description: Обновление данных типа
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTypeRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - communication_types
      operationId: deleteType
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\TypesController@delete
      x-lg-skip-request-generation: true
      summary: Удаление типа
      description: Удаление типа
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/messages:search:
    post:
      tags:
        - communication_messages
      operationId: searchMessages
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\MessagesController@search
      x-lg-skip-request-generation: true
      summary: Поиск сообщений
      description: Поиск сообщений
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchMessagesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchMessagesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/broadcasts:
    post:
      tags:
        - communication
      operationId: createBroadcast
      summary: Создание рассылки
      description: Создание рассылки
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\BroadcastsController@create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBroadcastRequest"
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/attachments:
    post:
      tags:
        - communication_attachments
      operationId: createAttachment
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\AttachmentsController@create
      summary: Загрузка вложения
      description: Загрузка вложения
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultipartFileUploadRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 634
                      name:
                        type: string
                        example: logo.png
                      path:
                        type: string
                        example: attachments/08/af/LM_logo.png_YwMby5gPFwnOoKgjDkuD.png
                      disk:
                        type: string
                        example: public
                      url:
                        type: string
                        example: https://es.ensi-dev.greensight.ru/attachments/08/d3/logo.png_HaqQxnve28jgK1TB43W3.png
                    required:
                      - id
                      - name
                      - path
                      - disk
                      - url
                required:
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/attachments:mass-delete:
    post:
      tags:
        - communication_attachments
      operationId: massDeleteAttachments
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\AttachmentsController@massDelete
      x-lg-skip-request-generation: true
      summary: Массовое удаление вложений
      description: Массовое удаление вложений
      requestBody:
        $ref: "#/components/requestBodies/MassDeleteBody"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/channels:search:
    post:
      tags:
        - communication_channels
      operationId: searchChannels
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChannelsController@search
      x-lg-skip-request-generation: true
      summary: Поиск каналов
      description: Поиск каналов
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchChannelsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchChannelsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/channels:
    post:
      tags:
        - communication_channels
      operationId: createChannel
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChannelsController@create
      summary: Создание канала
      description: Создание канала
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChannelRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/channels/{id}:
    patch:
      tags:
        - communication_channels
      operationId: patchChannel
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChannelsController@patch
      summary: Обновление данных канала
      description: Обновление данных канала
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchChannelRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - communication_channels
      operationId: deleteChannel
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChannelsController@delete
      x-lg-skip-request-generation: true
      summary: Удаление канала
      description: Удаление канала
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/chats:search:
    post:
      tags:
        - communication_chats
      operationId: searchChats
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChatsController@search
      x-lg-skip-request-generation: true
      summary: Поиск чатов
      description: Поиск чатов
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchChatsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchChatsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/chats:
    post:
      tags:
        - communication_chats
      operationId: createChat
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChatsController@create
      summary: Создание чата
      description: Создание чата
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChatRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/chats/{id}:
    patch:
      tags:
        - communication_chats
      operationId: patchChat
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\ChatsController@patch
      summary: Обновление данных чата
      description: Обновление данных чата
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchChatRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notifications:search:
    post:
      tags:
        - communication_notifications
      operationId: searchNotifications
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationsController@search
      x-lg-skip-request-generation: true
      summary: Search for objects of Notification
      description: Search for objects of Notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchNotificationsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchNotificationsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notifications:meta:
    get:
      tags:
        - communication_notifications
      operationId: getNotificationsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-settings:
    post:
      tags:
        - communication_notifications
      operationId: createNotificationSetting
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@create
      summary: Создание объекта типа NotificationSetting
      description: Создание объекта типа NotificationSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNotificationSettingRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-settings/{id}:
    get:
      tags:
        - communication_notifications
      operationId: getNotificationSetting
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@get
      summary: Получение объекта типа NotificationSetting
      description: Получение объекта типа NotificationSetting
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettingResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - communication_notifications
      operationId: patchNotificationSetting
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@patch
      summary: Изменение объекта типа типа NotificationSetting
      description: Изменение объекта типа типа NotificationSetting
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchNotificationSettingRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - communication_notifications
      operationId: deleteNotificationSetting
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@delete
      x-lg-skip-request-generation: true
      summary: Удаление объекта типа NotificationSetting
      description: Удаление объекта типа NotificationSetting
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-settings:search:
    post:
      tags:
        - communication_notifications
      operationId: searchNotificationSettings
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@search
      x-lg-skip-request-generation: true
      summary: Поиск объектов типа NotificationSetting
      description: Поиск объектов типа NotificationSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchNotificationSettingsRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchNotificationSettingsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-settings:meta:
    get:
      tags:
        - communication_notifications
      operationId: getNotificationSettingsMeta
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@meta
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-setting-channels:
    get:
      tags:
        - communication_notifications
      operationId: getNotificationSettingChannels
      summary: Получение объектов типа NotificationChannel
      description: Получение объектов типа NotificationChannel
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\EnumsController@notificationSettingChannels
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNotificationSettingChannelsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-setting-events:
    get:
      tags:
        - communication_notifications
      operationId: getNotificationSettingEvents
      summary: Получение объектов типа NotificationEvent
      description: Получение объектов типа NotificationEvent
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\EnumsController@notificationSettingEvents
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNotificationSettingEventsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /communication/notification-setting-variables:
    get:
      tags:
        - communication_notifications
      operationId: getNotificationSettingVariables
      x-lg-handler: App\Http\ApiV1\Modules\Communication\Controllers\Notifications\NotificationSettingsController@settingVariables
      summary: Получение справочника доступных переменных по типу события
      description: Получение справочника доступных переменных по типу события
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariablesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/sellers:search:
    post:
      tags:
        - units_sellers
      operationId: searchSellers
      summary: Получение объектов типа Seller
      description: Получение объектов типа Seller
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Sellers\SellersController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSellersRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSellersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/sellers:meta:
    get:
      tags:
        - units_sellers
      operationId: getSellerMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Sellers\SellersController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/sellers:
    post:
      tags:
        - units_sellers
      operationId: createSeller
      summary: Создание продавца
      description: Создание продавца
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Sellers\SellersController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSellerRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/sellers/{id}:
    get:
      tags:
        - units_sellers
      operationId: getSellerDetail
      summary: Получение объекта типа Seller
      description: Получение объекта типа Seller
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Sellers\SellersController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - units_sellers
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchSeller
      summary: Частичное изменение объекта типа Seller
      description: Частичное изменение объекта типа Seller
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Sellers\SellersController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchSellerRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/sellers/seller-statuses:
    get:
      tags:
        - units_sellers
      operationId: getSellerStatuses
      summary: Получение объектов типа SellerStatus
      description: Получение объектов типа SellerStatus
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\EnumsController@sellerStatuses
      x-lg-skip-resource-generation: true
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSellerStatusesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-enum-values:search:
    post:
      tags:
        - units_sellers
      operationId: searchSellerEnumValues
      summary: Поиск продавцов для справочника
      description: Поиск продавцов для справочника
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Sellers\SellersController@searchEnumValues
      x-lg-route-name: units.searchSellerEnumValues
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores:meta:
    get:
      tags:
        - units_stores
      operationId: getStoressMeta
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoresController@meta
      x-lg-skip-request-generation: true
      x-lg-skip-resource-generation: true
      summary: Getting a list of available fields
      description: Getting a list of available fields
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores:search:
    post:
      tags:
        - units_stores
      operationId: searchStores
      summary: Получение объектов типа Store
      description: Получение объектов типа Store
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoresController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchStoresRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchStoresResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/store-enum-values:search:
    post:
      tags:
        - units_stores
      operationId: searchStoreEnumValues
      summary: Поиск магазина для справочника
      description: Поиск магазина для справочника
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoresController@searchEnumValues
      x-lg-route-name: units.searchStoreEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores:
    post:
      tags:
        - units_stores
      operationId: createStore
      summary: Создание склада продавца
      description: Создание склада продавца
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoresController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStoreRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores/{id}:
    get:
      tags:
        - units_stores
      operationId: getStore
      summary: Получение объекта типа Store
      description: Получение объекта типа Store
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoresController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - units_stores
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchStore
      summary: Частичное изменение объекта типа Store
      description: Частичное изменение объекта типа Store
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoresController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStoreRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores-workings:
    post:
      tags:
        - units_stores
      operationId: createStoreWorking
      summary: Создание времени работы склада
      description: Создание времени работы склада
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoreWorkingsController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStoreWorkingRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreWorkingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores-workings/{id}:
    patch:
      tags:
        - units_stores
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchStoreWorking
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoreWorkingsController@patch
      summary: Частичное изменение объекта типа StoreWorking
      description: Частичное изменение объекта типа StoreWorking
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStoreWorkingRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreWorkingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - units_stores
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: deleteStoreWorking
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoreWorkingsController@delete
      x-lg-skip-request-generation: true
      summary: Удалить запись о времени работы склада
      description: Удаление объекта типа StoreWorking
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores-pickup-times:
    post:
      tags:
        - units_stores
      operationId: createStorePickupTime
      summary: Создание времени отгрузки со склада
      description: Создание времени отгрузки со склада
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StorePickupTimesController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStorePickupTimeRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorePickupTimeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores-pickup-times/{id}:
    patch:
      tags:
        - units_stores
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchStorePickupTime
      summary: Частичное изменение объекта типа StorePickupTime
      description: Частичное изменение объекта типа StorePickupTime
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StorePickupTimesController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStorePickupTimeRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorePickupTimeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - units_stores
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: deleteStorePickupTime
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StorePickupTimesController@delete
      x-lg-skip-request-generation: true
      summary: Удалить запись о времени отгрузки со склада
      description: Удаление объекта типа StorePickupTime
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores-contacts:
    post:
      tags:
        - units_stores
      operationId: createStoreContact
      summary: Создание контактного лица склада
      description: Создание контактного лица склада
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoreContactsController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStoreContactRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreContactResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/stores-contacts/{id}:
    patch:
      tags:
        - units_stores
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchStoreContact
      summary: Частичное изменение объекта типа StoreContact
      description: Частичное изменение объекта типа StoreContact
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoreContactsController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStoreContactRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreContactResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - units_stores
      operationId: deleteStoreContact
      summary: Удаление объекта типа StoreContact
      description: Удаление объекта типа StoreContact
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\Stores\StoreContactsController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-users:search:
    post:
      tags:
        - units_seller_users
      operationId: searchSellerUsers
      summary: Получение объектов типа SellerUser
      description: Получение объектов типа SellerUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSellerUsersRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSellerUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-users:meta:
    get:
      tags:
        - units_seller_users
      operationId: getSellerUsersMeta
      summary: Получение списка доступных полей
      description: Получение списка доступных полей
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-users:
    post:
      tags:
        - units_seller_users
      operationId: createSellerUser
      summary: Создание пользователя продавца
      description: Создание пользователя продавца
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSellerUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-users/{id}:
    get:
      tags:
        - units_seller_users
      operationId: getSellerUser
      summary: Получение объекта типа SellerUser
      description: Получение объекта типа SellerUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - units_seller_users
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchSellerUser
      summary: Частичное изменение объекта типа SellerUser
      description: Частичное изменение объекта типа SellerUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchSellerUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SellerUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-users/{id}:add-roles:
    post:
      tags:
        - units_seller_users
      operationId: addRolesToSellerUser
      summary: Добавление ролей объекту типа SellerUser
      description: Добавление ролей объекту типа SellerUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@addRoles
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRolesToSellerUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-users/{id}:delete-role:
    post:
      tags:
        - units_seller_users
      operationId: deleteRoleFromSellerUser
      summary: Удаление роли у объекта типа SellerUser
      description: Удаление роли у объекта типа SellerUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUsersController@deleteRole
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRoleFromSellerUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/seller-user-roles:search:
    post:
      tags:
        - units_seller_users
      operationId: searchRole
      summary: Получение объектов типа SellerUserRole
      description: Получение объектов типа SellerUserRole
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\SellerUsers\SellerUserRolesController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSellerUserRolesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSellerUserRolesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users:meta:
    get:
      tags:
        - units_admin_users
      operationId: getAdminUsersMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users:search:
    post:
      tags:
        - units_admin_users
      operationId: searchAdminUsers
      summary: Получение объектов типа AdminUser
      description: Получение объектов типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAdminUsersRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchAdminUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-user-enum-values:search:
    post:
      tags:
        - units_admin_users
      operationId: searchAdminUserEnumValues
      summary: Поиск пользователей для справочника
      description: Поиск пользователей для справочника
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@searchEnumValues
      x-lg-route-name: units.searchAdminUserEnumValues
      x-lg-skip-request-generation: true
      requestBody:
        $ref: "#/components/requestBodies/SearchEnumValuesRequest"
      responses:
        "200":
          $ref: "#/components/responses/SearchEnumValuesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users:
    post:
      tags:
        - units_admin_users
      operationId: createAdminUser
      summary: Создание объекта типа AdminUser
      description: Создание объекта типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdminUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/{id}:
    get:
      tags:
        - units_admin_users
      operationId: getAdminUser
      summary: Получение объекта типа AdminUser
      description: Получение объекта типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - units_admin_users
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchAdminUser
      summary: Частичное изменение объекта типа AdminUser
      description: Частичное изменение объекта типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchAdminUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/{id}:add-roles:
    post:
      tags:
        - units_admin_users
      operationId: addRolesToAdminUser
      summary: Добавление ролей объекту типа AdminUser
      description: Добавление ролей объекту типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@addRoles
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRolesToAdminUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/{id}:delete-role:
    post:
      tags:
        - units_admin_users
      operationId: deleteRoleFromAdminUser
      summary: Удаление роли у объекта типа AdminUser
      description: Удаление роли у объекта типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@deleteRole
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRoleFromAdminUserRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/{id}:refresh-password-token:
    post:
      tags:
        - units_admin_users
      operationId: refreshPasswordToken
      summary: Обновление токена для установки пароля
      description: Обновить токен для установки пароля
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@refreshPasswordToken
      x-lg-skip-request-generation: true
      parameters:
        - schema:
            type: string
          name: id
          in: path
          required: true
          description: ID пользователя
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmptyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/mass/change-active:
    post:
      tags:
        - units_admin_users
      operationId: massChangeActive
      summary: Массовая активация/деактивация пользователей
      description: Массовая активация/деактивация пользователей
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@massChangeActive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MassChangeActiveRequest"
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmptyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/set-password:
    post:
      tags:
        - units_admin_users
      operationId: setAdminUserPassword
      summary: Установка пароля пользователем
      description: Установка пароля пользователем
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUsersController@setPassword
      x-lg-without-middleware: auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Токен из ссылки по которой перешел пользователь
                  example: 894ef36797a01973110b8a28a81f7682
                password:
                  type: string
                  description: Новый пароль пользователя
                  example: testPassword775105k#i*
              required:
                - token
                - password
      responses:
        "200":
          $ref: "#/components/responses/SuccessEmptyResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-users/right-access:
    get:
      tags:
        - units_admin_users
      operationId: getAdminUserRightsAccess
      summary: Получение справочника прав доступа
      description: Получение справочника прав доступа
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@getRightsAccess
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RightsAccessResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-user-roles:
    post:
      tags:
        - units_admin_users
      operationId: createAdminUserRole
      summary: Создание объекта типа AdminUserRole
      description: Создание объекта типа AdminUserRole
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdminUserRoleRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserRoleResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-user-roles/{id}:
    get:
      tags:
        - units_admin_users
      operationId: getAdminUserRole
      summary: Получение объекта типа AdminUserRole
      description: Получение объекта типа AdminUserRole
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@get
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/QueryInclude"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserRoleResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - units_admin_users
      parameters:
        - $ref: "#/components/parameters/PathId"
      operationId: patchAdminUserRole
      summary: Частичное изменение объекта типа AdminUser
      description: Частичное изменение объекта типа AdminUser
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchAdminUserRoleRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserRoleResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - units_admin_users
      operationId: deleteAdminUserRole
      summary: Удаление объекта типа AdminUserRole
      description: Удаление объекта типа AdminUserRole
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@delete
      x-lg-skip-request-generation: true
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyDataResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-user-roles:search:
    post:
      tags:
        - units_admin_users
      operationId: searchAdminUserRoles
      summary: Получение объектов типа AdminUserRole
      description: Получение объектов типа AdminUserRole
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@search
      x-lg-skip-request-generation: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAdminUserRolesRequest"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchAdminUserRolesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
  /units/admin-user-roles:meta:
    get:
      tags:
        - units_admin_users
      operationId: getAdminUserRolesMeta
      summary: Getting a list of available fields
      description: Getting a list of available fields
      x-lg-handler: App\Http\ApiV1\Modules\Units\Controllers\AdminUsers\AdminUserRolesController@meta
      x-lg-skip-resource-generation: true
      responses:
        "200":
          $ref: "#/components/responses/GetResourceMetaResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/ServerError"
components:
  parameters:
    QueryInclude:
      in: query
      name: include
      required: false
      description: Related entities to be loaded, separated by commas
      schema:
        type: string
    PathId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        minimum: 1
      description: Числовой id
      example: 1
    Property:
      in: path
      name: property
      required: true
      schema:
        type: string
      example: name
  schemas:
    PaginationTypeEnum:
      $ref: ./common_schemas.yaml#/PaginationTypeEnum
    PaginationTypeCursorEnum:
      type: string
      description: |
        * Pagination types:
        * `cursor`
      enum:
        - cursor
      x-enum-varnames:
        - CURSOR
    PaginationTypeOffsetEnum:
      type: string
      description: |
        * Pagination types:
        * `offset`
      enum:
        - offset
      x-enum-varnames:
        - OFFSET
    CommunicationChatDirectionEnum:
      type: integer
      description: |
        Направление чата. Расшифровка значений:
          * `1` - От админа к пользователю
          * `2` - От пользователя к админу
      enum:
        - 1
        - 2
      x-enum-varnames:
        - FROM_ADMIN_TO_USER
        - FROM_USER_TO_ADMIN
      x-enum-descriptions:
        - От админа к пользователю
        - От пользователя к админу
    CommunicationUserTypeEnum:
      type: integer
      description: |
        Тип пользователя. Расшифровка значений:
          * `1` - Сотрудник
          * `2` - Продавец
          * `3` - Покупатель
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - ADMIN
        - SELLER
        - CUSTOMER
      x-enum-descriptions:
        - Сотрудник
        - Продавец
        - Покупатель
    CmsBannerButtonLocationEnum:
      type: string
      description: |
        Расположение кнопки:
          * `top_left` - Сверху слева
          * `top` - Сверху
          * `top_right` - Сверху справа
          * `right` - Справа
          * `bottom_right` - Снизу справа
          * `bottom` - Снизу
          * `bottom_left` - Снизу слева
          * `left` - Слева
      enum:
        - top_left
        - top
        - top_right
        - right
        - bottom_right
        - bottom
        - bottom_left
        - left
      x-enum-varnames:
        - LOCATION_TOP_LEFT
        - LOCATION_TOP
        - LOCATION_TOP_RIGHT
        - LOCATION_RIGHT
        - LOCATION_BOTTOM_RIGHT
        - LOCATION_BOTTOM
        - LOCATION_BOTTOM_LEFT
        - LOCATION_LEFT
      x-enum-descriptions:
        - Сверху слева
        - Сверху
        - Сверху справа
        - Справа
        - Снизу справа
        - Снизу
        - Снизу слева
        - Слева
    CmsBannerButtonTypeEnum:
      type: string
      description: |
        Тип кнопки:
          * `outline_black` - С чёрной обводкой
          * `outline_white` - С белой обводкой
          * `black` - Чёрная
          * `white` - Белая
      enum:
        - outline_black
        - outline_white
        - black
        - white
      x-enum-varnames:
        - TYPE_OUTLINE_BLACK
        - TYPE_OUTLINE_WHITE
        - TYPE_BLACK
        - TYPE_WHITE
      x-enum-descriptions:
        - С чёрной обводкой
        - С белой обводкой
        - Чёрная
        - Белая
    CmsBannerImageTypeEnum:
      type: string
      description: |
        Тип изображения баннера:
          * `desktop` - Десктоп
          * `mobile` - Мобильный
      enum:
        - desktop
        - mobile
      x-enum-varnames:
        - DESKTOP_IMAGE_TYPE
        - MOBILE_IMAGE_TYPE
      x-enum-descriptions:
        - Десктоп
        - Мобильный
    CmsBannerTypeEnum:
      type: string
      description: |
        Banner type:
          * `main` - Main banner
      enum:
        - main
      x-enum-varnames:
        - MAIN_CODE
      x-enum-descriptions:
        - Главный баннер
    CmsMenuEnum:
      type: string
      description: |
        Экземпляр меню:
          * `header_main` - Основное меню в хедере
          * `header_help` - Вспомогательное меню в хедере
          * `footer_main` - Основное меню в футере
      enum:
        - header_main
        - header_help
        - footer_main
      x-enum-varnames:
        - HEADER_MAIN_MENU_CODE
        - HEADER_HELP_MENU_CODE
        - FOOTER_MAIN_MENU_CODE
      x-enum-descriptions:
        - Основное меню в хедере
        - Вспомогательное меню в хедере
        - Основное меню в футере
    CmsSeoVariableEnum:
      $ref: ./cms/seo/enums/cms_seo_variable_enum.yaml
    CmsSeoTemplateTypeEnum:
      type: integer
      description: |
        Доступные типы шаблонов:
          * `1` - шаблон на конкретный товар
          * `2` - общий шаблон на товар
      enum:
        - 1
        - 2
      x-enum-varnames:
        - PRODUCT
        - PRODUCT_DEFAULT
      x-enum-descriptions:
        - На конкретный товар
        - Общий на товар
    OrdersOrderStatusEnum:
      $ref: ./orders/enums/orders_order_status_enum.yaml
    OrdersOrderSourceEnum:
      $ref: ./orders/enums/orders_order_source_enum.yaml
    OrdersPaymentMethodEnum:
      $ref: ./orders/enums/orders_payment_method_enum.yaml
    OrdersPaymentStatusEnum:
      $ref: ./orders/enums/orders_payment_status_enum.yaml
    OrdersDeliveryStatusEnum:
      $ref: ./orders/enums/orders_delivery_status_enum.yaml
    OrdersShipmentStatusEnum:
      $ref: ./orders/enums/orders_shipment_status_enum.yaml
    OrdersSettingCodeEnum:
      $ref: ./orders/enums/orders_setting_code_enum.yaml
    OrdersRefundStatusEnum:
      $ref: ./orders/enums/orders_refund_status_enum.yaml
    MarketingDiscountStatusEnum:
      $ref: ./marketing/enums/marketing_discount_status_enum.yaml
    MarketingDiscountTypeEnum:
      $ref: ./marketing/enums/marketing_discount_type_enum.yaml
    MarketingDiscountValueTypeEnum:
      $ref: ./marketing/enums/marketing_discount_value_type_enum.yaml
    MarketingPromoCodeStatusEnum:
      $ref: ./marketing/enums/marketing_promo_code_status_enum.yaml
    CatalogProductArchiveTypeEnum:
      $ref: ./catalog/enums/catalog_product_archive_type_enum.yaml
    CatalogProductImageTypeEnum:
      $ref: ./catalog/enums/catalog_product_image_type_enum.yaml
    CatalogPropertyTypeEnum:
      $ref: ./catalog/enums/catalog_property_type_enum.yaml
    CatalogFieldSettingsMaskEnum:
      $ref: ./catalog/enums/catalog_field_settings_mask_enum.yaml
    CatalogProductTypeEnum:
      type: integer
      description: |
        Доступные типы товаров:
        * 1 - штучный
        * 2 - весовой
        * 3 - фасованный
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - PIECE
        - WEIGHT
        - PACKED
      x-enum-descriptions:
        - Штучный
        - Весовой
        - Фасованный
      example: 1
    CatalogProductUomEnum:
      $ref: ./catalog/enums/catalog_product_uom_enum.yaml
    CatalogProductTariffingVolumeEnum:
      type: integer
      description: |
        Доступные тарификации:
        * 1 - цена за 1 кг
        * 2 - цена за 100 грамм
      enum:
        - 1
        - 2
      x-enum-varnames:
        - PRICE_PER_KILOGRAM
        - PRICE_PER_ONE_HUNDRED_GRAMS
      x-enum-descriptions:
        - Цена за 1 кг
        - Цена за 100 грамм
      example: 1
    CatalogProductImportStatusEnum:
      type: integer
      example: 1
      description: |
        Тип импорта:
         * 1 - Создан, ожидает обработки
         * 2 - Обрабатывается
         * 3 - Успешно завершён
         * 4 - Завершён с ошибкой
      enum:
        - 1
        - 2
        - 3
        - 4
      x-enum-varnames:
        - NEW
        - IN_PROCESS
        - DONE
        - FAILED
      x-enum-descriptions:
        - Создан, ожидает обработки
        - Обрабатывается
        - Успешно завершён
        - Завершён с ошибкой
    CatalogProductImportTypeEnum:
      type: integer
      example: 1
      description: |
        Тип импорта:
         * 1 - Свойства товара
      enum:
        - 1
      x-enum-varnames:
        - PRODUCT
      x-enum-descriptions:
        - Свойства товара
    CatalogBulkOperationActionEnum:
      type: string
      description: |
        Действие массовой операции:
         * `patch` - Изменение атрибутов
      enum:
        - patch
      x-enum-varnames:
        - PATCH
      x-enum-descriptions:
        - Изменение атрибутов
      example: patch
    CatalogBulkOperationEntityEnum:
      type: string
      description: |
        Сущность, над которой производится массовая операция:
         * `product` - Товар
      enum:
        - product
      x-enum-varnames:
        - PRODUCT
      x-enum-descriptions:
        - Товар
      example: product
    CatalogBulkOperationStatusEnum:
      type: integer
      description: |
        Статус массовой операции:
        * 1 - Новая
        * 2 - В процессе
        * 3 - Завершена
        * 4 - Ошибка
      enum:
        - 1
        - 2
        - 3
        - 4
      x-enum-varnames:
        - NEW
        - IN_PROGRESS
        - COMPLETED
        - ERROR
      x-enum-descriptions:
        - Новая
        - В процессе
        - Завершена
        - Ошибка
      example: 1
    CatalogEventOperationEnum:
      $ref: ./catalog/enums/catalog_event_operation_enum.yaml
    CatalogProductEventEnum:
      $ref: ./catalog/enums/catalog_product_event_enum.yaml
    CatalogProductStatusTypeEnum:
      $ref: ./catalog/enums/catalog_product_status_type_enum.yaml
    CatalogFeedPlatformEnum:
      $ref: ./catalog/enums/catalog_feed_platform_enum.yaml
    CatalogFeedTypeEnum:
      $ref: ./catalog/enums/catalog_feed_type_enum.yaml
    CommunicationNotificationChannelEnum:
      $ref: ./communication/enums/communication_notification_channel_enum.yaml
    CommunicationNotificationEventEnum:
      $ref: ./communication/enums/communication_notification_event_enum.yaml
    CommunicationVariableEnum:
      $ref: ./communication/enums/communication_notification_variable_enum.yaml
    ReviewStatusEnum:
      $ref: ./catalog/enums/review_status_enum.yaml
    CustomersCustomerStatusEnum:
      $ref: ./customers/enums/customers_customer_status_enum.yaml
    CustomersCustomerGenderEnum:
      $ref: ./customers/enums/customers_customer_gender_enum.yaml
    MenuItemCodeEnum:
      type: string
      description: >
        Коды пунктов меню:
          * `products` - Раздел "Товары"
          * `products_catalog` - Подраздел "Товары->Каталог товаров"
          * `products_imports` - Подраздел "Товары->Импорт товаров"
          * `products_categories` - Подраздел "Товары->Категории товаров"
          * `products_attributes` - Подраздел "Товары->Атрибуты"
          * `products_brands` - Подраздел "Товары->Бренды"
          * `products_product_groups` - Подраздел "Товары->Товарные склейки"
          * `products_statuses` - Подраздел "Товары->Статусная модель"
          * `products_entities` - Подраздел "Товары->Pim сущности"
          * `products_entities_failed_jobs` - Подраздел "Товары->Pim сущности->Failed Jobs"
          * `products_entities_temp_files` - Подраздел "Товары->Pim сущности->Temp Files"
          * `products_entities_product_events` - Подраздел "Товары->Pim сущности->Product Events"
          * `products_entities_actual_category_properties` - Подраздел "Товары->Pim сущности->Actual Category Properties"
          * `products_entities_actualize_categories` - Подраздел "Товары->Pim сущности->Actualize Categories"
          * `catalog_cache_entities` - Подраздел "Товары->Catalog Cache сущности"
          * `catalog_cache_entities_failed_jobs` - Подраздел "Товары->Catalog Cache сущности->Failed Jobs"
          * `catalog_cache_entities_indexer_timestamps` - Подраздел "Товары->Catalog Cache сущности->Indexer Timestamps"
          * `catalog_cache_entities_property_directory_values` - Подраздел "Товары->Catalog Cache сущности->Property Directory Values"
          * `catalog_cache_entities_properties` - Подраздел "Товары->Catalog Cache сущности->Properties"
          * `catalog_cache_entities_products` - Подраздел "Товары->Catalog Cache сущности->Products"
          * `catalog_cache_entities_images` - Подраздел "Товары->Catalog Cache сущности->Images"
          * `catalog_cache_entities_product_property_values` - Подраздел "Товары->Catalog Cache сущности->Product Property Values"
          * `catalog_cache_entities_product_group_products` - Подраздел "Товары->Catalog Cache сущности->Product Group Products"
          * `catalog_cache_entities_product_groups` - Подраздел "Товары->Catalog Cache сущности->Product Groups"
          * `catalog_cache_entities_offers` - Подраздел "Товары->Catalog Cache сущности->Offers"
          * `catalog_cache_entities_discounts` - Подраздел "Товары->Catalog Cache сущности->Discounts"
          * `catalog_cache_entities_nameplates` - Подраздел "Товары->Catalog Cache сущности->Nameplates"
          * `catalog_cache_entities_nameplates_products` - Подраздел "Товары->Catalog Cache сущности->Nameplates Products"
          * `catalog_cache_entities_actual_category_properties` - Подраздел "Товары->Catalog Cache сущности->Actual Category Properties"
          * `catalog_cache_entities_categories` - Подраздел "Товары->Catalog Cache сущности->Categories"
          * `catalog_cache_entities_brands` - Подраздел "Товары->Catalog Cache сущности->Brands"
          * `baskets_entities` - Подраздел "Товары->Baskets сущности"
          * `baskets_entities_baskets` - Подраздел "Товары->Baskets сущности->Baskets"
          * `baskets_entities_basket_items` - Подраздел "Товары->Baskets сущности->Basket Items"
          * `orders` - Раздел "Заказы"
          * `orders_orders` - Подраздел "Заказы->Список заказов"
          * `orders_refunds` - Подраздел "Заказы->Возвраты"
          * `orders_settings` - Подраздел "Заказы->Настройки"
          * `feeds` - Раздел "Фиды"
          * `content` - Раздел "Контент"
          * `content_banners` - Подраздел "Контент->Баннеры"
          * `content_nameplates` - Подраздел "Контент->Товарные теги"
          * `content_pages` - Подраздел "Контент->Страницы"
          * `content_seo_templates` - Подраздел "Контент->SEO-шаблоны"
          * `content_technical_tables` - Подраздел "Контент->Технические таблицы"
          * `content_technical_tables_banner_types` - Подраздел "Контент->Технические таблицы->Типы банеров"
          * `logistic` - Раздел "Логистика"
          * `logistic_pickup_points` - Подраздел "Логистика->Точки самовывоза"
          * `logistic_delivery_prices` - Подраздел "Логистика->Стоимость доставки по регионам"
          * `logistic_delivery_options_settings` - Подраздел "Логистика->Параметры доставки"
          * `customers` - Раздел "Клиенты"
          * `customers_customers` - Подраздел "Клиенты->Список клиентов"
          * `customers_customers_auth` - Подраздел "Клиенты->Customers Auth Сущности"
          * `customers_customers_auth_confirmation_codes` - Подраздел "Клиенты->Customers Auth Сущности->Коды подтверждения"
          * `sellers` - Раздел "Продавцы"
          * `sellers_sellers` - Подраздел "Продавцы->Список продавцов"
          * `sellers_stores` - Подраздел "Продавцы->Склады"
          * `marketing` - Раздел "Маркетинг"
          * `marketing_promo_codes` - Подраздел "Маркетинг->Промокоды"
          * `marketing_discounts` - Подраздел "Маркетинг->Скидки"
          * `communications` - Раздел "Коммуникации"
          * `communications_notifications` - Подраздел "Коммуникации->Сервисные уведомления"
          * `communications_entities` - Подраздел "Коммуникации->Communications сущности"
          * `communications_entities_notifications` - Подраздел "Коммуникации->Communications сущности->Notifications"
          * `reviews` - Раздел "Отзывы"
          * `reviews_reviews` - Подраздел "Отзывы->Список отзывов"
          * `settings` - Раздел "Настройки"
          * `settings_users` - Подраздел "Настройки->Пользователи"
          * `settings_users_roles` - Подраздел "Настройки->Роли пользователей"
          * `settings_cloud_integration` - Подраздел "Настройки->Параметры поиска"
          * `offers` - Раздел "Офферы"
          * `offers_entities` - Подраздел "Товары->Offers сущности"
          * `offers_entities_failed_jobs` - Подраздел "Товары->Offers сущности->Failed Jobs"
      enum:
        - products
        - products_catalog
        - products_imports
        - products_categories
        - products_attributes
        - products_brands
        - products_product_groups
        - products_statuses
        - products_entities
        - products_entities_failed_jobs
        - products_entities_temp_files
        - products_entities_product_events
        - products_entities_actual_category_properties
        - products_entities_actualize_categories
        - catalog_cache_entities
        - catalog_cache_entities_failed_jobs
        - catalog_cache_entities_indexer_timestamps
        - catalog_cache_entities_property_directory_values
        - catalog_cache_entities_properties
        - catalog_cache_entities_products
        - catalog_cache_entities_images
        - catalog_cache_entities_product_property_values
        - catalog_cache_entities_product_group_products
        - catalog_cache_entities_product_groups
        - catalog_cache_entities_offers
        - catalog_cache_entities_discounts
        - catalog_cache_entities_nameplates
        - catalog_cache_entities_nameplates_products
        - catalog_cache_entities_actual_category_properties
        - catalog_cache_entities_categories
        - catalog_cache_entities_brands
        - baskets_entities
        - baskets_entities_baskets
        - baskets_entities_basket_items
        - orders
        - orders_orders
        - orders_refunds
        - orders_settings
        - feeds
        - content
        - content_banners
        - content_nameplates
        - content_pages
        - content_seo_templates
        - content_technical_tables
        - content_technical_tables_banner_types
        - logistic
        - logistic_pickup_points
        - logistic_delivery_prices
        - logistic_delivery_options_settings
        - customers
        - customers_customers
        - customers_customers_auth
        - customers_customers_auth_confirmation_codes
        - sellers
        - sellers_sellers
        - sellers_stores
        - marketing
        - marketing_promo_codes
        - marketing_discounts
        - communications
        - communications_notifications
        - communications_entities
        - communications_entities_notifications
        - reviews
        - reviews_reviews
        - settings
        - settings_users
        - settings_users_roles
        - settings_cloud_integration
        - offers
        - offers_entities
        - offers_entities_failed_jobs
      x-enum-varnames:
        - PRODUCTS
        - PRODUCTS_CATALOG
        - PRODUCTS_IMPORTS
        - PRODUCTS_CATEGORIES
        - PRODUCTS_ATTRIBUTES
        - PRODUCTS_BRANDS
        - PRODUCTS_PRODUCT_GROUPS
        - PRODUCTS_STATUSES
        - PRODUCTS_ENTITIES
        - PRODUCTS_ENTITIES_FAILED_JOBS
        - PRODUCTS_ENTITIES_TEMP_FILES
        - PRODUCTS_ENTITIES_PRODUCT_EVENTS
        - PRODUCTS_ENTITIES_ACTUAL_CATEGORY_PROPERTIES
        - PRODUCTS_ENTITIES_ACTUALIZE_CATEGORIES
        - CATALOG_CACHE_ENTITIES
        - CATALOG_CACHE_ENTITIES_FAILED_JOBS
        - CATALOG_CACHE_ENTITIES_INDEXER_TIMESTAMPS
        - CATALOG_CACHE_ENTITIES_PROPERTY_DIRECTORY_VALUES
        - CATALOG_CACHE_ENTITIES_PROPERTIES
        - CATALOG_CACHE_ENTITIES_PRODUCTS
        - CATALOG_CACHE_ENTITIES_IMAGES
        - CATALOG_CACHE_ENTITIES_PRODUCT_PROPERTY_VALUES
        - CATALOG_CACHE_ENTITIES_PRODUCT_GROUP_PRODUCTS
        - CATALOG_CACHE_ENTITIES_PRODUCT_GROUPS
        - CATALOG_CACHE_ENTITIES_OFFERS
        - CATALOG_CACHE_ENTITIES_DISCOUNTS
        - CATALOG_CACHE_ENTITIES_NAMEPLATES
        - CATALOG_CACHE_ENTITIES_NAMEPLATES_PRODUCTS
        - CATALOG_CACHE_ENTITIES_ACTUAL_CATEGORY_PROPERTIES
        - CATALOG_CACHE_ENTITIES_CATEGORIES
        - CATALOG_CACHE_ENTITIES_BRANDS
        - BASKETS_ENTITIES
        - BASKETS_ENTITIES_BASKETS
        - BASKETS_ENTITIES_BASKET_ITEMS
        - ORDERS
        - ORDERS_ORDERS
        - ORDERS_REFUNDS
        - ORDERS_SETTINGS
        - FEEDS
        - CONTENT
        - CONTENT_BANNERS
        - CONTENT_NAMEPLATES
        - CONTENT_PAGES
        - CONTENT_SEO_TEMPLATES
        - CONTENT_TECHNICAL_TABLES
        - CONTENT_TECHNICAL_TABLES_BANNER_TYPES
        - LOGISTIC
        - LOGISTIC_PICKUP_POINTS
        - LOGISTIC_DELIVERY_PRICES
        - LOGISTIC_DELIVERY_OPTIONS_SETTINGS
        - CUSTOMERS
        - CUSTOMERS_CUSTOMERS
        - CUSTOMERS_CUSTOMERS_AUTH
        - CUSTOMERS_CUSTOMERS_AUTH_CONFIRMATION_CODES
        - SELLERS
        - SELLERS_SELLERS
        - SELLERS_STORES
        - MARKETING
        - MARKETING_PROMO_CODES
        - MARKETING_DISCOUNTS
        - COMMUNICATIONS
        - COMMUNICATIONS_NOTIFICATIONS
        - COMMUNICATIONS_ENTITIES
        - COMMUNICATIONS_ENTITIES_NOTIFICATIONS
        - REVIEWS
        - REVIEWS_REVIEWS
        - SETTINGS
        - SETTINGS_USERS
        - SETTINGS_USERS_ROLES
        - SETTINGS_CLOUD_INTEGRATION
        - OFFERS
        - OFFERS_ENTITIES
        - OFFERS_ENTITIES_FAILED_JOBS
      x-enum-descriptions:
        - Раздел "Товары"
        - Подраздел "Товары->Каталог товаров"
        - Подраздел "Товары->Импорт товаров"
        - Подраздел "Товары->Категории товаров"
        - Подраздел "Товары->Атрибуты"
        - Подраздел "Товары->Бренды"
        - Подраздел "Товары->Товарные склейки"
        - Подраздел "Товары->Статусная модель"
        - Подраздел "Товары->Pim сущности"
        - Подраздел "Товары->Pim сущности->Failed Jobs"
        - Подраздел "Товары->Pim сущности->Temp Files"
        - Подраздел "Товары->Pim сущности->Product Events"
        - Подраздел "Товары->Pim сущности->Actual Category Properties"
        - Подраздел "Товары->Pim сущности->Actualize Categories"
        - Подраздел "Товары->Catalog Cache сущности"
        - Подраздел "Товары->Catalog Cache сущности->Failed Jobs"
        - Подраздел "Товары->Catalog Cache сущности->Indexer Timestamps"
        - Подраздел "Товары->Catalog Cache сущности->Property Directory Values"
        - Подраздел "Товары->Catalog Cache сущности->Properties"
        - Подраздел "Товары->Catalog Cache сущности->Products"
        - Подраздел "Товары->Catalog Cache сущности->Images"
        - Подраздел "Товары->Catalog Cache сущности->Product Property Values"
        - Подраздел "Товары->Catalog Cache сущности->Product Group Products"
        - Подраздел "Товары->Catalog Cache сущности->Product Groups"
        - Подраздел "Товары->Catalog Cache сущности->Offers"
        - Подраздел "Товары->Catalog Cache сущности->Discounts"
        - Подраздел "Товары->Catalog Cache сущности->Nameplates"
        - Подраздел "Товары->Catalog Cache сущности->Nameplates Products"
        - Подраздел "Товары->Catalog Cache сущности->Actual Category Properties"
        - Подраздел "Товары->Catalog Cache сущности->Categories"
        - Подраздел "Товары->Catalog Cache сущности->Brands"
        - Подраздел "Товары->Baskets сущности"
        - Подраздел "Товары->Baskets сущности->Baskets"
        - Подраздел "Товары->Baskets сущности->Basket Items"
        - Раздел "Заказы"
        - Подраздел "Заказы->Список заказов"
        - Подраздел "Заказы->Возвраты"
        - Подраздел "Заказы->Настройки"
        - Раздел "Фиды"
        - Раздел "Контент"
        - Подраздел "Контент->Баннеры"
        - Подраздел "Контент->Товарные теги"
        - Подраздел "Контент->Страницы"
        - Подраздел "Контент->SEO-шаблоны"
        - Подраздел "Контент->Технические таблицы"
        - Подраздел "Контент->Технические таблицы->Типы банеров"
        - Раздел "Логистика"
        - Подраздел "Логистика->Точки самовывоза"
        - Подраздел "Логистика->Стоимость доставки по регионам"
        - Подраздел "Логистика->Параметры доставки"
        - Раздел "Клиенты"
        - Подраздел "Клиенты->Список клиентов"
        - Подраздел "Клиенты->Customers Auth Сущности"
        - Подраздел "Клиенты->Customers Auth Сущности->Коды подтверждения"
        - Раздел "Продавцы"
        - Подраздел "Продавцы->Список продавцов"
        - Подраздел "Продавцы->Склады"
        - Раздел "Маркетинг"
        - Подраздел "Маркетинг->Промокоды"
        - Подраздел "Маркетинг->Скидки"
        - Раздел "Коммуникации"
        - Подраздел "Коммуникации->Сервисные уведомления"
        - Подраздел "Коммуникации->Communications сущности"
        - Подраздел "Коммуникации->Communications сущности->Notifications"
        - Раздел "Отзывы"
        - Подраздел "Отзывы->Список отзывов"
        - Раздел "Настройки"
        - Подраздел "Настройки->Пользователи"
        - Подраздел "Настройки->Роли пользователей"
        - Подраздел "Настройки->Параметры поиска"
        - Раздел "Офферы"
        - Подраздел "Товары->Offers сущности"
        - Подраздел "Товары->Offers сущности->Failed Jobs"
    UnitsSellerStatusEnum:
      type: integer
      description: |
        Доступные статусы продавцов:
          * `1` - Ожидает подтверждения
          * `2` - Активен
          * `3` - Не активен
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - CREATE
        - ACTIVE
        - NOT_ACTIVE
      x-enum-descriptions:
        - Ожидает подтверждения
        - Активен
        - Не активен
      example: 1
    UnitsSellerUserRoleEnum:
      $ref: ./units/enums/units_seller_user_role_enum.yaml
    UnitsAdminUserRoleEnum:
      $ref: ./units/enums/units_admin_user_role_enum.yaml
    UnitsAdminUserRoleRightsAccessEnum:
      type: integer
      description: >
        Права доступа. Расшифровка значений.
          * `1xx` Для списка заказов:
          * `101` - Пользователю доступен табличный список с фильтрами и поиском
          * `102` - Пользователю доступна детальная страница заказа со всеми вкладками и данными для просмотра
          * `103` - Пользователю доступна вкладка "Главное" для просмотра
          * `104` - Пользователю доступна вкладка "Клиент" для просмотра
          * `105` - Пользователю доступна вкладка "Товары" для просмотра
          * `106` - Пользователю доступна вкладка "Доставка" для просмотра
          * `107` - Пользователю доступна вкладка "Комментарии" для просмотра
          * `108` - Пользователю доступна вкладка "Вложения" для просмотра
          * `109` - Пользователю доступно только редактирование данных заказа (без действий)
          * `110` - Пользователю доступна функция редактирование комментариев во вкладке "Комментарии" + кнопки "Сохранить"/"Отменить"
          * `111` - Пользователю доступна функция добавления/удаления проблемы к заказу и комментария  к проблеме во вкладке "Комментариии" + кнопки "Сохранить"/"Отменить"
          * `112` - Пользователю доступна функция редактирования способа доставки во вкладке "Доставка" + кнопки "Сохранить"/"Отменить"
          * `113` - Пользователю доступна функция редактирования комментария во вкладке "Доставка" + кнопки "Сохранить"/"Отменить"
          * `114` - Пользователю доступна функция редактирования полей клиента во вкладке "Клиент" + кнопки "Сохранить"/"Отменить"
          * `115` - Пользователю доступна функция загрузка вложений во вкладке "Вложения" + кнопки "Сохранить"/"Отменить"
          * `116` - Пользователю доступна функция удаления вложений во вкладке "Вложения" + кнопки "Сохранить"/"Отменить"
          * `117` - Пользователю доступно изменение статуса заказа на детальной странице + кнопка "Действия"
          * `118` - Пользователю доступно создание заявки на возврат + кнопка "Действия"
          * `119` - Пользователю доступно редактирование списка товаров в заказе
          * `120` - Пользователю доступно изменение статуса отгрузки на детальной странице заказ
          * `2xx` Для возвратов:
          * `201` - Пользователю доступен табличный список с фильтрами и поиском
          * `202` - Пользователю доступна детальная страница возврата
          * `203` - Пользователю доступна вкладка "Главное" для просмотра
          * `204` - Пользователю доступна вкладка "Товары" для просмотра
          * `205` - Пользователю доступна вкладка "Вложения" для просмотра
          * `206` - Пользователю доступно только редактирование данных возврата (без действий)
          * `207` - Пользователю доступна функция изменение ответственного за возврат во вкладке "Главное" + кнопки "Сохранить"/"Отменить"
          * `208` - Пользователю доступна функция загрузка вложений во вкладке "Вложения" + кнопки "Сохранить"/"Отменить"
          * `209` - Пользователю доступна функция удаления вложений во вкладке "Вложения" + кнопки "Сохранить"/"Отменить"
          * `210` - Пользователю доступен табличный список с причинами возврата по кнопке "Настройка причин возврата"
          * `211` - Пользователю доступно создание причин возврата + кнопка "Добавить причину"
          * `212` - Пользователю доступно редактирование причин возврата + кнопка "Изменить причину"
          * `3xx` Для настроек:
          * `301` - Пользователю доступна для просмотра страница настроек
          * `302` - Параметры корзины. Пользователю доступно редактирование параметра + кнопка "Изменить параметр"
          * `303` - Срок оплаты заказа. Пользователю доступно редактирование параметра + кнопка "Изменить параметр"
          * `304` - Срок оформления заказа. Пользователю доступно редактирование параметра + кнопка "Изменить параметр"
          * `305` - Максимальное время обработки. Пользователю доступно редактирование параметра + кнопка "Изменить параметр"
          * `4xx` Для каталога товаров:
          * `401` - Пользователю доступен табличный список с фильтрами и поиском
          * `402` - Пользователю доступна детальная страница товара со всеми со всеми вкладками и данными для просмотра
          * `403` - Пользователь может создавать товар
          * `404` - Пользователю доступна функция редактирование любых данных товара и совершения любых действий с ним
          * `405` - Пользователю доступна вкладка "Основные данные" для просмотра
          * `406` - Пользователю доступна вкладка "Контент" для просмотра
          * `407` - Пользователю доступна вкладка "Характеристики" для просмотра
          * `408` - Пользователю доступно управление чек-боксом "Активность"
          * `409` - Пользователю доступно полное редактирование во вкладке "Контент"
          * `410` - Пользователю доступно полное редактирование во вкладке "Характеристики"
          * `411` - Пользователю доступно полное редактирование во вкладке "Основные данные"
          * `413` - Пользователь может удалять товары
          * `414` - Пользователю доступна вкладка "Товарные склейки" для просмотра
          * `415` - Пользователю доступна функция "Изменить атрибуты" в табличном списке товаров
          * `418` - Пользователю доступна миграция состояния сущностей, из которых наполняется индекс
          * `5xx` Для категорий товаров:
          * `501` - Пользователю доступен табличный список с фильтрами и поиском
          * `502` - Пользователю доступна детальная страница категории со всеми вкладками и данными для просмотра
          * `503` - Пользователю доступна функция редактирование любых данных категории и совершения любых действий с ним
          * `504` - Пользователь может создавать категории
          * `505` - Пользователь может добавлять и редактировать атрибуты категории
          * `506` - Пользователь может редактирование данные о категории (кроме активности)
          * `507` - Пользователь может удалять категории
          * `508` - Пользователю доступно управление чек-боксом "Активность"
          * `6xx` Для атрибутов товаров:
          * `601` - Пользователю доступен табличный список с фильтрами и поиском
          * `602` - Пользователю доступна детальная страница атрибутов со всеми со всеми вкладками и данными для просмотра
          * `603` - Пользователю доступно полное редактирование атрибутов, включая активность и отображение на витрине
          * `604` - Пользователь может создать новый атрибут товара и сохранить его
          * `605` - Пользователь может удалять атрибутов
          * `606` - Пользователю доступно управление чек-боксом "Активность"
          * `607` - Пользователю доступно управление чек-боксом "Отображение на витрине"
          * `7xx` Для пользователей:
          * `701` - Пользователю доступен табличный список с фильтрами и поиском
          * `702` - Пользователю доступна детальная страница пользователя со всеми со всеми вкладками и данными для просмотра
          * `703` - Пользователю доступно полное редактирование пользователя
          * `704` - Пользователю доступно управление чек-боксом "Активность"
          * `705` - Пользователю доступно изменение пароля
          * `706` - Пользователю доступно управление ролями пользователя
          * `707` - Пользователю доступно создание пользователя
          * `8xx` Для ролей:
          * `801` - Пользователю доступен табличный список с фильтрами и поиском
          * `802` - Пользователю доступна детальная страница роли со всеми со всеми вкладками и данными для просмотра
          * `803` - Создание ролей
          * `804` - Пользователю доступно полное редактирование роли
          * `805` - Пользователю доступно управление чек-боксом "Активность"
          * `806` - Пользователю доступно удаление роли
          * `9xx` Для информационных страниц:
          * `901` - Пользователю доступен табличный список с информационными страницами
          * `902` - Пользователю доступна детальная страница информационной страницы со всеми данными для просмотра
          * `903` - Пользователю доступно редактирование информационной страницы, включая управление активностью
          * `904` - Пользователю доступно управление чек-боксом "Активность"
          * `905` - Пользователю доступно создание информационной страницы
          * `906` - Пользователю доступно удаление информационной страницы
          * `10xx` Для брендов:
          * `1001` - Пользователю доступен табличный список с брендами с фильтрами и поиском
          * `1002` - Пользователю доступна детальная страница бренда со всеми данными для просмотра
          * `1003` - Пользователю доступно полное редактирование бренда, включая управление активностью
          * `1004` - Пользователю доступно управление чек-боксом "Активность"
          * `1005` - Пользователю доступно создание бренда
          * `1006` - Пользователю доступно удаление бренда
          * `11xx` Для товарных склеек:
          * `1101` - Пользователю доступен табличный список склеек с фильтрами и поиском
          * `1102` - Пользователю доступна детальная страница склейки со всеми данными для просмотра
          * `1103` - Пользователю доступно редактирование склейки (кроме изменения активности и удаления)
          * `1104` - Пользователю доступно управление чек-боксом "Активность"
          * `1105` - Пользователю доступно создание склейки
          * `1106` - Пользователю доступно удаление склейки
          * `1107` - Пользователю доступно редактирование всех полей товарной склейки
          * `12xx` Для клиентов:
          * `1201` - Пользователю доступно удаление персональных данных клиента
          * `1202` - Пользователю доступен табличный список клиентов с фильтрами и поиском
          * `1203` - Пользователю доступна детальная страница клиента со всеми со всеми данными для просмотра
          * `1204` - Пользователю доступно редактирование данных клиента
          * `13xx` Для скидок и промокодов:
          * `1301` - Пользователю доступен табличный список со скидками
          * `1302` - Пользователю доступна детальная страница скидки со всеми данными для просмотра и без возможности редактирования полей
          * `1303` - Пользователю доступно создание скидки
          * `1304` - Пользователю доступно редактирование скидки
          * `1305` - Пользователю доступно удаление скидки
          * `1306` - Пользователю доступно массовое обновление статусов скидки в табличном списке
          * `1311` - Пользователю доступен табличный список с промокодами
          * `1312` - Пользователю доступна детальная страница промокода со всеми данными для просмотра и без возможности редактирования полей
          * `1313` - Пользователю доступно создание промокода
          * `1314` - Пользователю доступно редактирование промокода
          * `1315` - Пользователю доступно удаление промокода
          * `14xx` Для баннеров:
          * `1401` - Пользователю доступен табличный список баннеров с фильтрами и поиском
          * `1402` - Пользователю доступна детальная страница баннера со всеми данными для просмотра
          * `1403` - Пользователю доступно редактирование баннера
          * `1404` - Пользователю доступно создание баннера
          * `1405` - Пользователю доступно удаление баннера
          * `15xx` Для отзывов:
          * `1501` - Пользователю доступен табличный список с отзывами с фильтрами и поиском
          * `1502` - Пользователю доступна детальная страница отзывами со всеми данными для просмотра
          * `1503` - Пользователю доступно удаление отзывов
          * `1504` - Пользователю доступно изменение статуса отзыва
          * `16xx` Для тегов:
          * `1601` - Пользователю доступен табличный список тегов с фильтрами и поиском
          * `1602` - Пользователю доступна детальная страница товарного тега со всеми данными для просмотра
          * `1603` - Пользователю доступно редактирование товарного тега
          * `1604` - Пользователю доступно создание товарного тега
          * `1605` - Пользователю доступно удаление товарного тега
          * `17xx` Для SEO:
          * `1701` - Пользователю доступен табличный список SEO-шаблонов с фильтрами и поиском
          * `1702` - Пользователю доступна детальная страница SEO-шаблонов со всеми данными для просмотра
          * `1703` - Пользователю доступно редактирование SEO-шаблонов
          * `1704` - Пользователю доступно создание SEO-шаблонов
          * `1705` - Пользователю доступно удаление SEO-шаблонов
          * `18xx` Для импортов:
          * `1801` - Пользователю доступен импорт товаров
          * `1802` - Пользователю доступен просмотр журнала импорта товаров
          * `1803` - Пользователю доступен просмотр журнала ошибок импорта товаров
          * `19xx` Для складов:
          * `1901` - Пользователю доступен табличный список складов с фильтрами и поиском
          * `1902` - Пользователю доступна детальная страница склада со всеми данными для просмотра
          * `1903` - Пользователю доступно полное редактирование во вкладке "Основные данные"
          * `1904` - Пользователю доступно полное редактирование во вкладке "Время работы"
          * `1905` - Пользователю доступно полное редактирование во вкладке "Контакты"
          * `1906` - Пользователю доступно полное редактирование во вкладке "График отгрузки"
          * `1907` - Пользователю доступно управление чек-боксом "Активность"
          * `1908` - Пользователь может создавать склад
          * `20xx` Для фидов:
          * `2001` - Пользователю доступен табличный список с настройками фидов с фильтрами и поиском
          * `2002` - Пользователю доступна детальная страница настройками фида со всеми данными для просмотра
          * `2003` - Пользователю доступно создание настроек фида
          * `2004` - Пользователю доступно редактирование настроек фида
          * `2005` - Пользователю доступна миграция состояния сущностей, из которых формируются фиды
          * `21xx` Для тарифов доставки:
          * `2101` - Пользователю доступен табличный список тарифов с фильтрами и поиском
          * `2102` - Пользователю доступна детальная страница тарифа со всеми данными для просмотра
          * `2103` - Пользователю доступно создание тарифа
          * `2104` - Пользователю доступно редактирование тарифа
          * `2105` - Пользователю доступно удаление тарифа
          * `22xx` Для продавцов:
          * `2201` - Пользователю доступен табличный список продавцов с фильтрами и поиском
          * `2202` - Пользователю доступна детальная страница продавца со всеми данными для просмотра
          * `2203` - Пользователю доступно создание продавца
          * `2204` - Пользователю доступно редактирование продавца
          * `23xx` Для статусов продукта:
          * `2301` - Пользователю доступен табличный список статусов продукта с фильтрами и поиском
          * `2302` - Пользователю доступна детальная страница статуса продукта со всеми данными для просмотра
          * `2303` - Пользователю доступно создание статуса продукта
          * `2304` - Пользователю доступно редактирование статуса продукта
          * `2305` - Пользователю доступно удаление статуса продукта
          * `25xx` Для настроек уведомлений:
          * `2501` - Пользователю доступен табличный список настроек уведомлений с фильтрами и поиском
          * `2502` - Пользователю доступна детальная страница настроек уведомлений со всеми данными для просмотра
          * `2503` - Пользователю доступно создание настроек уведомлений
          * `2504` - Пользователю доступно редактирование настроек уведомлений
          * `2505` - Пользователю доступно удаление настроек уведомлений
          * `26xx` Подключение Ensi Cloud:
          * `2601` - Пользователю доступно редактирование подключением Cloud
          * `2602` - Пользователю доступен просмотр подключения Cloud
          * `2603` - Пользователю доступно изменение активности подключения Cloud
          * `27xx` Для настройки параметров доставки:
          * `2701` - Пользователю доступно редактирование параметров доставки
          * `2702` - Пользователю доступен просмотр параметров доставки
          * `28xx` Для офферов:
          * `2801` - Пользователю доступен табличный список офферов с фильтрами и поиском
          * `2802` - Пользователю доступно полное редактирование на вкладке "Основные данные"
          * `2803` - Пользователю доступно полное редактирование на вкладке "Стоки"
          * `2804` - Пользователю доступно управление чекбоксом "Публикация"
          * `2805` - Пользователю доступно управлением полем "Стоимость"
          * `2806` - Пользователю доступна функция редактирование любых данных оффера и совершения любых действий с ним
          * `2807` - Пользователю доступна детальная страница оффера со всеми данными для просмотра
          * `2808` - Пользователю доступно обновление данных офферов
          * `2809` - Пользователю доступна миграция состояния офферов
          * `29xx` Для ПВЗ, точек самовывоза:
          * `2901` - Пользователю доступен табличный список ПВЗ с фильтрами и поиском
          * `2902` - Пользователю доступна детальная страница ПВЗ со всеми данными для просмотра
          * `2903` - Пользователю доступно полное редактирование во вкладке "Основные данные"
          * `2904` - Пользователю доступно полное редактирование во вкладке "Адрес"
          * `30xx` Для пользователей продавцов:
          * `3001` - Пользователю доступен табличный список пользователей продавца
          * `3002` - Пользователю доступна детальная страница пользователя продавца
          * `3003` - Пользователю доступно редактирование пользователя продавца
          * `3004` - Пользователю доступно создание пользователя продавца
          * `3005` - Пользователю доступно изменение активности пользователя продавца
          * `3006` - Пользователю доступно редактирование пароля пользователя продавца
          * `31xx` Для технических таблиц
          * `3101` - Пользователю доступен просмотр технических таблиц
          * `3102` - Пользователю доступно редактирование технических таблиц + запуск консольных команд
          * `32xx` Для служб доставки
          * `3201` - Пользователю доступен табличный список служб доставки с фильтрами и поиском
          * `3202` - Пользователю доступна детальная страница службы доставки со всеми данными для просмотра
          * `3203` - Пользователю доступно редактирование службы доставки
          * `3204` - Пользователю доступно добавление и удаление доступных способов оплаты из службы доставки
      enum:
        - 101
        - 102
        - 103
        - 104
        - 105
        - 106
        - 107
        - 108
        - 109
        - 110
        - 111
        - 112
        - 113
        - 114
        - 115
        - 116
        - 117
        - 118
        - 119
        - 120
        - 201
        - 202
        - 203
        - 204
        - 205
        - 206
        - 207
        - 208
        - 209
        - 210
        - 211
        - 212
        - 301
        - 302
        - 303
        - 304
        - 305
        - 401
        - 402
        - 403
        - 404
        - 405
        - 406
        - 407
        - 408
        - 409
        - 410
        - 411
        - 413
        - 414
        - 415
        - 418
        - 501
        - 502
        - 503
        - 504
        - 505
        - 506
        - 507
        - 508
        - 601
        - 602
        - 603
        - 604
        - 605
        - 606
        - 607
        - 701
        - 702
        - 703
        - 704
        - 705
        - 706
        - 707
        - 801
        - 802
        - 803
        - 804
        - 805
        - 806
        - 901
        - 902
        - 903
        - 904
        - 905
        - 906
        - 1001
        - 1002
        - 1003
        - 1004
        - 1005
        - 1006
        - 1101
        - 1102
        - 1103
        - 1104
        - 1105
        - 1106
        - 1107
        - 1201
        - 1202
        - 1203
        - 1204
        - 1301
        - 1302
        - 1303
        - 1304
        - 1305
        - 1306
        - 1311
        - 1312
        - 1313
        - 1314
        - 1315
        - 1401
        - 1402
        - 1403
        - 1404
        - 1405
        - 1501
        - 1502
        - 1503
        - 1504
        - 1601
        - 1602
        - 1603
        - 1604
        - 1605
        - 1701
        - 1702
        - 1703
        - 1704
        - 1705
        - 1801
        - 1802
        - 1803
        - 1901
        - 1902
        - 1903
        - 1904
        - 1905
        - 1906
        - 1907
        - 1908
        - 2001
        - 2002
        - 2003
        - 2004
        - 2005
        - 2101
        - 2102
        - 2103
        - 2104
        - 2105
        - 2201
        - 2202
        - 2203
        - 2204
        - 2301
        - 2302
        - 2303
        - 2304
        - 2305
        - 2501
        - 2502
        - 2503
        - 2504
        - 2505
        - 2601
        - 2602
        - 2603
        - 2701
        - 2702
        - 2801
        - 2802
        - 2803
        - 2804
        - 2805
        - 2806
        - 2807
        - 2808
        - 2809
        - 2901
        - 2902
        - 2903
        - 2904
        - 3001
        - 3002
        - 3003
        - 3004
        - 3005
        - 3006
        - 3101
        - 3102
        - 3201
        - 3202
        - 3203
        - 3204
      x-enum-varnames:
        - ORDER_LIST_READ
        - ORDER_DETAIL_READ
        - ORDER_DETAIL_MAIN_READ
        - ORDER_DETAIL_CLIENT_READ
        - ORDER_DETAIL_PRODUCTS_READ
        - ORDER_DETAIL_DELIVERY_READ
        - ORDER_DETAIL_COMMENTS_READ
        - ORDER_DETAIL_ATTACHMENTS_READ
        - ORDER_DETAIL_EDIT
        - ORDER_DETAIL_COMMENTS_EDIT
        - ORDER_DETAIL_PROBLEMATIC_EDIT
        - ORDER_DETAIL_DELIVERY_EDIT
        - ORDER_DETAIL_DELIVERY_COMMENTS_EDIT
        - ORDER_DETAIL_CLIENT_EDIT
        - ORDER_DETAIL_ATTACHMENTS_WRITE
        - ORDER_DETAIL_ATTACHMENTS_DELETE
        - ORDER_DETAIL_STATUS_EDIT
        - ORDER_DETAIL_REFUND_CREATE
        - ORDER_DETAIL_PRODUCTS_EDIT
        - ORDER_DETAIL_SHIPMENT_EDIT
        - REFUND_LIST_READ
        - REFUND_DETAIL_READ
        - REFUND_DETAIL_MAIN_READ
        - REFUND_DETAIL_PRODUCTS_READ
        - REFUND_DETAIL_ATTACHMENTS_READ
        - REFUND_DETAIL_EDIT
        - REFUND_DETAIL_RESPONSIBLE_EDIT
        - REFUND_DETAIL_ATTACHMENTS_WRITE
        - REFUND_DETAIL_ATTACHMENTS_DELETE
        - REFUND_DETAIL_REASONS_READ
        - REFUND_DETAIL_REASONS_CREATE
        - REFUND_DETAIL_REASONS_EDIT
        - SETTING_LIST_READ
        - SETTING_BASKET_EDIT
        - SETTING_PAYMENT_TIME_EDIT
        - SETTING_ORDER_CREATE_TIME_EDIT
        - SETTING_ORDER_PROCESS_TIME_EDIT
        - PRODUCT_CATALOG_LIST_READ
        - PRODUCT_CATALOG_DETAIL_READ
        - PRODUCT_CATALOG_PRODUCT_CREATE
        - PRODUCT_CATALOG_DETAIL_WRITE
        - PRODUCT_CATALOG_DETAIL_MAIN_DATA_READ
        - PRODUCT_CATALOG_DETAIL_CONTENT_READ
        - PRODUCT_CATALOG_DETAIL_FEATURE_READ
        - PRODUCT_CATALOG_DETAIL_ACTIVE_EDIT
        - PRODUCT_CATALOG_DETAIL_CONTENT_EDIT
        - PRODUCT_CATALOG_DETAIL_FEATURE_EDIT
        - PRODUCT_CATALOG_DETAIL_MAIN_DATA_EDIT
        - PRODUCT_CATALOG_PRODUCT_DELETE
        - PRODUCT_CATALOG_DETAIL_PRODUCT_GROUPS_READ
        - PRODUCT_CATALOG_MASS_PATCH
        - CATALOG_CACHE_ENTITIES_MIGRATION
        - PRODUCT_CATEGORY_LIST_READ
        - PRODUCT_CATEGORY_DETAIL_READ
        - PRODUCT_CATEGORY_DETAIL_WRITE
        - PRODUCT_CATEGORY_CREATE
        - PRODUCT_CATEGORY_DETAIL_ATTRIBUTES_WRITE
        - PRODUCT_CATEGORY_DETAIL_EDIT
        - PRODUCT_CATEGORY_DELETE
        - PRODUCT_CATEGORY_DETAIL_ACTIVE_EDIT
        - PRODUCT_ATTRIBUTES_LIST_READ
        - PRODUCT_ATTRIBUTES_DETAIL_READ
        - PRODUCT_ATTRIBUTES_DETAIL_EDIT
        - PRODUCT_ATTRIBUTES_CREATE
        - PRODUCT_ATTRIBUTES_DELETE
        - PRODUCT_ATTRIBUTES_DETAIL_ACTIVE_EDIT
        - PRODUCT_ATTRIBUTES_DETAIL_SHOW_EDIT
        - USER_LIST_READ
        - USER_DETAIL_READ
        - USER_DETAIL_EDIT
        - USER_DETAIL_ACTIVE_EDIT
        - USER_DETAIL_PASSWORD_EDIT
        - USER_DETAIL_ROLE_EDIT
        - USER_CREATE
        - ROLE_LIST_READ
        - ROLE_DETAIL_READ
        - ROLE_CREATE
        - ROLE_DETAIL_EDIT
        - ROLE_DETAIL_ACTIVE_EDIT
        - ROLE_DELETE
        - PAGE_LIST_READ
        - PAGE_DETAIL_READ
        - PAGE_DETAIL_EDIT
        - PAGE_DETAIL_ACTIVE_EDIT
        - PAGE_CREATE
        - PAGE_DELETE
        - BRAND_LIST_READ
        - BRAND_DETAIL_READ
        - BRAND_DETAIL_EDIT
        - BRAND_DETAIL_ACTIVE_EDIT
        - BRAND_CREATE
        - BRAND_DELETE
        - PRODUCT_GROUP_LIST_READ
        - PRODUCT_GROUP_DETAIL_READ
        - PRODUCT_GROUP_DETAIL_FIELDS_EDIT
        - PRODUCT_GROUP_DETAIL_ACTIVE_EDIT
        - PRODUCT_GROUP_CREATE
        - PRODUCT_GROUP_DELETE
        - PRODUCT_GROUP_DETAIL_FULL_EDIT
        - CUSTOMER_DELETE_PERSONAL_DATA
        - CUSTOMER_LIST_READ
        - CUSTOMER_DETAIL_READ
        - CUSTOMER_DETAIL_EDIT
        - DISCOUNT_LIST_READ
        - DISCOUNT_DETAIL_READ
        - DISCOUNT_CREATE
        - DISCOUNT_DETAIL_EDIT
        - DISCOUNT_DELETE
        - DISCOUNT_MASS_STATUS_UPDATE
        - PROMO_CODE_LIST_READ
        - PROMO_CODE_DETAIL_READ
        - PROMO_CODE_CREATE
        - PROMO_CODE_DETAIL_EDIT
        - PROMO_CODE_DELETE
        - BANNER_LIST_READ
        - BANNER_DETAIL_READ
        - BANNER_DETAIL_EDIT
        - BANNER_CREATE
        - BANNER_DELETE
        - REVIEW_LIST_READ
        - REVIEW_DETAIL_READ
        - REVIEW_DELETE
        - REVIEW_DETAIL_EDIT
        - NAMEPLATE_LIST_READ
        - NAMEPLATE_DETAIL_READ
        - NAMEPLATE_DETAIL_EDIT
        - NAMEPLATE_CREATE
        - NAMEPLATE_DELETE
        - SEO_TEMPLATE_LIST_READ
        - SEO_TEMPLATE_DETAIL_READ
        - SEO_TEMPLATE_DETAIL_EDIT
        - SEO_TEMPLATE_CREATE
        - SEO_TEMPLATE_DELETE
        - IMPORT_CREATE
        - IMPORT_LIST_READ
        - IMPORT_WARNING_LIST_READ
        - STORE_LIST_READ
        - STORE_DETAIL_READ
        - STORE_MAIN_DATA_EDIT
        - STORE_WORKING_EDIT
        - STORE_CONTACTS_EDIT
        - STORE_PICKUP_TIME_EDIT
        - STORE_ACTIVITY_EDIT
        - STORE_CREATE
        - FEED_SETTINGS_LIST_READ
        - FEED_SETTINGS_DETAIL_READ
        - FEED_SETTINGS_CREATE
        - FEED_SETTINGS_DETAIL_EDIT
        - FEED_ENTITIES_MIGRATION
        - DELIVERY_PRICE_LIST_READ
        - DELIVERY_PRICE_DETAIL_READ
        - DELIVERY_PRICE_CREATE
        - DELIVERY_PRICE_DETAIL_EDIT
        - DELIVERY_PRICE_DELETE
        - SELLER_LIST_READ
        - SELLER_DETAIL_READ
        - SELLER_CREATE
        - SELLER_DETAIL_EDIT
        - PRODUCT_STATUS_LIST_READ
        - PRODUCT_STATUS_DETAIL_READ
        - PRODUCT_STATUS_CREATE
        - PRODUCT_STATUS_DETAIL_EDIT
        - PRODUCT_STATUS_DELETE
        - NOTIFICATION_SETTING_LIST_READ
        - NOTIFICATION_SETTING_DETAIL_READ
        - NOTIFICATION_SETTING_CREATE
        - NOTIFICATION_SETTING_DETAIL_EDIT
        - NOTIFICATION_SETTING_DELETE
        - CLOUD_INTEGRATION_DETAIL_EDIT
        - CLOUD_INTEGRATION_READ
        - CLOUD_INTEGRATION_ACTIVITY_EDIT
        - DELIVERY_OPTIONS_SETTINGS_DETAIL_EDIT
        - DELIVERY_OPTIONS_SETTINGS_DETAIL_READ
        - OFFER_LIST_READ
        - OFFER_DETAIL_MAIN_EDIT
        - OFFER_DETAIL_STOCKS_EDIT
        - OFFER_DETAIL_ALLOW_PUBLISH_EDIT
        - OFFER_DETAIL_PRICE_EDIT
        - OFFER_DETAIL_EDIT
        - OFFER_DETAIL_READ
        - OFFER_ENTITIES_SYNC
        - OFFER_MIGRATION
        - POINT_LIST_READ
        - POINT_DETAIL_READ
        - POINT_DETAIL_MAIN_DATA_EDIT
        - POINT_DETAIL_ADDRESS_EDIT
        - SELLER_USER_LIST_READ
        - SELLER_USER_DETAIL_READ
        - SELLER_USER_DETAIL_EDIT
        - SELLER_USER_CREATE
        - SELLER_USER_ACTIVITY_EDIT
        - SELLER_USER_PASSWORD_EDIT
        - TECHNICAL_TABLES_READ
        - TECHNICAL_TABLES_ALL
        - DELIVERY_SERVICES_TABLES_READ
        - DELIVERY_SERVICES_DETAIL_READ
        - DELIVERY_SERVICES_DETAIL_EDIT
        - DELIVERY_SERVICES_PAYMENT_METHOD_EDIT
      x-enum-descriptions:
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница заказа со всеми со всеми
          вкладками и данными для просмотра
        - Пользователю доступна вкладка "Главное" для просмотра
        - Пользователю доступна вкладка "Клиент" для просмотра
        - Пользователю доступна вкладка "Товары" для просмотра
        - Пользователю доступна вкладка "Доставка" для просмотра
        - Пользователю доступна вкладка "Комментарии" для просмотра
        - Пользователю доступна вкладка "Вложения" для просмотра
        - Пользователю доступно только редактирование данных заказа (без
          действий)
        - Пользователю доступна функция редактирование комментариев во вкладке
          "Комментарии" + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция добавления/удаления проблемы к заказу и
          комментария  к проблеме во вкладке "Комментариии" + кнопки
          "Сохранить"/"Отменить"
        - Пользователю доступна функция редактирования способа доставки во
          вкладке "Доставка" + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция редактирования комментария во вкладке
          "Доставка" + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция редактирования полей клиента во вкладке
          "Клиент" + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция загрузка вложений во вкладке "Вложения"
          + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция удаления вложений во вкладке "Вложения"
          + кнопки "Сохранить"/"Отменить"
        - Пользователю доступно изменение статуса заказа на детальной странице +
          кнопка "Действия"
        - Пользователю доступно создание заявки на возврат + кнопка "Действия"
        - Пользователю доступно редактирование списка товаров в заказе
        - Пользователю доступно изменение статуса отгрузки на детальной странице
          заказ
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница возврата
        - Пользователю доступна вкладка "Главное" для просмотра
        - Пользователю доступна вкладка "Товары" для просмотра
        - Пользователю доступна вкладка "Вложения" для просмотра
        - Пользователю доступно только редактирование данных возврата (без
          действий)
        - Пользователю доступна функция изменение ответственного за возврат во
          вкладке "Главное" + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция загрузка вложений  во вкладке "Вложения"
          + кнопки "Сохранить"/"Отменить"
        - Пользователю доступна функция удаления вложений  во вкладке "Вложения"
          + кнопки "Сохранить"/"Отменить"
        - Пользователю доступен табличный список с причинами возврата по кнопке
          "Настройка причин возврата"
        - Пользователю доступно создание причин возврата + кнопка "Добавить
          причину"
        - Пользователю доступно редактирование причин возврата + кнопка
          "Изменить причину"
        - Пользователю доступна для просмотра страница настроек
        - Параметры корзины. Пользователю доступно редактирование параметра +
          кнопка "Изменить параметр"
        - Срок оплаты заказа. Пользователю доступно редактирование параметра +
          кнопка "Изменить параметр"
        - Срок оформления заказа. Пользователю доступно редактирование параметра
          + кнопка "Изменить параметр"
        - Максимальное время обработки. Пользователю доступно редактирование
          параметра + кнопка "Изменить параметр"
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница товара со всеми со всеми
          вкладками и данными для просмотра
        - Пользователь может создавать товар
        - Пользователю доступна функция редактирование любых данных товара и
          совершения любых действий с ним
        - Пользователю доступна вкладка "Основные данные" для просмотра
        - Пользователю доступна вкладка "Контент" для просмотра
        - Пользователю доступна вкладка "Характеристики" для просмотра
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно полное редактирование во вкладке "Контент"
        - Пользователю доступно полное редактирование во вкладке "Характеристики"
        - Пользователю доступно полное редактирование во вкладке "Основные
          данные"
        - Пользователь может удалять товары
        - Пользователю доступна вкладка "Товарные склейки" для просмотра
        - Пользователю доступна функция "Изменить атрибуты" в табличном списке
          товаров
        - Пользователю доступна миграция состояния сущностей, из которых
          наполняется индекс
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница категории со всеми вкладками
          и данными для просмотра
        - Пользователю доступна функция редактирование любых данных категории и
          совершения любых действий с ним
        - Пользователь может создавать категории
        - Пользователь может добавлять и редактировать атрибуты категории
        - Пользователь может редактирование данные о категории (кроме активности)
        - Пользователь может удалять категории
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница атрибутов со всеми со всеми
          вкладками и данными для просмотра
        - Пользователю доступно полное редактирование атрибутов, включая
          активность и отображение на витрине
        - Пользователь может создать новый атрибут товара и сохранить его
        - Пользователь может удалять атрибутов
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно управление чек-боксом "Отображение на витрине"
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница пользователя со всеми со
          всеми вкладками и данными для просмотра
        - Пользователю доступно полное редактирование пользователя
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно изменение пароля
        - Пользователю доступно управление ролями пользователя
        - Пользователю доступно создание пользователя
        - Пользователю доступен табличный список с фильтрами и поиском
        - Пользователю доступна детальная страница роли со всеми со всеми
          вкладками и данными для просмотра
        - Создание ролей
        - Пользователю доступно полное редактирование роли
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно удаление роли
        - Пользователю доступен табличный список с информационными страницами
        - Пользователю доступна детальная страница информационной страницы со
          всеми данными для просмотра
        - Пользователю доступно редактирование информационной страницы, включая
          управление активностью
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно создание информационной страницы
        - Пользователю доступно удаление информационной страницы
        - Пользователю доступен табличный список с брендами с фильтрами и поиском
        - Пользователю доступна детальная страница бренда со всеми данными для
          просмотра
        - Пользователю доступно полное редактирование бренда, включая управление
          активностью
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно создание бренда
        - Пользователю доступно удаление бренда
        - Пользователю доступен табличный список склеек с фильтрами и поиском
        - Пользователю доступна детальная страница склейки со всеми данными для
          просмотра
        - Пользователю доступно редактирование склейки (кроме изменения
          активности и удаления)
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователю доступно создание склейки
        - Пользователю доступно удаление склейки
        - Пользователю доступно редактирование всех полей товарной склейки
        - Пользователю доступно удаление персональных данных клиента
        - Пользователю доступен табличный список клиентов с фильтрами и поиском
        - Пользователю доступна детальная страница клиента со всеми со всеми
          данными для просмотра
        - Пользователю доступно редактирование данных клиента
        - Пользователю доступен табличный список со скидками
        - Пользователю доступна детальная страница скидки со всеми данными для
          просмотра и без возможности редактирования полей
        - Пользователю доступно создание скидки
        - Пользователю доступно редактирование скидки
        - Пользователю доступно удаление скидки
        - Пользователю доступно массовое обновление статусов скидки в табличном
          списке
        - Пользователю доступен табличный список с промокодами
        - Пользователю доступна детальная страница промокода со всеми данными
          для просмотра и без возможности редактирования полей
        - Пользователю доступно создание промокода
        - Пользователю доступно редактирование промокода
        - Пользователю доступно удаление промокода
        - Пользователю доступен табличный список с баннерами с фильтрами и
          поиском
        - Пользователю доступна детальная страница баннера со всеми данными для
          просмотра
        - Пользователю доступно редактирование баннера
        - Пользователю доступно создание баннера
        - Пользователю доступно удаление баннера
        - Пользователю доступен табличный список с отзывами с фильтрами и поиском
        - Пользователю доступна детальная страница отзывами со всеми данными для
          просмотра
        - Пользователю доступно удаление отзывов
        - Пользователю доступно изменение статуса отзыва
        - Пользователю доступен табличный список тегов с фильтрами и поиском
        - Пользователю доступна детальная страница товарного тега со всеми
          данными для просмотра
        - Пользователю доступно редактирование товарного тега
        - Пользователю доступно создание товарного тега
        - Пользователю доступно удаление товарного тега
        - Пользователю доступен табличный список SEO-шаблонов с фильтрами и
          поиском
        - Пользователю доступна детальная страница SEO-шаблона со всеми данными
          для просмотра
        - Пользователю доступно редактирование SEO-шаблона
        - Пользователю доступно создание SEO-шаблона
        - Пользователю доступно удаление SEO-шаблона
        - Пользователю доступен импорт товаров
        - Пользователю доступен просмотр журнала импорта товаров
        - Пользователю доступен просмотр журнала ошибок импорта товаров
        - Пользователю доступен табличный список складов с фильтрами и поиском
        - Пользователю доступна детальная страница склада со всеми данными для
          просмотра
        - Пользователю доступно полное редактирование во вкладке "Основные
          данные"
        - Пользователю доступно полное редактирование во вкладке "Время работы"
        - Пользователю доступно полное редактирование во вкладке "Контакты"
        - Пользователю доступно полное редактирование во вкладке "График
          отгрузки"
        - Пользователю доступно управление чек-боксом "Активность"
        - Пользователь может создавать склад
        - Пользователю доступен табличный список с настройками фидов с фильтрами
          и поиском
        - Пользователю доступна детальная страница настройками фида со всеми
          данными для просмотра
        - Пользователю доступно создание настроек фида
        - Пользователю доступно редактирование настроек фида
        - Пользователю доступна миграция состояния сущностей, из которых
          формируются фиды
        - Пользователю доступен табличный список тарифов с фильтрами и поиском
        - Пользователю доступна детальная страница тарифа со всеми данными для
          просмотра
        - Пользователю доступно создание тарифа
        - Пользователю доступно редактирование тарифа
        - Пользователю доступно удаление тарифа
        - Пользователю доступен табличный список продавцов с фильтрами и поиском
        - Пользователю доступна детальная страница продавца со всеми данными для
          просмотра
        - Пользователю доступно создание продавца
        - Пользователю доступно редактирование продавца
        - Пользователю доступен табличный список статусов продукта с фильтрами и
          поиском
        - Пользователю доступна детальная страница статуса продукта со всеми
          данными для просмотра
        - Пользователю доступно создание статуса продукта
        - Пользователю доступно редактирование статуса продукта
        - Пользователю доступно удаление статуса продукта
        - Пользователю доступен табличный список настроек уведомлений с
          фильтрами и поиском
        - Пользователю доступна детальная страница настроек уведомлений со всеми
          данными для просмотра
        - Пользователю доступно создание настроек уведомлений
        - Пользователю доступно редактирование настроек уведомлений
        - Пользователю доступно удаление настроек уведомлений
        - Пользователю доступно редактирование подключением Cloud
        - Пользователю доступен просмотр подключения Cloud
        - Пользователю доступно изменение активности подключения Cloud
        - Пользователю доступно редактирование параметров доставки
        - Пользователю доступен просмотр параметров доставки
        - Пользователю доступен табличный список офферов с фильтрами и поиском
        - Пользователю доступно полное редактирование на вкладке "Основные
          данные"
        - Пользователю доступно полное редактирование на вкладке "Стоки"
        - Пользователю доступно управление чекбоксом "Публикация"
        - Пользователю доступно управлением полем "Стоимость"
        - Пользователю доступна функция редактирование любых данных оффера и
          совершения любых действий с ним
        - Пользователю доступна детальная страница оффера со всеми данными для
          просмотра
        - Пользователю доступно обновление данных офферов
        - Пользователю доступна миграция состояния офферов
        - Пользователю доступен табличный список ПВЗ с фильтрами и поиском
        - Пользователю доступна детальная страница ПВЗ со всеми данными для
          просмотра
        - Пользователю доступно полное редактирование во вкладке "Основные
          данные"
        - Пользователю доступно полное редактирование во вкладке "Адрес"
        - Пользователю доступен табличный список пользователей продавца
        - Пользователю доступна детальная страница пользователя продавца
        - Пользователю доступно редактирование пользователя продавца
        - Пользователю доступно создание пользователя продавца
        - Пользователю доступно изменение активности пользователя продавца
        - Пользователю доступно редактирование пароля пользователя продавца
        - Пользователю доступен просмотр технических таблиц
        - Пользователю доступно редактирование технических таблиц + запуск
          консольных команд
        - Пользователю доступен табличный список служб доставки с фильтрами и
          поиском
        - Пользователю доступна детальная страница службы доставки со всеми
          данными для просмотра
        - Пользователю доступно редактирование службы доставки
        - Пользователю доступно добавление и удаление доступных способов оплаты
          из службы доставки
    LogisticDeliveryMethodEnum:
      type: integer
      description: |
        Тип точки выдачи заказов. Расшифровка значений:
          * `1` - Курьерская доставка
          * `2` - Самовывоз
          * `3` - Самовывоз из магазина (самовывоз без доставки)
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - DELIVERY
        - PICKUP
        - STORE
      x-enum-descriptions:
        - Курьерская доставка
        - Самовывоз
        - Самовывоз из магазина
    LogisticDeliveryServiceEnum:
      type: integer
      description: |
        Службы доставки. Расшифровка значений:
          * `1` - B2Cpl
          * `2` - Boxberry
          * `3` - CDEK
          * `4` - Dostavista
          * `5` - DPD
          * `6` - IML
          * `7` - MaxiPost;
          * `8` - PickPoint;
          * `9` - PONY EXPRESS;
          * `10`- Почта России;
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
      x-enum-varnames:
        - B2CPL
        - BOXBERRY
        - CDEK
        - DOSTAVISTA
        - DPD
        - IML
        - MAXIPOST
        - PICKPOINT
        - PONTEXPRESS
        - RUPOST
      x-enum-descriptions:
        - B2Cpl
        - Boxberry
        - CDEK
        - Dostavista
        - DPD
        - IML
        - MaxiPost
        - PickPoint
        - PONY EXPRESS
        - Почта России
    LogisticDeliveryServiceStatusEnum:
      type: integer
      description: |
        Службы доставки. Расшифровка значений:
          * `1` - Активен
          * `2` - Не активен
      enum:
        - 1
        - 2
      x-enum-varnames:
        - ACTIVE
        - INACTIVE
      x-enum-descriptions:
        - Активен
        - Не активен
    LogisticShipmentMethodEnum:
      $ref: ./logistic/enums/logistic_shipment_method_enum.yaml
    LogisticCargoStatusEnum:
      type: integer
      description: |
        Статус отгрузки. Расшифровка значений:
          * `1` - Отгружен
          * `2` - Ожидает отгрузки
      enum:
        - 1
        - 2
      x-enum-varnames:
        - SHIPPED
        - AWAIT_SHIPMENT
      x-enum-descriptions:
        - Отгружен
        - Ожидает отгрузки
    LogisticCargoOrderStatusEnum:
      type: integer
      description: |
        Статус заказа на забор груза. Расшифровка значений:
          * `1` - Новый
          * `2` - Выполнен
          * `3` - Отменен
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - NEW
        - DONE
        - CANCELED
      x-enum-descriptions:
        - Новый
        - Выполнен
        - Отменен
    LogisticPointTypeEnum:
      $ref: ./logistic/enums/logistic_point_type_enum.yaml
    FieldTypeEnum:
      $ref: ./common/enums/field_type_enum.yaml
    FieldFilterTypeEnum:
      $ref: ./common/enums/field_filter_type_enum.yaml
    SearchEnumValuesBody:
      $ref: ./common/schemas/resource_meta.yaml#/SearchEnumValuesBody
    EnumValue:
      $ref: ./common/schemas/resource_meta.yaml#/EnumValue
    FileProtected:
      x-skip-response-validation: true
      type: object
      description: Information about the file as an object. For the consumer it does
        not matter what keys are inside
      additionalProperties:
        type: string
    SearchMenusRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/SearchMenusSort"
        filter:
          $ref: "#/components/schemas/SearchMenusFilter"
        include:
          $ref: "#/components/schemas/SearchMenusInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchMenusSort:
      type: array
      example:
        - id
      items:
        type: string
        description: '"id" - по-возрастанию, "-id" - по-убыванию'
        enum:
          - id
          - code
    SearchMenusFilter:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: header_main
    SearchMenusInclude:
      type: array
      example:
        - items
      items:
        type: string
        enum:
          - items
    RequestBodyPagination:
      oneOf:
        - $ref: "#/components/schemas/RequestBodyCursorPagination"
        - $ref: "#/components/schemas/RequestBodyOffsetPagination"
    RequestBodyCursorPagination:
      type: object
      properties:
        cursor:
          type: string
          nullable: true
          example: null
        limit:
          type: integer
          example: 20
        type:
          description: Pagination type
          allOf:
            - type: string
            - $ref: "#/components/schemas/PaginationTypeCursorEnum"
    RequestBodyOffsetPagination:
      type: object
      properties:
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        type:
          description: Pagination type
          allOf:
            - type: string
            - $ref: "#/components/schemas/PaginationTypeOffsetEnum"
    SearchMenusResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Menu"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Menu:
      allOf:
        - $ref: "#/components/schemas/MenuReadonlyProperties"
        - $ref: "#/components/schemas/MenuIncludes"
    MenuReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
        name:
          type: string
          description: Название
          example: Акция на 8 марта
        code:
          type: string
          description: Код (значение из CmsMenuEnum)
          $ref: "#/components/schemas/CmsMenuEnum"
      required:
        - id
        - name
        - code
    MenuIncludes:
      type: object
      properties:
        items:
          type: array
          description: Пункты меню
          items:
            $ref: "#/components/schemas/MenuItem"
        items_tree:
          type: array
          description: Представление пунктов меню (items) в виде дерева
          items:
            $ref: "#/components/schemas/MenuTree"
    MenuItem:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 3
        url:
          type: string
          description: Ссылка
          example: /about/
        name:
          type: string
          description: Название
          example: О компании
        menu_id:
          type: integer
          description: Идентификатор меню
          example: 1
        _lft:
          type: integer
          description: Идентификатор элемента слева
          example: 1
        _rgt:
          type: integer
          description: Идентификатор элемента справа
          example: 4
        parent_id:
          type: integer
          description: Идентификатор родительского элемента
          example: 1
        active:
          type: boolean
          description: Видимость пункта меню
          example: true
      required:
        - id
        - url
        - name
        - menu_id
        - _lft
        - _rgt
        - parent_id
        - active
    MenuTree:
      type: object
      properties:
        name:
          type: string
          description: Название пункта
          example: О компании
        url:
          type: string
          description: Ссылка
          nullable: true
          example: /about/
        active:
          type: boolean
          description: Видимость пункта меню
          example: true
        children:
          type: array
          description: Родительские пункты в виде MenuTree
          items:
            type: object
            example: {}
            additionalProperties:
              type: string
          example: []
      required:
        - name
        - url
        - active
    ResponseBodyPagination:
      oneOf:
        - $ref: "#/components/schemas/ResponseBodyCursorPagination"
        - $ref: "#/components/schemas/ResponseBodyOffsetPagination"
    ResponseBodyCursorPagination:
      type: object
      properties:
        cursor:
          type: string
          example: eyJpZCI6MTAsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0
          nullable: true
        limit:
          type: integer
          example: 20
        next_cursor:
          type: string
          example: eyJpZCI6MTAsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0
          nullable: true
        previous_cursor:
          type: string
          example: eyJpZCI6MTAsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0
          nullable: true
        type:
          description: Pagination type
          allOf:
            - type: string
            - $ref: "#/components/schemas/PaginationTypeCursorEnum"
    ResponseBodyOffsetPagination:
      type: object
      properties:
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        total:
          type: integer
          example: 253
        type:
          description: Pagination type
          allOf:
            - type: string
            - $ref: "#/components/schemas/PaginationTypeOffsetEnum"
    SearchOneMenusRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/SearchMenusSort"
        filter:
          $ref: "#/components/schemas/SearchMenusFilter"
        include:
          $ref: "#/components/schemas/SearchMenusInclude"
    MenuResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            items:
              type: array
              description: Массив кодов пунктов меню доступных пользователю
              items:
                type: string
                description: Код (значение из MenuItemCodeEnum)
                $ref: "#/components/schemas/MenuItemCodeEnum"
          required:
            - items
      required:
        - data
    UpdateMenuTreesRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MenuTree"
      required:
        - items
    UpdateMenuTreesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MenuTree"
      required:
        - data
    SearchBannersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/SearchBannersSort"
        filter:
          $ref: "#/components/schemas/SearchBannersFilter"
        include:
          $ref: "#/components/schemas/SearchBannersInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchBannersSort:
      type: array
      example:
        - id
      items:
        type: string
        description: '"id" - по-возрастанию, "-id" - по-убыванию'
        enum:
          - id
          - name
          - is_active
    SearchBannersFilter:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: header_main
        is_active:
          type: boolean
          example: true
        type_id:
          type: integer
          example: 1
        button_id:
          type: integer
          example: 1
    SearchBannersInclude:
      type: array
      example:
        - button
      items:
        type: string
        enum:
          - type
          - button
    SearchBannersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Banner"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Banner:
      allOf:
        - $ref: "#/components/schemas/BannerReadonlyProperties"
        - $ref: "#/components/schemas/BannerFillableProperties"
        - $ref: "#/components/schemas/BannerFillableRequiredProperties"
        - $ref: "#/components/schemas/BannerIncludes"
    BannerReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
        code:
          type: string
          description: Код баннера
          example: example-banner
        desktop_image:
          type: string
          description: Ссылка на декстоп изображение
          nullable: true
          example: https://es.ensi-dev.greensight.ru/cms/product-groups/80/40/1_PTG2e6idikYEblBUSeOr.jpg
        mobile_image:
          type: string
          description: Ссылка на мобильное изображение
          nullable: true
          example: https://es.ensi-dev.greensight.ru/cms/product-groups/80/40/1_PTG2e6idikYEblBUSeOr.jpg
        button_id:
          type: integer
          description: Идентификатор кнопки
          nullable: true
          example: null
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2022-09-01T15:47:21.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2022-09-01T15:47:21.000000Z
      required:
        - id
        - code
        - desktop_image
        - mobile_image
        - button_id
        - created_at
        - updated_at
    BannerFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название
          example: Акция на 8 марта
        is_active:
          type: boolean
          description: Активность
          example: true
        sort:
          type: integer
          description: Значение сортировки
          example: 500
        url:
          type: string
          nullable: true
          description: Ссылка
          example: /
        type_id:
          type: integer
          nullable: true
          description: Идентификатор типа
          example: 1
        button:
          $ref: "#/components/schemas/BannerButtonForCreate"
    BannerButtonForCreate:
      allOf:
        - $ref: "#/components/schemas/BannerButtonFillableProperties"
        - $ref: "#/components/schemas/BannerButtonFillableRequiredProperties"
    BannerButtonFillableProperties:
      type: object
      properties:
        url:
          type: string
          description: Ссылка
          example: /
        text:
          type: string
          description: Текст
          example: Просмотреть
        location:
          type: string
          description: Размещение (значение из CmsBannerButtonLocationEnum)
          $ref: "#/components/schemas/CmsBannerButtonLocationEnum"
        type:
          type: string
          description: Тип (значение из CmsBannerButtonTypeEnum)
          $ref: "#/components/schemas/CmsBannerButtonTypeEnum"
    BannerButtonFillableRequiredProperties:
      required:
        - url
        - text
        - location
        - type
      type: object
      additionalProperties:
        type: string
    BannerFillableRequiredProperties:
      required:
        - name
        - is_active
        - url
        - type_id
      type: object
      additionalProperties:
        type: string
    BannerIncludes:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/BannerType"
        button:
          $ref: "#/components/schemas/BannerButton"
    BannerType:
      allOf:
        - $ref: "#/components/schemas/BannerTypeReadonlyProperties"
        - $ref: "#/components/schemas/BannerTypeFillableProperties"
        - $ref: "#/components/schemas/BannerTypeFillableRequiredProperties"
    BannerTypeReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Identifier
          example: 1
        created_at:
          description: Date of creation
          format: date-time
          type: string
          nullable: true
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Date of update
          format: date-time
          type: string
          nullable: true
          example: 2021-07-03T11:57:28.000000Z
      required:
        - id
        - created_at
        - updated_at
    BannerTypeFillableProperties:
      type: object
      properties:
        code:
          type: string
          $ref: "#/components/schemas/CmsBannerTypeEnum"
        active:
          type: boolean
          description: Activity
          example: true
        name:
          type: string
          description: Name
          example: In the widget
    BannerTypeFillableRequiredProperties:
      required:
        - code
        - active
        - name
      type: object
      additionalProperties:
        type: string
    BannerButton:
      allOf:
        - $ref: "#/components/schemas/BannerButtonReadonlyProperties"
        - $ref: "#/components/schemas/BannerButtonFillableProperties"
        - $ref: "#/components/schemas/BannerButtonFillableRequiredProperties"
    BannerButtonReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
      required:
        - id
    SearchOneBannerRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/SearchBannersSort"
        filter:
          $ref: "#/components/schemas/SearchBannersFilter"
        include:
          $ref: "#/components/schemas/SearchBannersInclude"
    BannerResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Banner"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CreateBannersRequest:
      allOf:
        - $ref: "#/components/schemas/BannerFillableProperties"
        - $ref: "#/components/schemas/BannerFillableRequiredProperties"
    ReplaceBannersRequest:
      allOf:
        - $ref: "#/components/schemas/BannerFillableProperties"
        - $ref: "#/components/schemas/BannerFillableRequiredProperties"
    EmptyDataResponse:
      type: object
      properties:
        data:
          type: object
          nullable: true
          example: null
          additionalProperties:
            type: string
        meta:
          type: object
          description: Object with meta-information
          additionalProperties:
            type: string
      required:
        - data
    UploadBannerFileResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/BannerFile"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    BannerFile:
      type: object
      properties:
        url:
          type: string
          description: Ссылка
          example: https://es.ensi-dev.greensight.ru/cms/banners/39/4c/1_desktop_19XRlBz795cFngxd6qwP.jpg
      required:
        - url
    DeleteBannerFileRequest:
      type: object
      properties:
        type:
          type: string
          description: Тип изображения (значение из CmsBannerImageTypeEnum)
          $ref: "#/components/schemas/CmsBannerImageTypeEnum"
      required:
        - type
    SearchBannerTypesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        filter:
          type: object
          additionalProperties:
            type: string
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    RequestBodySort:
      type: array
      example: []
      items:
        type: string
    RequestBodyInclude:
      type: array
      example: []
      items:
        type: string
    SearchBannerTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BannerType"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    GetBannerButtonTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BannerButtonType"
      required:
        - data
    BannerButtonType:
      type: object
      properties:
        id:
          type: string
          description: Button type ID from CmsBannerButtonTypeEnum
        name:
          type: string
          description: Button type name
      required:
        - id
        - name
    GetBannerButtonLocationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BannerButtonLocation"
      required:
        - data
    BannerButtonLocation:
      type: object
      properties:
        id:
          type: string
          description: Location type ID from CmsBannerButtonLocationEnum
        name:
          type: string
          description: Location name
      required:
        - id
        - name
    SearchPagesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchPagesFilter"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchPagesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
        name:
          type: string
          description: Наименование страницы
          example: День рождения компании
        slug:
          type: string
          description: Человекопонятный идентификатор для url
          example: den-rozhdeniya-kompanii
        name_like:
          type: string
          description: Полное или частичное наименование
          example: День ро
        content_like:
          type: string
          description: Полный или частичный Html блок-контент
          example: <h1>Содержание страницы</h1>
        is_active:
          type: boolean
          description: Активность страницы
          example: true
        is_visible:
          type: boolean
          description: Только активные записи (имеют флаг активности и попадают в ее
            промежуток времени)
          example: true
    SearchPagesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Page"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Page:
      allOf:
        - $ref: "#/components/schemas/PageReadonlyProperties"
        - $ref: "#/components/schemas/PageFillableProperties"
        - $ref: "#/components/schemas/PageRequiredFillableProperties"
    PageReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
        created_at:
          type: string
          format: date-time
          description: Дата создания
          example: 2022-09-01T15:47:21.000000Z
        updated_at:
          type: string
          format: date-time
          description: Дата обновления
          example: 2022-09-01T15:47:21.000000Z
      required:
        - id
        - created_at
        - updated_at
    PageFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Наименование страницы
          example: Услуги компании
        slug:
          type: string
          description: Человекопонятный идентификатор для url
          example: uslugi-companii
        content:
          type: string
          description: Html блок-контент
          example: <h1>Содержание страницы</h1>
        is_active:
          type: boolean
          description: Активность страницы
          example: true
        active_from:
          type: string
          format: date-time
          nullable: true
          description: Дата и время начала публикации страницы
          example: 2022-09-01T15:47:21.000000Z
        active_to:
          type: string
          format: date-time
          nullable: true
          description: Дата и время окончания публикации страницы
          example: 2022-09-02T15:47:21.000000Z
    PageRequiredFillableProperties:
      type: object
      required:
        - name
        - slug
        - content
        - is_active
        - active_from
        - active_to
      additionalProperties:
        type: string
    SearchOnePageRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchPagesFilter"
    PageResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Page"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CreatePageRequest:
      allOf:
        - $ref: "#/components/schemas/PageFillableProperties"
        - $ref: "#/components/schemas/PageRequiredFillableProperties"
    PatchPageRequest:
      allOf:
        - $ref: "#/components/schemas/PageFillableProperties"
    IdsObject:
      type: object
      properties:
        ids:
          type: array
          items:
            type: integer
            description: id
            example: 1
      required:
        - ids
    CreateNameplateRequest:
      allOf:
        - $ref: "#/components/schemas/NameplateFillableProperties"
        - $ref: "#/components/schemas/NameplateRequiredProperties"
    NameplateFillableProperties:
      type: object
      properties:
        name:
          type: string
          example: Exclusively in "Ensi"!
        code:
          type: string
          example: exclusively-ensi
        background_color:
          type: string
          example: "#0000ff"
        text_color:
          type: string
          example: "#1d1d1d"
        is_active:
          type: boolean
          example: true
    NameplateRequiredProperties:
      required:
        - name
        - code
        - background_color
        - text_color
        - is_active
      type: object
      additionalProperties:
        type: string
    NameplateResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Nameplate"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Nameplate:
      type: object
      properties:
        id:
          type: integer
          description: Category ID from CMS
        nameplate_id:
          type: integer
          description: Nameplate ID from CMS
        name:
          type: string
          description: Nameplate name
        code:
          type: string
          description: Nameplate code
        background_color:
          type: string
          description: Background color
        text_color:
          type: string
          description: Text color
        is_active:
          type: boolean
          description: Active
        product_links:
          type: array
          description: Array of related NameplateProduct objects
          items:
            $ref: "#/components/schemas/NameplateProduct"
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Nameplate created at
        updated_at:
          type: string
          format: date-time
          description: Nameplate updated at
      required:
        - id
        - nameplate_id
        - name
        - code
        - background_color
        - text_color
        - is_active
        - is_migrated
        - created_at
        - updated_at
    NameplateReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          example: 1
        created_at:
          type: string
          description: Create time
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Update time
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    PatchNameplateRequest:
      allOf:
        - $ref: "#/components/schemas/NameplateFillableProperties"
    SearchNameplatesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchNameplatesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Nameplate"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    NameplateProductResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/NameplateProduct"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    NameplateProduct:
      type: object
      properties:
        id:
          type: integer
          description: NameplateProduct ID
        nameplate_product_id:
          type: integer
          description: Bundles of nameplate and product from CMS
        nameplate_id:
          type: integer
          description: Nameplate ID from CMS
        product_id:
          type: integer
          description: Product ID from PIM
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: NameplateProduct created at
        updated_at:
          type: string
          format: date-time
          description: NameplateProduct updated at
      required:
        - id
        - nameplate_product_id
        - nameplate_id
        - product_id
        - is_migrated
        - created_at
        - updated_at
    NameplateProductProperties:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nameplate_id:
          type: integer
          example: 2
        product_id:
          type: integer
          description: Product ID from PIM
          example: 2
        created_at:
          type: string
          description: Create time
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Update time
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - nameplate_id
        - product_id
        - created_at
        - updated_at
    NameplateProductIncludes:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
    Product:
      type: object
      properties:
        id:
          type: integer
          description: ID
        product_id:
          type: integer
          description: Product ID from PIM
        allow_publish:
          type: boolean
          description: Publication allowed
        main_image_file:
          type: string
          description: Main image file
          nullable: true
        category_ids:
          type: array
          description: Category IDs from PIM
          items:
            oneOf:
              - type: string
              - type: integer
        brand_id:
          type: integer
          description: Brand ID from PIM
          nullable: true
        name:
          type: string
          description: Name
        code:
          type: string
          description: CNC code
        description:
          type: string
          description: Product description
          nullable: true
        type:
          type: integer
          description: Product type (weight, piece, ...) from the Product Type Enum
            enumeration
        vendor_code:
          type: string
          description: Article number
        barcode:
          type: string
          description: Barcode
          nullable: true
        weight:
          type: number
          description: Net weight (kg)
          nullable: true
        weight_gross:
          type: number
          description: Gross weight (kg)
          nullable: true
        width:
          type: number
          description: Width (mm)
          nullable: true
        height:
          type: number
          description: Height (mm)
          nullable: true
        length:
          type: number
          description: Length (mm)
          nullable: true
        is_adult:
          type: boolean
          description: Product 18+
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        uom:
          type: integer
          description: The unit of measurement from the ProductUomEnum enumeration
          nullable: true
        tariffing_volume:
          type: integer
          description: The billing unit from the ProductTariffingVolumeEnum transfers
          nullable: true
        order_step:
          type: number
          description: Order step
          nullable: true
        order_minvol:
          type: number
          description: Minimum value for order
          nullable: true
        brand:
          $ref: "#/components/schemas/Brand"
          nullable: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        product_property_values:
          type: array
          items:
            $ref: "#/components/schemas/ProductPropertyValue"
        nameplates:
          type: array
          description: Product nameplates
          items:
            $ref: "#/components/schemas/Nameplate"
        product_group:
          $ref: "#/components/schemas/ProductGroup"
          description: Product gluing, which includes the product
          nullable: true
        offers:
          type: array
          description: Product offers
          items:
            $ref: "#/components/schemas/Offer"
        created_at:
          type: string
          format: date-time
          description: Product created at
        updated_at:
          type: string
          format: date-time
          description: Product updated at
      required:
        - id
        - product_id
        - allow_publish
        - main_image_file
        - category_ids
        - brand_id
        - name
        - code
        - description
        - type
        - vendor_code
        - barcode
        - weight
        - weight_gross
        - width
        - height
        - length
        - is_adult
        - is_migrated
        - uom
        - tariffing_volume
        - order_step
        - order_minvol
        - created_at
        - updated_at
    ProductReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          example: 15324
        tariffing_volume:
          nullable: true
          description: Unit of tariffication from CatalogProductTariffingVolumeEnum from PIM
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductTariffingVolumeEnum"
        main_image_file:
          type: string
          nullable: true
          example: http://es.ensi.127.0.0.1.nip.io/catalog/products/ba/5e/zHgaNTq9LgCU3yXA3lNG.jpg
        created_at:
          description: Create time
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Update time
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
      required:
        - id
        - tariffing_volume
        - main_image_file
        - created_at
        - updated_at
    ProductFillableProperties:
      allOf:
        - $ref: "#/components/schemas/ProductUniqueProperties"
        - $ref: "#/components/schemas/ProductMassPatchableProperties"
    ProductUniqueProperties:
      type: object
      properties:
        external_id:
          type: string
          nullable: true
          example: "14211"
        barcode:
          type: string
          nullable: true
          description: EAN
          example: "1003912039"
        code:
          type: string
          nullable: true
          description: Code to use in URL
          example: steyk-miratorg-ribay-ohlazhdennyy-320-g
        vendor_code:
          type: string
          description: Article
          example: "123466"
    ProductMassPatchableProperties:
      type: object
      properties:
        category_ids:
          type: array
          description: Category IDs from PIM
          items:
            type: integer
            example: 123
        brand_id:
          type: integer
          nullable: true
          description: Brand ID from PIM
          example: 285
        name:
          type: string
          example: Apple juice
        description:
          type: string
          nullable: true
          example: Fresh apple juice
        type:
          type: integer
          description: Product type from CatalogProductTypeEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductTypeEnum"
        allow_publish:
          type: boolean
          example: true
        weight:
          type: number
          nullable: true
          description: Net weight in kg
          example: 0.5
        weight_gross:
          type: number
          nullable: true
          description: Gross weight in kg
          example: 0.75
        length:
          type: number
          nullable: true
          description: Length in mm
          example: 100
        width:
          type: number
          nullable: true
          description: Width in mm
          example: 150
        height:
          type: number
          nullable: true
          description: Height in mm
          example: 50
        is_adult:
          type: boolean
          nullable: true
          description: Is product 18+
          example: false
        uom:
          type: integer
          nullable: true
          description: Unit of measurement from CatalogProductUomEnum from PIM
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductTypeEnum"
        order_step:
          type: number
          nullable: true
          example: 0.7
        order_minvol:
          type: number
          nullable: true
          description: Minimum quantity for order
          example: 1.4
        picking_weight_deviation:
          type: number
          nullable: true
          description: Weight deviation limit in percent
          example: 0.35
    ProductStatusProperties:
      type: object
      properties:
        status_id:
          type: integer
          description: Status ID from ProductStatusSetting object
          example: 1
        status_comment:
          type: string
          nullable: true
          example: Invalid image format
    ProductIncludes:
      type: object
      properties:
        brand:
          $ref: "#/components/schemas/Brand"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        images:
          type: array
          items:
            $ref: "#/components/schemas/ProductImage"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/ProductAttributeValue"
        product_groups:
          type: array
          items:
            $ref: "#/components/schemas/ProductGroup"
        no_filled_required_attributes:
          type: boolean
          description: Product has not filled required attributes
    Brand:
      type: object
      properties:
        id:
          type: integer
          description: Brand ID
        brand_id:
          type: integer
          description: Brand ID from PIM
        name:
          type: string
          description: Name
        code:
          type: string
          description: CNC code
        description:
          type: string
          description: Brand description
          nullable: true
        logo_file:
          type: string
          description: Logotype file
          nullable: true
        logo_url:
          type: string
          description: Logotype URL
          nullable: true
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Brand created at
        updated_at:
          type: string
          format: date-time
          description: Brand updated at
      required:
        - id
        - brand_id
        - name
        - code
        - is_migrated
        - created_at
        - updated_at
    BrandReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор бренда
          example: 274
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        image_url:
          type: string
          nullable: true
          description: >
            ### URL логотипа.


            Для картинки на внешнем ресурсе совпадает с logo_url.

            Если картинка загружена на сервер приложения, то в этом поле
            возвращает URL для публичного доступа к ней, а в

            logo_url будет null.
        logo_url:
          type: string
          nullable: true
          description: >
            ### URL логотипа на внешнем сервере.


            Если для бренда была загружена картинка, то при передаче в запросе
            на обновление данных непустого значения

            в этом поле, картинка будет удалена.
          example: https://ya.ru?img=00123
      required:
        - id
        - created_at
        - updated_at
        - image_url
        - logo_url
    BrandFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название бренда
          example: Sony
        is_active:
          type: boolean
          description: Активность бренда
          example: true
        code:
          type: string
          nullable: true
          description: Код бренда
          example: sony
        description:
          type: string
          nullable: true
          description: Описание бренда
          example: Электроника
    BrandFillableRequiredProperties:
      required:
        - name
        - is_active
        - code
        - description
      type: object
      additionalProperties:
        type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          description: Category ID from Pim
        name:
          type: string
          description: Name
        code:
          type: string
          description: CNC code
        parent_id:
          type: integer
          description: ID of the parent category from Pim
          nullable: true
        category_id:
          type: integer
          description: Category ID from Pim
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        actual_properties:
          type: array
          description: Array of related ActualCategoryProperty objects
          items:
            $ref: "#/components/schemas/ActualCategoryProperty"
        created_at:
          type: string
          format: date-time
          description: Property created at
        updated_at:
          type: string
          format: date-time
          description: Property updated at
      required:
        - id
        - name
        - code
        - parent_id
        - category_id
        - is_migrated
        - created_at
        - updated_at
    CategoryReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор категории
          example: 202
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        is_real_active:
          type: boolean
          description: Признак активности с учетом иерархии
          example: true
      required:
        - id
        - created_at
        - updated_at
        - is_real_active
    CategoryFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название категории
          example: Мясо
        code:
          type: string
          description: Код категории
          example: myaso
        parent_id:
          type: integer
          nullable: true
          description: Идентификатор родительской категории
          example: 125
        is_inherits_properties:
          type: boolean
          description: Категория наследует атрибуты родительской
          example: true
        is_active:
          type: boolean
          description: Признак активности данной категории
          example: false
    CategoryRequiredFillableProperties:
      type: object
      required:
        - name
        - code
        - parent_id
        - is_inherits_properties
        - is_active
      additionalProperties:
        type: string
    CategoryIncludes:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/CategoryBoundProperty"
        hidden_properties:
          type: array
          items:
            $ref: "#/components/schemas/CategoryBoundProperty"
    CategoryBoundProperty:
      type: object
      properties:
        name:
          type: string
          description: Название свойства
          example: Диагональ
        display_name:
          type: string
          description: Публичное наименование
          example: Диагональ экрана
        code:
          type: string
          description: Код свойства
          example: diagonal
        type:
          type: string
          description: Тип свойства из PropertyTypeEnum
          example: double
        hint_value:
          type: string
          description: Подсказка при заполнении для значения
          nullable: true
          example: Выберите цвет
        hint_value_name:
          type: string
          description: Подсказка при заполнении для названия значения
          nullable: true
          example: Введите название цвета
        is_multiple:
          type: boolean
          description: Поддерживает множественные значения
          example: true
        is_filterable:
          type: boolean
          description: Выводится в фильтрах на витрине
          example: false
        is_public:
          type: boolean
          description: Выводить на витрине
          example: false
        is_active:
          type: boolean
          description: Активность атрибут
          example: true
        has_directory:
          type: boolean
          description: Атрибут имеет справочник значений
          example: false
        is_inherited:
          type: boolean
          description: Наследуемой от родительской категории атрибут
          example: false
        is_required:
          type: boolean
          description: Атрибут обязателен для заполнения
          example: true
        is_system:
          type: boolean
          description: Признак системного атрибута
          example: false
        is_moderated:
          type: boolean
          description: Атрибут модерируется
          example: true
        is_gluing:
          type: boolean
          description: Свойство используется для склейки товаров
          example: true
        is_common:
          type: boolean
          description: Признак общего для всех категорий атрибута
          example: false
        property_id:
          type: integer
          description: Идентификатор атрибута, которому принадлежит значение
          example: 1
      required:
        - name
        - display_name
        - code
        - type
        - hint_value
        - hint_value_name
        - is_multiple
        - is_filterable
        - is_public
        - is_active
        - has_directory
        - is_inherited
        - is_required
        - is_system
        - is_moderated
        - is_gluing
        - is_common
        - property_id
    ProductImage:
      allOf:
        - $ref: "#/components/schemas/ProductImageReadonlyProperties"
        - $ref: "#/components/schemas/ProductImageFillableProperties"
        - $ref: "#/components/schemas/ProductImageResponseRequired"
    ProductImageReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор картинки
          example: 202
        url:
          type: string
          description: URL картинки
          example: https://es-public.project.ru/domain/attachments/48/2f/image.png
    ProductImageFillableProperties:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: Наименование (краткое описание картинки)
          example: В высоком разрешении
        sort:
          type: integer
          description: Порядок сортирковки в коллекции картинок
          example: 100
    ProductImageResponseRequired:
      required:
        - id
        - url
        - name
        - sort
      type: object
      additionalProperties:
        type: string
    ProductAttributeValue:
      allOf:
        - $ref: "#/components/schemas/ProductAttributeValueReadonlyProperties"
        - $ref: "#/components/schemas/ProductAttributeValueFillableProperties"
    ProductAttributeValueReadonlyProperties:
      type: object
      properties:
        type:
          type: string
          description: Тип значения из PropertyTypeEnum
          example: color
        url:
          type: string
          description: Ссылка на файл
          example: https://files.ensi.ru/catalog/12/6d/image_001.png
      required:
        - type
    ProductAttributeValueFillableProperties:
      type: object
      properties:
        property_id:
          type: integer
          description: Идентификатор атрибута
          example: 512
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: number
          description: Значение элемента справочника (string|number|integer|boolean)
          example: "#FFFFFF"
        name:
          type: string
          nullable: true
          description: Название значения (например, имя цвета)
          example: Красный
        directory_value_id:
          type: integer
          description: Идентификатор значения справочника. Если установлен, то value и
            name задавать не нужно.
          example: 500
    ProductGroup:
      type: object
      properties:
        id:
          type: integer
          description: Product gluing ID
        product_group_id:
          type: integer
          description: Product gluing ID from PIM
        category_id:
          type: integer
          description: Category ID from PIM
        name:
          type: string
          description: Name
        main_product_id:
          type: integer
          description: Main product ID from PIM
          nullable: true
        is_active:
          type: boolean
          description: Activity from PIM
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        category:
          $ref: "#/components/schemas/Category"
          description: Category
          nullable: true
        main_product:
          $ref: "#/components/schemas/Product"
          description: Main product
        products:
          type: array
          description: Products gluing
          items:
            $ref: "#/components/schemas/Product"
        product_links:
          type: array
          description: Product links to gluing
          items:
            $ref: "#/components/schemas/ProductGroupProduct"
        created_at:
          type: string
          format: date-time
          description: Product Group created at
        updated_at:
          type: string
          format: date-time
          description: Product Group updated at
      required:
        - id
        - product_group_id
        - category_id
        - name
        - main_product_id
        - is_active
        - is_migrated
        - created_at
        - updated_at
    ProductGroupReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор склейки
          example: 220
        products_count:
          type: integer
          description: Кол-во товаров в склейке
          example: 220
        main_product_image:
          type: string
          description: URL картинки главного товара
          example: https://ya.ru/images?p=001
          nullable: true
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
      required:
        - id
        - products_count
        - main_product_image
        - created_at
        - updated_at
    ProductGroupFillableProperties:
      type: object
      properties:
        category_id:
          type: integer
          description: Идентификатор категории
          example: 100
        main_product_id:
          type: integer
          description: Идентификатор товара для обложки
          nullable: true
          example: 5
        name:
          type: string
          description: Название
          example: Лабутены
        is_active:
          type: boolean
          description: Активность
    ProductGroupFillableRequiredProperties:
      type: object
      required:
        - category_id
        - main_product_id
        - name
        - is_active
      additionalProperties:
        type: string
    ProductGroupIncludes:
      type: object
      properties:
        category:
          $ref: "#/components/schemas/Category"
        main_product:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ProductDraftWithoutInclude"
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductDraftWithoutInclude"
    ProductDraftWithoutInclude:
      allOf:
        - $ref: "#/components/schemas/ProductReadonlyProperties"
        - $ref: "#/components/schemas/ProductFillableProperties"
        - $ref: "#/components/schemas/ProductStatusProperties"
        - $ref: "#/components/schemas/ProductResponseRequiredProperties"
    ProductResponseRequiredProperties:
      type: object
      required:
        - name
        - code
        - type
        - allow_publish
        - vendor_code
        - barcode
        - weight
        - weight_gross
        - length
        - width
        - height
        - is_adult
        - uom
        - order_step
        - order_minvol
        - picking_weight_deviation
      additionalProperties:
        type: string
    SearchNameplateProductsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchNameplateProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/NameplateProduct"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateSeoTemplateRequest:
      allOf:
        - $ref: "#/components/schemas/SeoTemplateFillableProperties"
        - $ref: "#/components/schemas/SeoTemplateRequiredProperties"
    SeoTemplateFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название шаблона
          example: Шаблон по умолчанию
        type:
          description: Тип шаблона из SeoTemplateTypeEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CmsSeoTemplateTypeEnum"
          example: 1
        header:
          type: string
          description: Заголовок h1
          example: Шаблон по умолчанию
        title:
          type: string
          nullable: true
          description: Заголовок окна браузера
          example: Купить {название товара} с доставкой по цене {стоимость} руб в
            интернет-магазине.
        description:
          type: string
          nullable: true
          description: Описание страницы, мета-тег description
          example: "{название товара}. Описание товара"
        seo_text:
          type: string
          nullable: true
          description: SEO-текст. Выводится над футером в SEO-блоке.
          example: "{название товара}. Описание товара"
        is_active:
          type: boolean
          description: Активность шаблона
          example: true
    SeoTemplateRequiredProperties:
      type: object
      required:
        - name
        - type
        - header
        - title
        - description
        - seo_text
        - is_active
      additionalProperties:
        type: string
    SeoTemplateResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/SeoTemplate"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    SeoTemplate:
      allOf:
        - $ref: "#/components/schemas/SeoTemplateReadonlyProperties"
        - $ref: "#/components/schemas/SeoTemplateFillableProperties"
        - $ref: "#/components/schemas/SeoTemplateRequiredProperties"
    SeoTemplateReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        created_at:
          type: string
          description: Дата создания SEO-шаблона
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления SEO-шаблона
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    AddSeoTemplateProductsRequest:
      allOf:
        - $ref: "#/components/schemas/IdsObject"
    DeleteSeoTemplateProductsRequest:
      allOf:
        - $ref: "#/components/schemas/IdsObject"
    PatchSeoTemplateRequest:
      allOf:
        - $ref: "#/components/schemas/SeoTemplateFillableProperties"
    SearchSeoTemplatesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchSeoTemplatesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchSeoTemplatesFilter:
      type: object
      additionalProperties:
        type: string
    SearchSeoTemplatesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SeoTemplate"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    GetSeoTemplateTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SeoTemplateTypes"
      required:
        - data
    SeoTemplateTypes:
      type: object
      properties:
        id:
          type: integer
          description: Type ID from CmsSeoTemplateTypeEnum
        name:
          type: string
          description: Type description
      required:
        - id
        - name
    GetVariablesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Variables"
      required:
        - data
    Variables:
      type: object
      properties:
        id:
          type: string
          description: SEO variable from CmsSeoVariableEnum
        name:
          type: string
          description: SEO variable description
      required:
        - id
        - name
    SeoTemplateProductResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/SeoTemplateProduct"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    SeoTemplateProduct:
      allOf:
        - $ref: "#/components/schemas/SeoTemplateProductReadonlyProperties"
        - $ref: "#/components/schemas/SeoTemplateProductFillableProperties"
        - $ref: "#/components/schemas/SeoTemplateProductRequiredProperties"
        - $ref: "#/components/schemas/SeoTemplateProductIncludes"
    SeoTemplateProductReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        template_id:
          type: integer
          description: Идентификатор SEO-шаблона
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - template_id
        - created_at
        - updated_at
    SeoTemplateProductFillableProperties:
      type: object
      properties:
        product_id:
          type: integer
          description: Идентификатор товара
          example: 2
    SeoTemplateProductRequiredProperties:
      type: object
      required:
        - product_id
      additionalProperties:
        type: string
    SeoTemplateProductIncludes:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
    SearchSeoTemplateProductsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchSeoTemplateProductsFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - product
          example:
            - product
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchSeoTemplateProductsFilter:
      type: object
      additionalProperties:
        type: string
    SearchSeoTemplateProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SeoTemplateProduct"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    LoginRequest:
      type: object
      properties:
        login:
          type: string
          description: Логин
          example: TestLogin
        password:
          type: string
          description: Пароль
          example: testPassword775105k#i*
      required:
        - login
        - password
    AuthResponse:
      type: object
      x-lg-resource-class-name: TokensResource
      properties:
        data:
          type: object
          properties:
            access_token:
              type: string
              description: Access Token
            refresh_token:
              type: string
              description: Refresh token
            expires_in:
              type: integer
              description: Время действия токена (в секундах)
              example: 86400
          required:
            - access_token
            - refresh_token
            - expires_in
      required:
        - data
    RefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: Refresh token
      required:
        - refresh_token
    CurrentUserResponse:
      type: object
      x-lg-resource-class-name: CurrentUserResource
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              description: Идентификатор admin-пользователя
              example: 1
            full_name:
              type: string
              description: Полное ФИО
              example: Иванов Иван Иванович
            short_name:
              type: string
              description: Сокращенное ФИО
              example: Иванов И.И.
            active:
              type: boolean
              description: Активен
              example: true
            login:
              type: string
              description: Логин
              example: TestLogin
            last_name:
              type: string
              description: Фамилия
              example: Иванов
              nullable: true
            first_name:
              type: string
              description: Имя
              example: Иван
              nullable: true
            middle_name:
              type: string
              description: Отчество
              example: Иванович
              nullable: true
            email:
              type: string
              description: Email
              example: test@mail.ru
            phone:
              type: string
              description: Телефон
              example: "+79191000000"
            roles:
              type: array
              description: Роли пользователя
              items:
                type: integer
                description: Идентификатор роли пользователя
                example: 101
            rights_access:
              type: array
              description: Права пользователя
              items:
                $ref: "#/components/schemas/UnitsAdminUserRoleRightsAccessEnum"
          required:
            - id
            - full_name
            - short_name
            - active
            - login
            - last_name
            - first_name
            - middle_name
            - email
            - phone
            - roles
            - rights_access
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PointResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Point"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Point:
      allOf:
        - $ref: "#/components/schemas/PointReadonlyProperties"
        - $ref: "#/components/schemas/PointFillableProperties"
        - $ref: "#/components/schemas/PointFillableRequiredProperties"
        - $ref: "#/components/schemas/PointIncludes"
    PointReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор пункта
          example: 1
        external_id:
          type: string
          description: Id пункта у службы доставки
          example: "1234"
        name:
          type: string
          description: Название пункта
          example: ПВЗ на Наволокской
        description:
          type: string
          description: Описание проезда
          nullable: true
          example: ПВЗ на Наволокской
        phone:
          type: string
          description: Телефон
          nullable: true
          example: "+794933155105"
        address_reduce:
          type: string
          description: Cокращенный адрес пвз
          nullable: true
        metro_station:
          type: string
          description: Cтанция метро
          nullable: true
          example: Ховрино
        only_online_payment:
          type: boolean
          nullable: true
          description: Выдача только полностью оплаченных посылок
        has_payment_card:
          type: boolean
          nullable: true
          description: Возможна ли оплата картой
        has_courier:
          type: boolean
          nullable: true
          description: Осуществляется ли курьерская доставка
        is_postamat:
          type: boolean
          nullable: true
          description: Отделение является постаматом
        max_value:
          type: string
          nullable: true
          description: Ограничение объема (куб.метры)
        max_weight:
          type: integer
          nullable: true
          description: Ограничение веса (кг)
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - external_id
        - name
        - description
        - phone
        - address_reduce
        - metro_station
        - only_online_payment
        - has_payment_card
        - has_courier
        - is_postamat
        - max_value
        - max_weight
        - created_at
        - updated_at
    PointFillableProperties:
      properties:
        delivery_service_id:
          type: integer
          description: Идентификатор службы доставки из DeliveryServiceEnum
          nullable: true
          example: 1
        is_active:
          type: boolean
          description: Активность
        city_guid:
          type: string
          description: ФИАС id населенного пункта
          nullable: true
          example: df284e77-a45c-411d-8901-94c91f4a92e5
        address:
          $ref: "#/components/schemas/Address"
        geo_lat:
          description: Широта
          type: string
          nullable: true
          example: "55.013548"
        geo_lon:
          description: Долгота
          type: string
          nullable: true
          example: "36.115588"
        timezone:
          type: string
          description: Часовой пояс
          nullable: true
          example: Moscow
    Address:
      type: object
      description: адрес
      nullable: true
      properties:
        address_string:
          description: Полная строка адреса
          type: string
          example: Москва, Красносельская Верхн., д 3А
        country_code:
          description: Код страны
          type: string
          enum:
            - RU
        post_index:
          description: Почтовый индекс
          type: string
          example: "124482"
        region:
          description: Регион
          type: string
          example: Москва
        region_guid:
          type: string
          description: GUID региона
          example: 0c5b2444-70a0-4932-980c-b4dc0d3f02b5
        area:
          type: string
          description: название области
          example: ""
        area_guid:
          type: string
          description: GUID области
          example: ""
        city:
          type: string
          description: название города
          example: Зеленоград
        city_guid:
          type: string
          description: GUID города
          example: ec44c0ee-bf24-41c8-9e1c-76136ab05cbf
        street:
          type: string
          description: улица
          example: ""
        house:
          description: дом
          type: string
          example: "305"
        block:
          description: Строение / Корпус
          type: string
          example: ""
        flat:
          description: Квартира / Офис
          type: string
          example: "5"
        floor:
          type: string
          description: этаж
          example: "2"
        porch:
          type: string
          description: подъезд
          example: ""
        intercom:
          type: string
          description: код домофона
          example: 001#777
        geo_lat:
          description: широта
          type: string
          example: "55.013548"
        geo_lon:
          description: долгота
          type: string
          example: "36.115588"
    PointFillableRequiredProperties:
      required:
        - delivery_service_id
        - is_active
        - city_guid
        - address
        - geo_lat
        - geo_lon
        - timezone
      type: object
      additionalProperties:
        type: string
    PointIncludes:
      type: object
      properties:
        point_workings:
          description: Время работы
          type: array
          items:
            $ref: "#/components/schemas/PointWorking"
    PointWorking:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
        point_id:
          type: integer
          description: Идентификатор пункта
          example: 1
        is_active:
          type: boolean
          description: Активность
        day:
          type: integer
          description: День недели (1-7)
          example: 1
        working_start_time:
          type: string
          description: Время начала работы склада
          example: 10:00
        working_end_time:
          type: string
          description: Время конца работы склада
          example: 19:00
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - point_id
        - is_active
        - day
        - working_start_time
        - working_end_time
        - created_at
        - updated_at
    PatchPointRequest:
      allOf:
        - $ref: "#/components/schemas/PointFillableProperties"
    SearchPointsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - point_workings
          example:
            - point_workings
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchPointsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Point"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    DeliveryServiceResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeliveryService"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeliveryService:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryServiceFillableProperties"
        - $ref: "#/components/schemas/DeliveryServiceRequiredProperties"
        - $ref: "#/components/schemas/DeliveryServiceIncludes"
    DeliveryServiceReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор службы доставки
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    DeliveryServiceFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название
          example: B2Cpl
        registered_at:
          type: string
          format: date-time
          description: Дата регистрации
          example: 2021-01-29T12:36:13.000000Z
        legal_info_company_name:
          type: string
          description: Юр. название компании
          nullable: true
          example: Общество с ограниченной ответственностью "Старт-М"
        legal_info_company_address:
          $ref: "#/components/schemas/Address"
        legal_info_inn:
          type: string
          nullable: true
          description: ИНН
          example: "7727056471"
        legal_info_payment_account:
          type: string
          nullable: true
          description: р/с
          example: "40702810138000027473"
        legal_info_bik:
          type: string
          nullable: true
          description: БИК
          example: "044525225"
        legal_info_bank:
          type: string
          nullable: true
          description: Банк
          example: ОАО Сбербанк России г. Москва
        legal_info_bank_correspondent_account:
          type: string
          nullable: true
          description: К/с банка
          example: "30101810400000000225"
        general_manager_name:
          type: string
          nullable: true
          description: ФИО ген. директора
          example: Козловский Матвей Владимирович
        contract_number:
          type: string
          nullable: true
          description: Номер договора
          example: "123"
        contract_date:
          type: string
          format: date
          nullable: true
          description: Дата договора
          example: 2021-01-29
        vat_rate:
          type: integer
          nullable: true
          description: Cтавка НДС
          example: 13
        taxation_type:
          type: integer
          nullable: true
          description: Тип налогообложения
          example: 1
        status:
          allOf:
            - type: integer
            - $ref: "#/components/schemas/LogisticDeliveryServiceStatusEnum"
        comment:
          type: string
          nullable: true
          description: Комментарий
          example: ""
        apiship_key:
          type: string
          nullable: true
          description: Код в системе ApiShip
          example: b2cpl
        priority:
          type: integer
          description: Приоритет (чем меньше, тем выше)
          example: 1
        max_shipments_per_day:
          type: integer
          nullable: true
          description: Максимальное кол-во отправлений в день
          example: 100
        max_cargo_export_time:
          type: string
          nullable: true
          description: Время создания заявки для забора отправления день-в-день
          example: 16:00
        do_consolidation:
          type: boolean
          description: Консолидация многоместных отправлений?
          example: true
        do_deconsolidation:
          type: boolean
          description: Расконсолидация многоместных отправлений?
          example: true
        do_zero_mile:
          type: boolean
          description: Осуществляет нулевую милю?
          example: true
        do_express_delivery:
          type: boolean
          description: Осуществляет экспресс-доставку?
          example: true
        do_return:
          type: boolean
          description: Принимает возвраты?
          example: true
        do_dangerous_products_delivery:
          type: boolean
          description: Осуществляет доставку опасных грузов?
          example: true
        do_transportation_oversized_cargo:
          type: boolean
          description: Перевозка крупногабаритных грузов?
          example: true
        add_partial_reject_service:
          type: boolean
          description: Добавлять услугу частичного отказ в заказ на доставку?
          example: true
        add_insurance_service:
          type: boolean
          description: Добавлять услугу страхования груза в заказ на доставку?
          example: true
        add_fitting_service:
          type: boolean
          description: Добавлять услугу примерки в заказ на доставку?
          example: true
        add_return_service:
          type: boolean
          description: Добавлять услугу возврата в заказ на доставку?
          example: true
        add_open_service:
          type: boolean
          description: Добавлять услугу вскрытия при получении в заказ на доставку?
          example: true
        pct:
          type: integer
          description: Planned Consolidation Time - плановое время доставки заказа от
            склада продавца до логистического хаба ЛО и обработки заказа в
            сортировочном центре или хабе на стороне ЛО (мин)
          example: 180
    DeliveryServiceRequiredProperties:
      type: object
      required:
        - name
        - registered_at
        - legal_info_company_name
        - legal_info_company_address
        - legal_info_inn
        - legal_info_payment_account
        - legal_info_bik
        - legal_info_bank
        - legal_info_bank_correspondent_account
        - general_manager_name
        - contract_number
        - contract_date
        - vat_rate
        - taxation_type
        - status
        - comment
        - apiship_key
        - priority
        - max_shipments_per_day
        - max_cargo_export_time
        - do_consolidation
        - do_deconsolidation
        - do_zero_mile
        - do_express_delivery
        - do_transportation_oversized_cargo
        - do_return
        - do_dangerous_products_delivery
        - add_partial_reject_service
        - add_insurance_service
        - add_fitting_service
        - add_return_service
        - add_open_service
        - pct
      additionalProperties:
        type: string
    DeliveryServiceIncludes:
      type: object
      properties:
        payment_methods:
          type: array
          items:
            type: integer
            description: Id доступных способов оплаты
          example:
            - 1
    PatchDeliveryServiceRequest:
      $ref: "#/components/schemas/DeliveryServiceFillableProperties"
    SearchDeliveryServicesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDeliveryServicesFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - payment_methods
          example:
            - payment_methods
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDeliveryServicesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор службы доставки
          example: 1
        name:
          type: string
          description: Название
          example: B2Cpl
        legal_info_company_name:
          type: string
          description: Юр. название компании
          nullable: true
          example: Общество с ограниченной ответственностью "Старт-М"
        legal_info_inn:
          type: string
          nullable: true
          description: ИНН
          example: "7727056471"
        legal_info_payment_account:
          type: string
          nullable: true
          description: р/с
          example: "40702810138000027473"
        legal_info_bik:
          type: string
          nullable: true
          description: БИК
          example: "044525225"
        legal_info_bank:
          type: string
          nullable: true
          description: Банк
          example: ОАО Сбербанк России г. Москва
        legal_info_bank_correspondent_account:
          type: string
          nullable: true
          description: К/с банка
          example: "30101810400000000225"
        general_manager_name:
          type: string
          nullable: true
          description: ФИО ген. директора
          example: Козловский Матвей Владимирович
        contract_number:
          type: string
          nullable: true
          description: Номер договора
          example: "123"
        status:
          $ref: "#/components/schemas/LogisticDeliveryServiceStatusEnum"
        comment:
          type: string
          nullable: true
          description: Комментарий
          example: ""
        do_consolidation:
          type: boolean
          description: Консолидация многоместных отправлений?
          example: true
        do_deconsolidation:
          type: boolean
          description: Расконсолидация многоместных отправлений?
          example: true
        do_zero_mile:
          type: boolean
          description: Осуществляет нулевую милю?
          example: true
        do_express_delivery:
          type: boolean
          description: Осуществляет экспресс-доставку?
          example: true
        do_return:
          type: boolean
          description: Принимает возвраты?
          example: true
        do_dangerous_products_delivery:
          type: boolean
          description: Осуществляет доставку опасных грузов?
          example: true
        add_partial_reject_service:
          type: boolean
          description: Добавлять услугу частичного отказ в заказ на доставку?
          example: true
        add_insurance_service:
          type: boolean
          description: Добавлять услугу страхования груза в заказ на доставку?
          example: true
        add_fitting_service:
          type: boolean
          description: Добавлять услугу примерки в заказ на доставку?
          example: true
        add_return_service:
          type: boolean
          description: Добавлять услугу возврата в заказ на доставку?
          example: true
        add_open_service:
          type: boolean
          description: Добавлять услугу вскрытия при получении в заказ на доставку?
          example: true
    SearchDeliveryServicesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryService"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    AddPaymentMethodsToDeliveryServiceRequest:
      type: object
      properties:
        payment_methods:
          type: array
          description: Id добавляемых способов оплаты
          items:
            type: integer
            example: 1
      required:
        - payment_methods
    DeletePaymentMethodFromDeliveryServiceRequest:
      type: object
      properties:
        payment_method:
          type: integer
          description: Id удаляемого способа оплаты
          example: 1
      required:
        - payment_method
    CreateDeliveryServiceDocumentRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceDocumentFillableProperties"
        - $ref: "#/components/schemas/DeliveryServiceDocumentFillableRequiredProperties"
    DeliveryServiceDocumentFillableProperties:
      type: object
      properties:
        delivery_service_id:
          type: integer
          description: Id службы доставки
          example: 1
        name:
          type: string
          description: Название
          example: Договор
    DeliveryServiceDocumentFillableRequiredProperties:
      type: object
      required:
        - delivery_service_id
        - name
      additionalProperties:
        type: string
    DeliveryServiceDocumentResponse:
      type: object
      x-lg-resource-class-name: DeliveryServiceDocumentsResource
      properties:
        data:
          $ref: "#/components/schemas/DeliveryServiceDocument"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeliveryServiceDocument:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceDocumentReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryServiceDocumentFillableProperties"
        - $ref: "#/components/schemas/DeliveryServiceDocumentFillableRequiredProperties"
        - $ref: "#/components/schemas/DeliveryServiceDocumentIncludes"
    DeliveryServiceDocumentReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор документа
          example: 1
        file:
          $ref: "#/components/schemas/FileOrNullProtected"
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - file
        - created_at
        - updated_at
    FileOrNullProtected:
      x-skip-response-validation: true
      type: object
      nullable: true
      description: Information about the file as an object. For the consumer it does
        not matter what keys are inside
      additionalProperties:
        type: string
    DeliveryServiceDocumentIncludes:
      type: object
      properties:
        delivery_service:
          $ref: "#/components/schemas/DeliveryService"
    PatchDeliveryServiceDocumentRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceDocumentFillableProperties"
    MultipartFileUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: Uploaded file
    SearchDeliveryServiceDocumentsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDeliveryServiceDocumentsFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - delivery_service
          example:
            - delivery_service
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDeliveryServiceDocumentsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор документа
          example: 1
        delivery_service_id:
          type: integer
          description: Id службы доставки
          example: 1
        name:
          type: string
          description: Название
          example: Договор
    SearchDeliveryServiceDocumentsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryServiceDocument"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateDeliveryServiceManagerRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceManagerFillableProperties"
        - $ref: "#/components/schemas/DeliveryServiceManagerFillableRequiredProperties"
    DeliveryServiceManagerFillableProperties:
      type: object
      properties:
        delivery_service_id:
          type: integer
          description: Id службы доставки
          example: 1
        name:
          type: string
          description: ФИО менеджера
          example: Иванов Иван Иванович
        phone:
          type: string
          description: Телефон менеджера
          example: "+79031234567"
        email:
          type: string
          description: E-mail менеджера
          example: ivanov@mail.ru
    DeliveryServiceManagerFillableRequiredProperties:
      type: object
      required:
        - delivery_service_id
        - name
        - phone
        - email
      additionalProperties:
        type: string
    DeliveryServiceManagerResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeliveryServiceManager"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeliveryServiceManager:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceManagerReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryServiceManagerFillableProperties"
        - $ref: "#/components/schemas/DeliveryServiceManagerFillableRequiredProperties"
        - $ref: "#/components/schemas/DeliveryServiceManagerIncludes"
    DeliveryServiceManagerReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор менеджера
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    DeliveryServiceManagerIncludes:
      type: object
      properties:
        delivery_service:
          $ref: "#/components/schemas/DeliveryService"
    PatchDeliveryServiceManagerRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryServiceManagerFillableProperties"
    SearchDeliveryServiceManagersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDeliveryServiceManagersFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - delivery_service
          example:
            - delivery_service
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDeliveryServiceManagersFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор менеджера
          example: 1
        delivery_service_id:
          type: integer
          description: Id службы доставки
          example: 1
        name:
          type: string
          description: ФИО менеджера
          example: Иванов Иван Иванович
        phone:
          type: string
          description: Телефон менеджера
          example: "+79031234567"
        email:
          type: string
          description: E-mail менеджера
          example: ivanov@mail.ru
    SearchDeliveryServiceManagersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryServiceManager"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateFederalDistrictRequest:
      allOf:
        - $ref: "#/components/schemas/FederalDistrictFillableProperties"
        - $ref: "#/components/schemas/FederalDistrictFillableRequiredProperties"
    FederalDistrictFillableProperties:
      properties:
        name:
          type: string
          description: Название
          example: Центральный федеральный округ
    FederalDistrictFillableRequiredProperties:
      type: object
      required:
        - name
      additionalProperties:
        type: string
    FederalDistrictResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/FederalDistrict"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    FederalDistrict:
      allOf:
        - $ref: "#/components/schemas/FederalDistrictReadonlyProperties"
        - $ref: "#/components/schemas/FederalDistrictFillableProperties"
        - $ref: "#/components/schemas/FederalDistrictFillableRequiredProperties"
        - $ref: "#/components/schemas/FederalDistrictIncludes"
    FederalDistrictReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор федерального округа
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    FederalDistrictIncludes:
      type: object
      properties:
        regions:
          description: Регионы
          type: array
          items:
            $ref: "#/components/schemas/Region"
    Region:
      allOf:
        - $ref: "#/components/schemas/RegionReadonlyProperties"
        - $ref: "#/components/schemas/RegionFillableProperties"
        - $ref: "#/components/schemas/RegionFillableRequiredProperties"
    RegionReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор региона
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    RegionFillableProperties:
      type: object
      properties:
        federal_district_id:
          type: integer
          description: Id федерального округа
          example: 1
        name:
          type: string
          description: Название
          example: Московская обл
        guid:
          type: string
          description: Id ФИАС
          example: 29251dcf-00a1-4e34-98d4-5c47484a36d4
    RegionFillableRequiredProperties:
      type: object
      required:
        - federal_district_id
        - name
        - guid
      additionalProperties:
        type: string
    PatchFederalDistrictRequest:
      allOf:
        - $ref: "#/components/schemas/FederalDistrictFillableProperties"
    SearchFederalDistrictsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchFederalDistrictsFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - regions
          example:
            - regions
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchFederalDistrictsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор федерального округа
          example: 1
        name:
          type: string
          description: Название
          example: Центральный федеральный округ
    SearchFederalDistrictsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FederalDistrict"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateRegionRequest:
      allOf:
        - $ref: "#/components/schemas/RegionFillableProperties"
        - $ref: "#/components/schemas/RegionFillableRequiredProperties"
    RegionResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Region"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchRegionRequest:
      $ref: "#/components/schemas/RegionFillableProperties"
    SearchRegionsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchRegionsFilter"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchRegionsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор региона
          example: 1
        federal_district_id:
          type: integer
          description: Id федерального округа
          example: 1
        name:
          type: string
          description: Название
          example: Московская обл
        guid:
          type: string
          description: Id ФИАС
          example: 29251dcf-00a1-4e34-98d4-5c47484a36d4
    SearchRegionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Region"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateDeliveryPriceRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryPriceFillableProperties"
        - $ref: "#/components/schemas/DeliveryPriceFillableRequiredProperties"
    DeliveryPriceFillableProperties:
      type: object
      properties:
        federal_district_id:
          type: integer
          description: Id федерального округа
          example: 1
        region_id:
          type: integer
          description: Id региона
          nullable: true
          example: 1
        region_guid:
          type: string
          description: Id ФИАС региона
          nullable: true
          example: 29251dcf-00a1-4e34-98d4-5c47484a36d4
        delivery_service:
          nullable: true
          allOf:
            - type: integer
            - $ref: "#/components/schemas/LogisticDeliveryServiceEnum"
        delivery_method:
          allOf:
            - type: integer
            - $ref: "#/components/schemas/LogisticDeliveryMethodEnum"
        price:
          type: integer
          description: Цена в копейках
          example: 100
    DeliveryPriceFillableRequiredProperties:
      type: object
      required:
        - federal_district_id
        - region_id
        - region_guid
        - delivery_service
        - delivery_method
        - price
      additionalProperties:
        type: string
    DeliveryPriceResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeliveryPrice"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeliveryPrice:
      allOf:
        - $ref: "#/components/schemas/DeliveryPriceReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryPriceFillableProperties"
        - $ref: "#/components/schemas/DeliveryPriceFillableRequiredProperties"
        - $ref: "#/components/schemas/DeliveryPriceIncludes"
    DeliveryPriceReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор цены доставки
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    DeliveryPriceIncludes:
      type: object
      properties:
        federal_district:
          $ref: "#/components/schemas/FederalDistrict"
        region:
          $ref: "#/components/schemas/Region"
    PatchDeliveryPriceRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryPriceFillableProperties"
    SearchDeliveryPricesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDeliveryPricesFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - federal_district
              - region
          example:
            - federal_district
            - region
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDeliveryPricesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор цены доставки
          example: 1
        federal_district_id:
          type: integer
          description: Id федерального округа
          example: 1
        region_id:
          type: integer
          description: Id региона
          example: 1
        region_guid:
          type: string
          description: Id ФИАС
          example: 29251dcf-00a1-4e34-98d4-5c47484a36d4
        delivery_service:
          $ref: "#/components/schemas/LogisticDeliveryServiceEnum"
        delivery_method:
          $ref: "#/components/schemas/LogisticDeliveryMethodEnum"
        price_gte:
          type: integer
          description: Цена от
          example: 100
        price_lte:
          type: integer
          description: Цена до
          example: 200
    SearchDeliveryPricesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryPrice"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    DeliveryKpiResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeliveryKpi"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeliveryKpi:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryKpiFillableProperties"
        - $ref: "#/components/schemas/DeliveryKpiFillableRequiredProperties"
    DeliveryKpiReadonlyProperties:
      type: object
      properties:
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - created_at
        - updated_at
    DeliveryKpiFillableProperties:
      type: object
      properties:
        rtg:
          type: integer
          nullable: true
          description: Ready-To-Go time - время для проверки заказа АОЗ до его передачи в
            MAS (мин)
          example: 30
        ct:
          type: integer
          nullable: true
          description: Confirmation Time - время перехода Отправления из статуса “Ожидает
            подтверждения” в статус “На комплектации” (мин)
          example: 20
        ppt:
          type: integer
          nullable: true
          description: Planned Processing Time - плановое время для прохождения
            Отправлением статусов от “На комплектации” до “Готов к передаче ЛО”
            (мин)
          example: 60
    DeliveryKpiFillableRequiredProperties:
      type: object
      required:
        - rtg
        - ct
        - ppt
      additionalProperties:
        type: string
    PatchDeliveryKpiRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiFillableProperties"
    SearchDeliveryKpiCtRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDeliveryKpiCtFilter"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDeliveryKpiCtFilter:
      type: object
      properties:
        seller_id:
          type: integer
          description: Id продавца
          example: 1
    SearchDeliveryKpiCtResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryKpiCt"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    DeliveryKpiCt:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiCtReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryKpiCtFillableProperties"
        - $ref: "#/components/schemas/DeliveryKpiCtRequiredFillableProperties"
    DeliveryKpiCtReadonlyProperties:
      type: object
      properties:
        seller_id:
          type: integer
          description: Id продавца
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - seller_id
        - created_at
        - updated_at
    DeliveryKpiCtFillableProperties:
      type: object
      properties:
        ct:
          type: integer
          description: Confirmation Time - время перехода Отправления из статуса “Ожидает
            подтверждения” в статус “На комплектации” (мин)
          example: 20
    DeliveryKpiCtRequiredFillableProperties:
      type: object
      required:
        - ct
      additionalProperties:
        type: string
    DeliveryKpiCtResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeliveryKpiCt"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CreateDeliveryKpiCtRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiCtFillableProperties"
        - $ref: "#/components/schemas/DeliveryKpiCtRequiredFillableProperties"
    PatchDeliveryKpiCtRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiCtFillableProperties"
    SearchDeliveryKpiPptRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDeliveryKpiPptFilter"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDeliveryKpiPptFilter:
      type: object
      properties:
        seller_id:
          type: integer
          description: Id продавца
          example: 1
    SearchDeliveryKpiPptResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryKpiPpt"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    DeliveryKpiPpt:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiPptReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryKpiPptFillableProperties"
        - $ref: "#/components/schemas/DeliveryKpiPptFillableRequiredProperties"
    DeliveryKpiPptReadonlyProperties:
      type: object
      properties:
        seller_id:
          type: integer
          description: Id продавца
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - seller_id
        - created_at
        - updated_at
    DeliveryKpiPptFillableProperties:
      type: object
      properties:
        ppt:
          type: integer
          description: Planned Processing Time - плановое время для прохождения
            Отправлением статусов от “На комплектации” до “Готов к передаче ЛО”
            (мин)
          example: 60
    DeliveryKpiPptFillableRequiredProperties:
      type: object
      required:
        - ppt
      additionalProperties:
        type: string
    DeliveryKpiPptResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeliveryKpiPpt"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CreateDeliveryKpiPptRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiPptFillableProperties"
        - $ref: "#/components/schemas/DeliveryKpiPptFillableRequiredProperties"
    PatchDeliveryKpiPptRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryKpiPptFillableProperties"
    GetDeliveryMethodsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryMethod"
      required:
        - data
    DeliveryMethod:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор способа доставки
          example: 1
        name:
          type: string
          description: Название
          example: Курьерская доставка
      required:
        - id
        - name
    GetDeliveryServiceStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryServiceStatus"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeliveryServiceStatus:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор статуса службы доставки
          example: 1
        name:
          type: string
          description: Название
          example: Активен
      required:
        - id
        - name
    GetShipmentMethodsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentMethod"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ShipmentMethod:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор способа отгрузки (доставки на нулевой миле - доставка
            от мерчанта до распределительного центра)
          example: 1
        name:
          type: string
          description: Название
          example: Активен
      required:
        - id
        - name
    PatchCargoRequest:
      allOf:
        - $ref: "#/components/schemas/CargoFillableProperties"
    CargoFillableProperties:
      type: object
      properties:
        status:
          allOf:
            - type: integer
            - $ref: "#/components/schemas/LogisticCargoStatusEnum"
        is_problem:
          type: boolean
          description: Флаг, что у груза проблемы при отгрузке
          example: true
        is_canceled:
          type: boolean
          description: Флаг, что груз отменен
          example: false
        width:
          type: number
          format: float
          description: Ширина
          example: 2
        height:
          type: number
          format: float
          description: Высота
          example: 2
        length:
          type: number
          format: float
          description: Длина
          example: 2
        weight:
          type: number
          format: float
          description: Вес
          example: 2
        shipping_problem_comment:
          type: string
          description: Последнее сообщение мерчанта о проблеме с отгрузкой
    CargoResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Cargo"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Cargo:
      allOf:
        - $ref: "#/components/schemas/CargoReadonlyProperties"
        - $ref: "#/components/schemas/CargoFillableProperties"
        - $ref: "#/components/schemas/CargoFillableRequiredProperties"
        - $ref: "#/components/schemas/CargoIncludes"
    CargoReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: id
          example: 1
        seller_id:
          type: integer
          description: Идентификатор продавца
          example: 30
        store_id:
          type: integer
          description: Идентификатор склада продавца
          example: 30
        delivery_service_id:
          type: integer
          description: Идентификатор сервиса доставки
          example: 20
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        status_at:
          description: Дата установки статуса
          format: date-time
          type: string
          nullable: true
          example: 2021-01-29T12:36:13.000000Z
        is_problem_at:
          description: Дата установки флага проблемного груза
          format: date-time
          type: string
          nullable: true
          example: 2021-01-29T12:36:13.000000Z
        is_canceled_at:
          description: Дата установки флага отмены груза
          format: date-time
          type: string
          nullable: true
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - seller_id
        - store_id
        - delivery_service_id
        - created_at
        - updated_at
        - status_at
        - is_problem_at
        - is_canceled_at
    CargoFillableRequiredProperties:
      required:
        - status
        - is_problem
        - is_canceled
        - width
        - height
        - length
        - weight
        - shipping_problem_comment
      type: object
      additionalProperties:
        type: string
    CargoIncludes:
      type: object
      properties:
        shipments:
          description: Ссылки на отправления в OMS
          type: array
          items:
            $ref: "#/components/schemas/Shipment"
        delivery_service:
          $ref: "#/components/schemas/DeliveryService"
    Shipment:
      allOf:
        - $ref: "#/components/schemas/ShipmentReadonlyProperties"
        - $ref: "#/components/schemas/ShipmentFillableProperties"
        - $ref: "#/components/schemas/ShipmentFillableRequiredProperties"
        - $ref: "#/components/schemas/ShipmentIncludes"
    ShipmentReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: идентификатор
          example: 1
        number:
          type: string
          description: номер отгрузки
          example: "1"
        delivery_id:
          type: integer
          description: ид отправления
          example: 1
        store_id:
          type: integer
          description: ид склада
          example: 1
        status_at:
          type: string
          format: date-time
          description: дата установки статуса
          example: 2020-12-17T21:24:44.000000Z
        cost:
          type: integer
          description: сумма (в копейках) товаров отгрузки (рассчитывается автоматически)
          example: 10000
        width:
          type: integer
          description: ширина (рассчитывается автоматически)
          example: 1
        height:
          type: integer
          description: высота (рассчитывается автоматически)
          example: 1
        length:
          type: integer
          description: длина (рассчитывается автоматически)
          example: 1
        weight:
          type: integer
          description: вес (рассчитывается автоматически)
          example: 1
        created_at:
          type: string
          format: date-time
          description: дата создания
          example: 2020-12-17T21:24:28.000000Z
        updated_at:
          type: string
          format: date-time
          description: дата обновления
          example: 2021-04-23T11:04:57.000000Z
      required:
        - id
        - number
        - delivery_id
        - store_id
        - status_at
        - cost
        - width
        - height
        - length
        - weight
        - created_at
        - updated_at
    ShipmentFillableProperties:
      type: object
      properties:
        status:
          type: integer
          description: статус отгрузки из ShipmentStatusEnum
          example: 2
    ShipmentFillableRequiredProperties:
      required:
        - status
      type: object
      additionalProperties:
        type: string
    ShipmentIncludes:
      type: object
      properties:
        delivery:
          $ref: "#/components/schemas/Delivery"
        order_items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        store:
          $ref: "#/components/schemas/Store"
    Delivery:
      allOf:
        - $ref: "#/components/schemas/DeliveryReadonlyProperties"
        - $ref: "#/components/schemas/DeliveryFillableProperties"
        - $ref: "#/components/schemas/DeliveryFillableRequiredProperties"
        - $ref: "#/components/schemas/DeliveryIncludes"
    DeliveryReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: ID отправления
          example: 1
        order_id:
          type: integer
          description: ID заказа
          example: 1
        number:
          type: string
          description: номер отправления
          example: 1000251-1
        status_at:
          type: string
          format: date-time
          description: дата установки статуса
          example: 2020-12-15T15:26:12.000000Z
        cost:
          type: integer
          description: себестоимость доставки, полученная от службы доставки в копейках
          example: 20000
        width:
          type: integer
          description: ширина
          example: 100
        height:
          type: integer
          description: высота
          example: 100
        length:
          type: integer
          description: длина
          example: 100
        weight:
          type: integer
          description: вес
          example: 30
        created_at:
          type: string
          format: date-time
          description: дата создания
          example: 2020-12-15T15:26:12.000000Z
        updated_at:
          type: string
          format: date-time
          description: дата обновления
          example: 2020-12-15T15:26:12.000000Z
      required:
        - id
        - order_id
        - number
        - status_at
        - cost
        - width
        - height
        - length
        - created_at
        - updated_at
    DeliveryFillableProperties:
      type: object
      properties:
        date:
          type: string
          format: date
          description: желаемая дата доставки
          example: 2020-12-15
        timeslot:
          $ref: "#/components/schemas/Timeslot"
        status:
          type: integer
          nullable: true
          description: статус отправления из DeliveryStatusEnum
          example: 1
    Timeslot:
      type: object
      nullable: true
      description: Слот доставки
      properties:
        id:
          type: string
          description: Идентификатор слота
        from:
          type: string
          description: Время начала
          example: 10:00
        to:
          type: string
          description: Время окончания
          example: 12:00
    DeliveryFillableRequiredProperties:
      required:
        - date
        - timeslot
        - status
      type: object
      additionalProperties:
        type: string
    DeliveryIncludes:
      type: object
      properties:
        shipments:
          type: array
          items:
            $ref: "#/components/schemas/Shipment"
    OrderItem:
      allOf:
        - $ref: "#/components/schemas/OrderItemProperties"
        - $ref: "#/components/schemas/OrderItemIncludes"
    OrderItemProperties:
      type: object
      properties:
        id:
          type: integer
          description: id элемента корзины
        order_id:
          type: integer
          description: ID заказа
          example: 1234
        shipment_id:
          type: integer
          description: ID отгрузки
          example: 1234
        offer_id:
          type: integer
          description: ID оффера
          example: 1234
        name:
          type: string
          description: Название товара
        qty:
          type: number
          description: Кол-во товара
        old_qty:
          type: number
          description: Старое кол-во товара
          nullable: true
        price:
          type: integer
          description: Цена товара (цена * qty - скидки), коп.
          example: 10000
        price_per_one:
          type: integer
          description: Цена единичного товара (в коп.)
          example: 10000
        cost:
          type: integer
          description: Цена товара до скидок (цена * qty), коп.
          example: 10000
        cost_per_one:
          type: integer
          description: Цена единичного товара до скидок (в коп.)
          example: 10000
        product_data:
          type: object
          description: Информация о товаре
          properties:
            weight:
              type: number
              description: Вес нетто товара (кг)
              example: 10
            weight_gross:
              type: number
              description: Вес брутто товара (кг)
              example: 8.5
            width:
              type: number
              description: Ширина товара (мм)
              example: 100
            height:
              type: number
              description: Высота товара (мм)
              example: 100
            length:
              type: number
              description: Длина товара (мм)
              example: 100
            barcode:
              type: string
              description: артикул (EAN)
              example: "14853"
              nullable: true
          required:
            - weight
            - weight_gross
            - width
            - height
            - length
            - barcode
        refund_qty:
          type: number
          description: Количество возвращаемых элементов корзины в заявке
          example: 10
          nullable: true
        created_at:
          type: string
          format: date-time
          description: дата создания
        updated_at:
          type: string
          format: date-time
          description: дата обновления
        is_added:
          type: boolean
          description: флаг, что товар был добавлен
        is_deleted:
          type: boolean
          description: флаг, что товар был удалён
      required:
        - id
        - order_id
        - shipment_id
        - offer_id
        - name
        - qty
        - old_qty
        - price
        - price_per_one
        - cost
        - cost_per_one
        - refund_qty
        - created_at
        - updated_at
    OrderItemIncludes:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
        stock:
          $ref: "#/components/schemas/Stock"
    Stock:
      allOf:
        - $ref: "#/components/schemas/StockReadonlyProperties"
        - $ref: "#/components/schemas/StockFillableProperties"
        - $ref: "#/components/schemas/StockFillableRequiredProperties"
    StockReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор стока
          example: 202
        store_id:
          type: integer
          description: ID склада
          example: 17
        offer_id:
          type: integer
          description: ID товарного предложения
          example: 15856
        created_at:
          type: string
          format: date-time
          description: Дата создания остатка
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        updated_at:
          type: string
          format: date-time
          description: Дата обновления остатка
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
      required:
        - id
        - store_id
        - offer_id
        - created_at
        - updated_at
    StockFillableProperties:
      type: object
      properties:
        qty:
          type: number
          description: Количество товара для резервирования
          nullable: true
          example: 1
    StockFillableRequiredProperties:
      type: object
      required:
        - qty
      additionalProperties:
        type: string
    Store:
      allOf:
        - $ref: "#/components/schemas/StoreReadonlyProperties"
        - $ref: "#/components/schemas/StoreFillableProperties"
        - $ref: "#/components/schemas/StoreFillableRequiredProperties"
        - $ref: "#/components/schemas/StoreIncludes"
    StoreReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор склада
          example: 1
        created_at:
          type: string
          format: date-time
          description: Время создания склада
          example: 2021-01-15T14:55:35.000000Z
        updated_at:
          type: string
          format: date-time
          description: Время обновления склада
          example: 2021-01-15T14:55:35.000000Z
      required:
        - id
        - created_at
        - updated_at
    StoreFillableProperties:
      type: object
      properties:
        seller_id:
          type: integer
          description: ID продавца
          nullable: true
          example: 2
        xml_id:
          nullable: true
          type: string
          description: ID склада у продавца
          example: "015"
        active:
          type: boolean
          description: Флаг активности склада
          example: true
        name:
          type: string
          description: Название
          example: Сокольники
        address:
          $ref: "#/components/schemas/Address"
        timezone:
          type: string
          description: Часовой пояс
          example: Europe/Moscow
    StoreFillableRequiredProperties:
      required:
        - seller_id
        - xml_id
        - active
        - name
        - timezone
      type: object
      additionalProperties:
        type: string
    StoreIncludes:
      type: object
      properties:
        workings:
          type: array
          items:
            $ref: "#/components/schemas/StoreWorking"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/StoreContact"
        contact:
          $ref: "#/components/schemas/StoreContact"
        pickup_times:
          type: array
          items:
            $ref: "#/components/schemas/StorePickupTime"
    StoreWorking:
      allOf:
        - $ref: "#/components/schemas/StoreWorkingReadonlyProperties"
        - $ref: "#/components/schemas/StoreWorkingFillableProperties"
        - $ref: "#/components/schemas/StoreWorkingFillableRequiredProperties"
    StoreWorkingReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор записи о времени работы
          example: 1
        created_at:
          type: string
          format: date-time
          description: Время создания записи о времени работы
          example: 2021-01-15T14:55:35.000000Z
        updated_at:
          type: string
          format: date-time
          description: Время обновления записи о времени работы
          example: 2021-01-15T14:55:35.000000Z
      required:
        - id
        - created_at
        - updated_at
    StoreWorkingFillableProperties:
      type: object
      properties:
        store_id:
          type: integer
          description: ID склада
          example: 17
        active:
          type: boolean
          description: Флаг активности дня работы склада
          example: false
        day:
          type: integer
          description: День недели (1-7)
          example: 1
        working_start_time:
          nullable: true
          type: string
          description: Время начала работы склада (00:00)
          example: 00:00
        working_end_time:
          nullable: true
          type: string
          description: Время конца работы склада (00:00)
          example: 00:00
    StoreWorkingFillableRequiredProperties:
      required:
        - store_id
        - active
        - day
        - working_start_time
        - working_end_time
      type: object
      additionalProperties:
        type: string
    StoreContact:
      allOf:
        - $ref: "#/components/schemas/StoreContactReadonlyProperties"
        - $ref: "#/components/schemas/StoreContactFillableProperties"
        - $ref: "#/components/schemas/StoreContactFillableRequiredProperties"
    StoreContactReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор контактного лица для склада
          example: 1
        created_at:
          type: string
          format: date-time
          description: Время создания контактного лица для склада
          example: 2021-01-15T14:55:35.000000Z
        updated_at:
          type: string
          format: date-time
          description: Время обновления контактного лица для склада
          example: 2021-01-15T14:55:35.000000Z
      required:
        - id
        - created_at
        - updated_at
    StoreContactFillableProperties:
      type: object
      properties:
        store_id:
          type: integer
          description: ID склада
          example: 17
        name:
          nullable: true
          type: string
          description: Имя контактного лица
          example: Иванов Иван Иванович
        phone:
          nullable: true
          type: string
          description: Телефон контактного лица
          example: "+79876543210"
        email:
          nullable: true
          type: string
          description: Email контактного лица
          example: ivanov@example.com
    StoreContactFillableRequiredProperties:
      required:
        - store_id
        - name
        - phone
        - email
      type: object
      additionalProperties:
        type: string
    StorePickupTime:
      allOf:
        - $ref: "#/components/schemas/StorePickupTimeReadonlyProperties"
        - $ref: "#/components/schemas/StorePickupTimeFillableProperties"
        - $ref: "#/components/schemas/StorePickupTimeFillableRequiredProperties"
    StorePickupTimeReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор записи о времени отгрузки
          example: 1
        created_at:
          type: string
          format: date-time
          description: Время создания записи о времени отгрузки
          example: 2021-01-15T14:55:35.000000Z
        updated_at:
          type: string
          format: date-time
          description: Время обновления записи о времени отгрузки
          example: 2021-01-15T14:55:35.000000Z
      required:
        - id
        - created_at
        - updated_at
    StorePickupTimeFillableProperties:
      type: object
      properties:
        store_id:
          type: integer
          description: ID склада
          example: 17
        day:
          type: integer
          description: День недели (1-7)
          example: 3
        pickup_time_code:
          nullable: true
          type: string
          description: Код времени отгрузки у службы доставки
          example: 12-14
        pickup_time_start:
          type: string
          description: Время начала отгрузки
          example: 14:00:00
        pickup_time_end:
          type: string
          description: Время окончания отгрузки
          example: 18:00:00
        delivery_service:
          nullable: true
          type: integer
          description: Служба доставки (если указана, то данная информация переопределяет
            данные дня недели без службы доставки)
          example: 17
    StorePickupTimeFillableRequiredProperties:
      required:
        - store_id
        - day
        - pickup_time_code
        - pickup_time_start
        - pickup_time_end
        - delivery_service
      type: object
      additionalProperties:
        type: string
    SearchCargoRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          allOf:
            - type: object
              additionalProperties:
                type: string
            - $ref: "#/components/schemas/SearchCargoFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - shipments
              - delivery_service
          example:
            - shipments
            - delivery_service
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCargoFilter:
      type: object
      properties:
        seller_id:
          type: integer
          description: Идентификатор продавца
          example: 30
        store_id:
          type: integer
          description: Идентификатор склада продавца
          example: 30
        status:
          type: integer
          description: Статус
          example: 1
    SearchCargoResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Cargo"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CargoOrderResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CargoOrder"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CargoOrder:
      allOf:
        - $ref: "#/components/schemas/CargoOrderReadonlyProperties"
        - $ref: "#/components/schemas/CargoOrderFillableProperties"
        - $ref: "#/components/schemas/CargoOrderFillableRequiredProperties"
        - $ref: "#/components/schemas/CargoOrderIncludes"
    CargoOrderReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: id
          example: 1
        cdek_intake_number:
          type: string
          description: Номер заявки СДЭК на вызов курьера
          example: example
        external_id:
          type: string
          description: Номер заявки во внешней системе
          example: example
        error_external_id:
          type: string
          description: Текст последней ошибки при создании заявки на вызов курьера для
            забора груза в службе доставки
          example: example
      required:
        - id
        - cdek_intake_number
        - external_id
        - error_external_id
    CargoOrderFillableProperties:
      type: object
      properties:
        status:
          allOf:
            - type: integer
            - $ref: "#/components/schemas/LogisticCargoOrderStatusEnum"
        cargo_id:
          type: integer
          description: Идентификатор груза
          example: 30
        timeslot_id:
          type: string
          description: Идентификатор таймслота
          example: "54654630"
        timeslot_from:
          description: Дата забора груза
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        timeslot_to:
          description: Дата забора груза
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        date:
          description: Дата забора груза
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
    CargoOrderFillableRequiredProperties:
      required:
        - status
        - cargo_id
        - timeslot_id
        - timeslot_from
        - timeslot_to
        - date
      type: object
      additionalProperties:
        type: string
    CargoOrderIncludes:
      type: object
      properties:
        cargo:
          $ref: "#/components/schemas/Cargo"
    SearchCargoOrdersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          allOf:
            - type: object
              additionalProperties:
                type: string
            - $ref: "#/components/schemas/SearchCargoOrdersFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - cargo
          example:
            - cargo
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCargoOrdersFilter:
      type: object
      properties:
        date:
          description: Дата забора груза
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        timeslot_id:
          type: string
          description: Идентификатор таймслота
          example: "54654630"
        status:
          type: integer
          description: Статус
          example: 1
    SearchCargoOrdersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CargoOrder"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchOrdersRequest:
      type: object
      properties:
        sort:
          type: array
          items:
            type: string
            enum:
              - number
              - created_at
              - price
              - delivery_price
        filter:
          type: object
          description: Большая часть доступных фильтров указана в /orders:meta
          properties:
            deliveries.shipments.store_id:
              type: array
              items:
                type: integer
                description: Продавец отгрузки
        include:
          type: array
          items:
            type: string
            description: orderItems.* будет добавляться только если загрузить элементы
              корзины через один из доступных способов (пока это только
              deliveries.shipments.orderItems)
            enum:
              - files
              - deliveries
              - deliveries.shipments
              - deliveries.shipments.orderItems
              - deliveries.shipments.store
              - responsible
              - customer
              - customer.user
              - orderItems.product
              - orderItems.product.images
              - orderItems.product.categories
              - orderItems.product.brand
              - orderItems.stock
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchOrdersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Order:
      allOf:
        - $ref: "#/components/schemas/OrderReadonlyProperties"
        - $ref: "#/components/schemas/OrderFillableProperties"
        - $ref: "#/components/schemas/OrderFillableRequiredProperties"
        - $ref: "#/components/schemas/OrderDeliveryFillableProperties"
        - $ref: "#/components/schemas/OrderIncludes"
    OrderReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: ID заказа
          example: 1
        number:
          type: string
          description: номер заказа
          example: "1000001"
        customer_id:
          type: integer
          description: id покупателя
          example: 5
        customer_email:
          type: string
          description: email покупателя
          example: example@domain.ru
        cost:
          type: integer
          description: стоимость (без учета скидки) (рассчитывается автоматически) в коп.
          example: 10000
        price:
          type: integer
          description: стоимость (с учетом скидок) (рассчитывается автоматически) в коп.
          example: 10000
        promo_code:
          type: string
          description: Использованный промокод
          example: promo_code
          nullable: true
        source:
          type: integer
          description: источник взаимодействия из OrdersOrderSourceEnum
          example: 1
        status_at:
          type: string
          description: дата установки статуса заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        payment_status:
          type: integer
          description: статус оплаты из OrdersPaymentStatusEnum
          example: 1
        payment_status_at:
          type: string
          description: дата установки статуса оплаты
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        payed_at:
          type: string
          format: date-time
          description: Дата оплаты
          example: 2020-12-15T15:21:34.000000Z
          nullable: true
        payment_expires_at:
          type: string
          format: date-time
          description: Дата, до которой нужно провести оплату
          nullable: true
          example: 2020-12-15T15:21:34.000000Z
        payment_method:
          type: integer
          description: метод оплаты из PaymentMethodEnum
        payment_system:
          type: integer
          description: система оплаты из PaymentSystemEnum
        payment_external_id:
          type: string
          description: ID оплаты во внешней системе
          nullable: true
        is_problem_at:
          type: string
          description: дата установки флага проблемного заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        is_editable:
          type: boolean
          description: флаг, что заказ может быть изменён
        is_changed:
          type: boolean
          description: флаг, что заказ был изменён
        is_expired:
          type: boolean
          description: флаг, что заказ просроченный
        is_expired_at:
          type: string
          description: дата установки флага просроченного заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        is_return:
          type: boolean
          description: флаг, что заказ возвращен
        is_return_at:
          type: string
          description: дата установки флага возвращенного заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        is_partial_return:
          type: boolean
          description: флаг, что заказ частично возвращен
        is_partial_return_at:
          type: string
          description: дата установки флага частично возвращенного заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        created_at:
          type: string
          description: дата создания заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        updated_at:
          type: string
          description: дата обновления заказа
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
      required:
        - id
        - number
        - customer_id
        - customer_email
        - cost
        - price
        - promo_code
        - source
        - status_at
        - payment_status
        - payment_status_at
        - payed_at
        - payment_expires_at
        - payment_method
        - payment_system
        - payment_external_id
        - is_problem_at
        - is_expired
        - is_expired_at
        - is_return
        - is_return_at
        - is_partial_return
        - is_partial_return_at
        - created_at
        - updated_at
    OrderFillableProperties:
      type: object
      properties:
        status:
          type: integer
          description: статус заказа из OrdersOrderStatusEnum
          example: 1
        client_comment:
          type: string
          description: комментарий менеджера
          example: покупатель хамит
          nullable: true
        receiver_name:
          type: string
          description: имя получателя
          example: Иванов Иван Иванович
          nullable: true
        receiver_phone:
          type: string
          description: телефон получателя
          example: "+79998887766"
          nullable: true
        receiver_email:
          type: string
          description: e-mail получателя
          example: ivanov@example.ru
          nullable: true
        is_problem:
          type: boolean
          description: флаг, что заказ проблемный
          example: true
          nullable: true
        problem_comment:
          type: string
          description: последнее сообщение продавца о проблеме со сборкой
          example: нет части корзины
          nullable: true
    OrderFillableRequiredProperties:
      required:
        - status
        - client_comment
        - receiver_name
        - receiver_phone
        - receiver_email
        - is_problem
        - problem_comment
      type: object
      additionalProperties:
        type: string
    OrderDeliveryFillableProperties:
      type: object
      properties:
        delivery_service:
          type: integer
          description: служба доставки
          example: 11
        delivery_method:
          type: integer
          description: метод доставки
          example: 1
        delivery_cost:
          type: integer
          description: стоимость доставки (без учета скидки) в коп.
          example: 20000
        delivery_price:
          type: integer
          description: стоимость доставки (с учетом скидки) в коп.
          example: 20000
        delivery_point_id:
          type: integer
          description: ID пункта самовывоза из сервиса логистики
          example: 55
          nullable: true
        delivery_address:
          $ref: "#/components/schemas/Address"
        delivery_comment:
          type: string
          description: комментарий к доставке
          example: Остановиться перед воротами
          nullable: true
    OrderIncludes:
      type: object
      properties:
        deliveries:
          type: array
          items:
            $ref: "#/components/schemas/Delivery"
        customer:
          $ref: "#/components/schemas/Customer"
        responsible:
          $ref: "#/components/schemas/AdminUser"
        files:
          type: array
          items:
            $ref: "#/components/schemas/OrderFile"
    Customer:
      allOf:
        - $ref: "#/components/schemas/CustomerReadonlyProperties"
        - $ref: "#/components/schemas/CustomerFillableProperties"
        - $ref: "#/components/schemas/CustomerFillableRequiredProperties"
        - $ref: "#/components/schemas/CustomerIncludes"
    CustomerReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор покупателя
          example: 1
        avatar:
          type: string
          description: Ссылка на аватар
          nullable: true
        delete_request:
          type: string
          format: date-time
          description: Дата и время запроса на удаление персональных данных
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Дата создания
          example: 2020-12-17T21:24:28.000000Z
        updated_at:
          type: string
          format: date-time
          description: Дата обновления
          example: 2020-12-17T21:24:28.000000Z
      required:
        - id
        - avatar
        - delete_request
        - created_at
        - updated_at
    CustomerFillableProperties:
      type: object
      properties:
        user_id:
          type: integer
          description: Идентификатор пользователя
          example: 42
          nullable: true
        status_id:
          type: integer
          description: Идентификатор статуса пользователя
          example: 2
          nullable: true
        manager_id:
          type: integer
          description: Идентификатор менеджера
          example: 4
          nullable: true
        yandex_metric_id:
          type: string
          description: Идентификатор пользователя в YandexMetric
          example: C001
          nullable: true
        google_analytics_id:
          type: string
          description: Идентификатор пользователя в GoogleAnalytics
          example: G001
          nullable: true
        active:
          type: boolean
          description: Активность пользователя
          example: true
        email:
          type: string
          description: Email
          example: test@mail.ru
          nullable: true
        phone:
          type: string
          description: Телефон
          example: "+79191000000"
        last_name:
          type: string
          description: Фамилия
          example: Иванов
          nullable: true
        first_name:
          type: string
          description: Имя
          example: Иван
          nullable: true
        middle_name:
          type: string
          description: Отчество
          example: Иванович
          nullable: true
        gender:
          type: integer
          description: Пол из CustomerGenderEnum
          example: 1
          nullable: true
        create_by_admin:
          type: boolean
          description: Пользователь создан администратором
          example: false
        city:
          type: string
          description: Город клиента
          example: Москва
          nullable: true
        birthday:
          type: string
          format: date
          description: День рождения
          example: 2020-12-15
          nullable: true
        last_visit_date:
          type: string
          description: Дата последней авторизации
          nullable: true
        comment_status:
          type: string
          description: Коментарий к статусу клиента
          nullable: true
        timezone:
          type: string
          description: Временная зона
          example: Europe/Moscow
        is_deleted:
          type: boolean
          description: Удалены ли данные пользователя
          example: true
        error_delete:
          type: string
          description: Ошибки при удалении персональных данных пользователя
          example: Oms cannot delete customer personal data, order 123
          nullable: true
    CustomerFillableRequiredProperties:
      type: object
      required:
        - user_id
        - status_id
        - manager_id
        - yandex_metric_id
        - google_analytics_id
        - email
        - phone
        - last_name
        - first_name
        - middle_name
        - gender
        - create_by_admin
        - city
        - birthday
        - last_visit_date
        - comment_status
        - timezone
      additionalProperties:
        type: string
    CustomerIncludes:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAddress"
        status:
          allOf:
            - $ref: "#/components/schemas/CustomerStatus"
        user:
          allOf:
            - $ref: "#/components/schemas/User"
    CustomerAddress:
      allOf:
        - $ref: "#/components/schemas/CustomerAddressReadonlyProperties"
        - $ref: "#/components/schemas/CustomerAddressFillableProperties"
        - $ref: "#/components/schemas/CustomerAddressFillableRequiredProperties"
    CustomerAddressReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор адреса
          example: 1
      required:
        - id
    CustomerAddressFillableProperties:
      type: object
      properties:
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 11
        default:
          type: boolean
          description: Является адресом по-умолчанию
          example: true
        address:
          type: object
          properties:
            address_string:
              type: string
              description: Строка с полным описанием адреса
              example: Москва, Зеленоград, ул Юности, д 20
            post_index:
              type: string
              description: Почтовый индекс
              nullable: true
              example: "124321"
            country_code:
              type: string
              description: Код страны
              nullable: true
              example: "4"
            region:
              type: string
              description: Регион
              nullable: true
              example: Московская область
            region_guid:
              type: string
              description: Код ФИАС региона
              nullable: true
              example: "4"
            area:
              type: string
              description: Район
              nullable: true
              example: Правобережный
            area_guid:
              type: string
              description: Код ФИАС района
              nullable: true
              example: "12"
            city:
              type: string
              description: Город
              nullable: true
              example: Москва
            city_guid:
              type: string
              description: Код ФИАС города
              example: "31"
            street:
              type: string
              description: Улица
              nullable: true
              example: Юности
            house:
              type: string
              description: Дом
              nullable: true
              example: "3"
            block:
              type: string
              description: Строение
              nullable: true
              example: А
            porch:
              type: string
              description: Подъезд
              nullable: true
              example: "2"
            intercom:
              type: string
              description: Домофон
              nullable: true
              example: 14124K
            floor:
              type: string
              description: Этаж
              nullable: true
              example: "3"
            flat:
              type: string
              description: Квартира
              nullable: true
              example: "62"
            comment:
              type: string
              description: Комментарий к адресу
              nullable: true
              example: Синий дом, стоит буквой Г
            geo_lat:
              type: number
              description: Ширина
              nullable: true
              example: 40.7143528
            geo_lon:
              type: number
              description: Долгота
              nullable: true
              example: 74.0059731
          required:
            - address_string
            - city_guid
    CustomerAddressFillableRequiredProperties:
      type: object
      required:
        - customer_id
        - default
      additionalProperties:
        type: string
    CustomerStatus:
      allOf:
        - $ref: "#/components/schemas/CustomerStatusReadonlyProperties"
        - $ref: "#/components/schemas/CustomerStatusFillableProperties"
        - $ref: "#/components/schemas/CustomerStatusFillableRequiredProperties"
    CustomerStatusReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор статуса
          example: 1
      required:
        - id
    CustomerStatusFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название статуса
          example: Новый
    CustomerStatusFillableRequiredProperties:
      type: object
      required:
        - name
      additionalProperties:
        type: string
    User:
      allOf:
        - $ref: "#/components/schemas/UserReadonlyProperties"
        - $ref: "#/components/schemas/UserFillableProperties"
        - $ref: "#/components/schemas/UserFillableRequiredProperties"
    UserReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор пользователя
          example: 1
        created_at:
          description: Дата регистрации
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    UserFillableProperties:
      type: object
      properties:
        active:
          type: boolean
          description: Активен
          example: true
        login:
          type: string
          description: Логин
          example: TestLogin
    UserFillableRequiredProperties:
      type: object
      required:
        - active
        - login
      additionalProperties:
        type: string
    AdminUser:
      allOf:
        - $ref: "#/components/schemas/AdminUserReadonlyProperties"
        - $ref: "#/components/schemas/AdminUserFillableProperties"
        - $ref: "#/components/schemas/AdminUserFillableRequiredProperties"
        - $ref: "#/components/schemas/AdminUserIncludes"
    AdminUserReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор пользователя
          example: 1
        full_name:
          type: string
          description: Полное ФИО
          example: Иванов Иван Иванович
        short_name:
          type: string
          description: Сокращенное ФИО
          example: Иванов И.И.
        created_at:
          description: Дата регистрации
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - full_name
        - short_name
        - created_at
        - updated_at
    AdminUserFillableProperties:
      type: object
      properties:
        active:
          type: boolean
          description: Активен
          example: true
        login:
          type: string
          description: Логин
          example: TestLogin
        last_name:
          type: string
          description: Фамилия
          example: Иванов
          nullable: true
        first_name:
          type: string
          description: Имя
          example: Иван
          nullable: true
        middle_name:
          type: string
          description: Отчество
          example: Иванович
          nullable: true
        email:
          type: string
          description: Email
          example: test@mail.ru
        phone:
          type: string
          description: Телефон
          example: "+79191000000"
        timezone:
          type: string
          description: Временная зона
          example: Europe/Moscow
    AdminUserFillableRequiredProperties:
      type: object
      required:
        - active
        - login
        - last_name
        - first_name
        - middle_name
        - email
        - phone
        - timezone
      additionalProperties:
        type: string
    AdminUserIncludes:
      type: object
      properties:
        roles:
          description: Роли пользователя. Объект, в котором ключ - ID роли (см.
            UnitsAdminAdminUserRoleEnum)
          type: array
          items:
            $ref: "#/components/schemas/AdminUserRoleIncluded"
    AdminUserRoleIncluded:
      allOf:
        - $ref: "#/components/schemas/AdminUserRoleIncludedReadonlyProperties"
        - $ref: "#/components/schemas/AdminUserRoleIncludedFillableProperties"
    AdminUserRoleIncludedReadonlyProperties:
      type: object
      properties:
        id:
          description: ID роли
          type: integer
          example: 1
      required:
        - id
    AdminUserRoleIncludedFillableProperties:
      type: object
      properties:
        title:
          description: Название роли
          type: string
          example: customer
        expires:
          description: Время жизни роли
          format: date-time
          nullable: true
          type: string
          example: 2021-01-29T12:36:13.000000Z
    OrderFile:
      type: object
      properties:
        id:
          type: integer
          description: ID файла
          example: 1
        order_id:
          type: integer
          description: ID заказа
          example: 1
        original_name:
          type: string
          description: Оригинальное название файла
          example: Картинка 1.jpg
        file:
          $ref: "#/components/schemas/FileProtected"
        created_at:
          type: string
          format: date-time
          description: дата создания файла
          example: 2021-06-11T11:27:10.000000Z
        updated_at:
          type: string
          format: date-time
          description: дата обновления файла
          example: 2021-06-11T11:27:10.000000Z
      required:
        - id
        - order_id
        - original_name
        - file
        - created_at
        - updated_at
    OrderResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Order"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchOrderRequest:
      allOf:
        - $ref: "#/components/schemas/OrderFillableProperties"
    PatchOrderDeliveryRequest:
      allOf:
        - $ref: "#/components/schemas/OrderDeliveryFillableProperties"
    OrderItemsAddRequest:
      type: object
      properties:
        order_items:
          type: array
          items:
            type: object
            properties:
              offer_id:
                type: integer
                description: Идентификатор товарного предолжения
              qty:
                type: number
                description: Количество товара
            required:
              - offer_id
              - qty
      required:
        - order_items
    OrderItemsAddResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Order"
      required:
        - data
    OrderItemsDeleteRequest:
      type: object
      properties:
        offer_ids:
          type: array
          items:
            type: integer
      required:
        - offer_ids
    OrderItemChangeQtyRequest:
      type: object
      properties:
        order_items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: integer
                description: Идентификатор элемента заказа
              qty:
                type: number
                description: Новое количество
            required:
              - item_id
              - qty
      required:
        - order_items
    OrderItemChangeQtyResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
      required:
        - data
    OrderChangePaymentSystemRequest:
      type: object
      properties:
        payment_system:
          type: integer
          description: Система оплаты из PaymentSystemEnum
      required:
        - payment_system
    OrderAttachFileResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/OrderFile"
      required:
        - data
    OrderDeleteFilesRequest:
      type: object
      properties:
        file_ids:
          type: array
          items:
            type: integer
      required:
        - file_ids
    GetOrderStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrderStatus"
      required:
        - data
    OrderStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из OrdersOrderStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    GetOrderSourcesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrderSource"
    OrderSource:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из OrdersOrderSourceEnum
        name:
          type: string
          description: Название источника взаимодействия
      required:
        - id
        - name
    GetPaymentMethodsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethod"
      required:
        - data
    PaymentMethod:
      type: object
      properties:
        id:
          type: integer
          description: ID метода из OrdersPaymentMethodEnum
        name:
          type: string
          description: Название метода
      required:
        - id
        - name
    GetPaymentStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PaymentStatus"
      required:
        - data
    PaymentStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из OrdersPaymentStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    GetDeliveryStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryStatus"
    DeliveryStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из OrdersDeliveryStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    GetShipmentStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentStatus"
    ShipmentStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из OrdersShipmentStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    RefundStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RefundStatus"
      required:
        - data
    RefundStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из RefundStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    CreateRefundReasonRequest:
      allOf:
        - $ref: "#/components/schemas/RefundReasonFillableProperties"
        - $ref: "#/components/schemas/RefundReasonFillableRequiredProperties"
    RefundReasonFillableProperties:
      type: object
      properties:
        code:
          type: string
          description: Символьный код причины возврата
          example: LOW_QUALITY
        name:
          type: string
          description: Название причины возврата
          example: Низкое качество
        description:
          type: string
          description: Детальное описание причины возврата
          nullable: true
          example: Низкое качество товара ...
    RefundReasonFillableRequiredProperties:
      required:
        - code
        - name
        - description
      type: object
      additionalProperties:
        type: string
    RefundReasonResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/RefundReason"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    RefundReason:
      allOf:
        - $ref: "#/components/schemas/RefundReasonReadonlyProperties"
        - $ref: "#/components/schemas/RefundReasonFillableProperties"
        - $ref: "#/components/schemas/RefundReasonFillableRequiredProperties"
    RefundReasonReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: идентификатор
          example: 1
        created_at:
          type: string
          format: date-time
          description: дата создания
          example: 2020-12-17T21:24:28.000000Z
        updated_at:
          type: string
          format: date-time
          description: дата обновления
          example: 2021-04-23T11:04:57.000000Z
      required:
        - id
        - created_at
        - updated_at
    RefundReasonsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RefundReason"
      required:
        - data
    PatchRefundReasonRequest:
      allOf:
        - $ref: "#/components/schemas/RefundReasonFillableProperties"
    PatchShipmentRequest:
      allOf:
        - $ref: "#/components/schemas/ShipmentFillableProperties"
    ShipmentResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Shipment"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchDeliveryRequest:
      allOf:
        - $ref: "#/components/schemas/DeliveryFillableProperties"
    DeliveryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Delivery"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    SettingsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Setting"
    Setting:
      allOf:
        - $ref: "#/components/schemas/SettingReadonlyProperties"
        - $ref: "#/components/schemas/SettingFillableProperties"
        - $ref: "#/components/schemas/SettingFillableRequiredProperties"
    SettingReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: ID параметра
          example: 1
        code:
          type: string
          description: символьный код параметра
          example: timeForPayment
        created_at:
          type: string
          format: date-time
          description: дата создания параметра
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
        updated_at:
          type: string
          format: date-time
          description: дата обновления параметра
          example: 2021-06-11T11:27:10.000000Z
          nullable: true
      required:
        - id
        - code
        - created_at
        - updated_at
    SettingFillableProperties:
      type: object
      properties:
        value:
          type: string
          description: значение параметра
          example: "30"
        name:
          type: string
          description: название параметра
          example: Срок для оплаты заказа клиентов
    SettingFillableRequiredProperties:
      type: object
      required:
        - value
        - name
      additionalProperties:
        type: string
    PatchSeveralSettingsRequest:
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: "#/components/schemas/PatchSettingRequest"
    PatchSettingRequest:
      allOf:
        - $ref: "#/components/schemas/IncludeId"
        - $ref: "#/components/schemas/SettingFillableProperties"
    IncludeId:
      type: object
      properties:
        id:
          type: integer
          description: ID параметра
          example: 1
    CreateRefundRequest:
      allOf:
        - $ref: "#/components/schemas/RefundCreateOnlyProperties"
        - $ref: "#/components/schemas/RefundFillableProperties"
        - $ref: "#/components/schemas/RefundOnlyCreateRequestProperties"
        - $ref: "#/components/schemas/RefundRequiredProperties"
    RefundCreateOnlyProperties:
      type: object
      properties:
        order_id:
          type: integer
          description: идентификатор заказа
          example: 1
        manager_id:
          type: integer
          description: идентификатор администратора (если автором был администратор)
          example: 1
          nullable: true
        source:
          type: integer
          description: источник взаимодействия (канал)
          example: 1
        user_comment:
          type: string
          description: комментарий пользователя
          example: Прошу провести возврат средств
    RefundFillableProperties:
      type: object
      properties:
        status:
          type: integer
          description: статус заявки на возврат из RefundStatusEnum
          example: 1
        responsible_id:
          type: integer
          description: идентификатор ответственного
          example: 1
          nullable: true
        rejection_comment:
          type: string
          description: причина отклонения
          example: Заявка на возврат отклонена по причине ...
          nullable: true
    RefundOnlyCreateRequestProperties:
      type: object
      properties:
        order_items:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: идентификатор элемента корзины
                example: 1
              qty:
                type: number
                description: количество возвращаемых позиций
                example: 10
        refund_reason_ids:
          type: array
          items:
            type: integer
            description: идентификатор причины возврата
            example: 1
    RefundRequiredProperties:
      type: object
      required:
        - user_comment
        - source
        - order_id
        - order_items
        - refund_reason_ids
      additionalProperties:
        type: string
    RefundResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Refund"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Refund:
      allOf:
        - $ref: "#/components/schemas/RefundReadonlyProperties"
        - $ref: "#/components/schemas/RefundFillableProperties"
        - $ref: "#/components/schemas/RefundFillableRequiredProperties"
        - $ref: "#/components/schemas/RefundCreateOnlyProperties"
        - $ref: "#/components/schemas/RefundCreateOnlyRequiredProperties"
        - $ref: "#/components/schemas/RefundIncludes"
    RefundReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: идентификатор
          example: 1
        price:
          type: integer
          description: сумма возврата, коп.
          example: 10000
        is_partial:
          type: boolean
          description: является заявкой на частичный возврат
          example: true
        created_at:
          type: string
          format: date-time
          description: дата создания
          example: 2020-12-17T21:24:28.000000Z
        updated_at:
          type: string
          format: date-time
          description: дата обновления
          example: 2021-04-23T11:04:57.000000Z
      required:
        - id
        - price
        - is_partial
        - created_at
        - updated_at
    RefundFillableRequiredProperties:
      type: object
      required:
        - status
        - responsible_id
        - rejection_comment
      additionalProperties:
        type: string
    RefundCreateOnlyRequiredProperties:
      type: object
      required:
        - order_id
        - manager_id
        - source
        - user_comment
      additionalProperties:
        type: string
    RefundIncludes:
      type: object
      properties:
        order:
          $ref: "#/components/schemas/Order"
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        reasons:
          type: array
          items:
            $ref: "#/components/schemas/RefundReason"
        files:
          type: array
          items:
            $ref: "#/components/schemas/RefundFile"
    RefundFile:
      type: object
      properties:
        id:
          type: integer
          description: идентификатор
          example: 1
        refund_id:
          type: integer
          description: идентификатор заявки на возврат
          example: 1
        original_name:
          type: string
          description: Оригинальное название файла
          example: example.doc
        file:
          $ref: "#/components/schemas/FileProtected"
        created_at:
          type: string
          format: date-time
          description: дата загрузки файла
          example: 2020-12-17T21:24:28.000000Z
        updated_at:
          type: string
          format: date-time
          description: дата обновления файла
          example: 2021-04-23T11:04:57.000000Z
      required:
        - id
        - refund_id
        - original_name
        - file
        - created_at
        - updated_at
    SearchRefundsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          type: array
          items:
            type: string
            enum:
              - order
              - items
              - items.product
              - reasons
              - files
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchRefundsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Refund"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    PatchRefundRequest:
      allOf:
        - $ref: "#/components/schemas/RefundFillableProperties"
    RefundFileResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/RefundFile"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeleteRefundFilesRequest:
      type: object
      properties:
        file_ids:
          type: array
          items:
            type: integer
            description: Идентификатор вложения
            example: 1
    SearchBasketItemsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchBasketItemsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BasketItem"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    BasketItem:
      type: object
      properties:
        id:
          type: integer
          description: Basket item ID
        basket_id:
          type: integer
          description: Basket ID
          example: 1234
        offer_id:
          type: integer
          description: Offer ID
          example: 1234
        product_id:
          type: integer
          description: Product ID
          example: 1234
        qty:
          type: number
          description: Product quantity
        created_at:
          type: string
          format: date-time
          description: Date of creation
        updated_at:
          type: string
          format: date-time
          description: Date of update
      required:
        - id
        - basket_id
        - offer_id
        - product_id
        - qty
        - created_at
        - updated_at
    SearchBasketsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchBasketsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Basket"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Basket:
      allOf:
        - $ref: "#/components/schemas/BasketReadonlyProperties"
        - $ref: "#/components/schemas/BasketIncludes"
    BasketReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Basket ID
        customer_id:
          type: integer
          description: Customer ID
        created_at:
          type: string
          format: date-time
          description: Date of creation
        updated_at:
          type: string
          format: date-time
          description: Date of update
        promo_code:
          type: string
          description: The applied promo code
          nullable: true
          example: TEST
      required:
        - id
        - customer_id
        - created_at
        - updated_at
        - promo_code
    BasketIncludes:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/BasketItem"
    SearchFailedJobsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchFailedJobsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FailedJob"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    FailedJob:
      allOf:
        - $ref: "#/components/schemas/FailedJobProperties"
    FailedJobProperties:
      type: object
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          description: Job uuid
          example: 0814a269-11f2-403c-8b00-ca01812c53b5
        connection:
          type: string
          example: redis
        queue:
          type: string
          example: default
        payload:
          type: string
          description: Full message payload
          example: "{'uuid':'0814a269-11f2-403c-8b00-ca01812c53b5','timeout':null,'attemp\
            ts':1}"
        exception:
          type: string
          description: Exception (with stack trace)
          example: Job has been attempted too many times. in
            /var/www/vendor/laravel/framework/src/Illuminate/Queue/MaxAttemptsExceededException.php:24
        failed_at:
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - uuid
        - connection
        - queue
        - payload
        - exception
        - failed_at
    SearchTempFilesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchTempFilesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TempFile"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    TempFile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        path:
          type: string
          description: Path to temp file
          example: 0814a269-11f2-403c-8b00-ca01812c53b5
        created_at:
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - path
        - created_at
    SearchBrandsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchBrandsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор(ы) бренда
          example: 3
        name_like:
          type: string
          description: Название или часть названия бренда
          example: son
        code_like:
          type: string
          description: Код или часть кода бренда
          example: panasonic
        description_like:
          type: string
          description: Описание или часть описания бренда
          example: Электроника
        is_active:
          type: array
          items:
            type: boolean
            description: Активность бренда
            example: true
        created_at_gte:
          type: string
          format: date-time
          description: Дата создания от
          example: 2021-07-03T11:57:28.000000Z
        created_at_lte:
          type: string
          format: date-time
          description: Дата создания до
          example: 2021-07-09T04:25:11.000000Z
        updated_at_gte:
          type: string
          format: date-time
          description: Дата обновления от
          example: 2021-07-03T11:57:28.000000Z
        updated_at_lte:
          type: string
          format: date-time
          description: Дата обновления до
          example: 2021-07-09T04:25:11.000000Z
    SearchBrandsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Brand"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateBrandRequest:
      allOf:
        - $ref: "#/components/schemas/BrandFillableProperties"
        - $ref: "#/components/schemas/BrandFillableRequiredProperties"
        - $ref: "#/components/schemas/BrandFillableOnlyProperties"
        - $ref: "#/components/schemas/BrandFillableOnlyRequiredProperties"
    BrandFillableOnlyProperties:
      type: object
      properties:
        preload_file_id:
          type: integer
          description: Идентификатор изображения бренда, загруженного ранее
          example: 1
    BrandFillableOnlyRequiredProperties:
      required:
        - preload_file_id
      type: object
      additionalProperties:
        type: string
    BrandResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Brand"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ReplaceBrandRequest:
      allOf:
        - $ref: "#/components/schemas/BrandFillableProperties"
        - $ref: "#/components/schemas/BrandFillableRequiredProperties"
        - $ref: "#/components/schemas/BrandFillableOnlyProperties"
        - $ref: "#/components/schemas/BrandFillableOnlyRequiredProperties"
    PatchBrandRequest:
      allOf:
        - $ref: "#/components/schemas/BrandFillableProperties"
        - $ref: "#/components/schemas/BrandFillableOnlyProperties"
    SearchCategoriesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCategoriesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор(ы) категории
          example: 2
        name:
          type: string
          description: Название категории
          example: Автомобили
        name_like:
          type: string
          description: Название или часть названия категории
          example: авто
        code:
          type: string
          description: Код категории
          example: avtomobili
        code_like:
          type: string
          description: Код или часть кода категории
          example: avto
        parent_id:
          type: integer
          description: Идентификатор(ы) родительской категории
          example: 1024
        is_active:
          type: boolean
          description: Активность атрибут
          example: true
        is_root:
          type: boolean
          description: Отбирать только категории верхнего уровня или наоборот только
            вложенные
          example: true
        exclude_id:
          type: integer
          description: Идентификатор(ы) исключаемой категории
          example: 10
        has_is_gluing:
          type: boolean
          description: Есть ли в категории хотя бы одно свойство для склейки
          example: true
    SearchCategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateCategoryRequest:
      allOf:
        - $ref: "#/components/schemas/CategoryFillableProperties"
        - $ref: "#/components/schemas/CategoryRequiredFillableProperties"
    CategoryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Category"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    BindCategoryPropertiesRequest:
      type: object
      properties:
        replace:
          type: boolean
          default: false
          description: Если true, все отсутствующие в запросе привязки будут удалены
          example: true
        properties:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: Идентификатор атрибута товара
                example: 111
              is_required:
                type: boolean
                description: Является обязательным для заполнения внутри категории
                example: true
              is_gluing:
                type: boolean
                description: Свойство используется для склейки товаров
                example: true
            required:
              - id
              - is_required
              - is_gluing
    ReplaceCategoryRequest:
      allOf:
        - $ref: "#/components/schemas/CategoryFillableProperties"
        - $ref: "#/components/schemas/CategoryRequiredFillableProperties"
    CategoriesTreeResponse:
      type: object
      x-lg-resource-class-name: CategoriesTreeResource
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CategoriesTreeItem"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CategoriesTreeItem:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор категории
          example: 202
        name:
          type: string
          description: Название категории
          example: Мясо
        code:
          type: string
          description: Код категории
          example: myaso
        children:
          type: array
          description: Дочерние категории, если есть
          items:
            x-skip-response-validation: true
            type: object
            example:
              id: 500
              name: Говядина
              code: govyadina
              children: []
            additionalProperties:
              type: string
      required:
        - id
        - name
        - code
    SearchActualCategoryPropertiesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchActualCategoryPropertiesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActualCategoryProperty"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ActualCategoryProperty:
      type: object
      properties:
        id:
          type: integer
          description: ID of actual category property
        actual_category_property_id:
          type: integer
          description: ID of actual category property from Pim
        property_id:
          type: integer
          description: Property ID from Pim
        category_id:
          type: integer
          description: Category ID from Pim
        is_gluing:
          type: boolean
          description: The property is used for gluing products
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Property created at
        updated_at:
          type: string
          format: date-time
          description: Property updated at
      required:
        - id
        - actual_category_property_id
        - property_id
        - category_id
        - is_gluing
        - is_migrated
        - created_at
        - updated_at
    ActualCategoryPropertyReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          example: 202
        category_id:
          type: integer
          description: Category ID
          example: 202
        property_id:
          type: integer
          description: Property ID
          example: 202
        created_at:
          description: Date of creation
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Date of update
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
      required:
        - id
        - category_id
        - property_id
        - created_at
        - updated_at
    ActualCategoryPropertyFillableProperties:
      type: object
      properties:
        is_required:
          type: boolean
          description: The attribute must be filled in
          example: false
        is_gluing:
          type: boolean
          description: The property is used for gluing products
          example: false
        is_inherited:
          type: boolean
          description: The property is inherited from parent category
          example: false
        is_common:
          type: boolean
          description: The property is common to all categories
          example: false
    ActualCategoryPropertyIncludes:
      type: object
      properties:
        category:
          $ref: "#/components/schemas/Category"
        property:
          $ref: "#/components/schemas/Property"
    Property:
      type: object
      properties:
        id:
          type: integer
          description: Category ID from Pim
        property_id:
          type: integer
          description: Property ID from PIM
        name:
          type: string
          description: Name
        code:
          type: string
          description: Property code
        type:
          type: string
          description: Type
        is_public:
          type: boolean
          description: Display on the showcase
        is_active:
          type: boolean
          description: Property active
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Property created at
        updated_at:
          type: string
          format: date-time
          description: Property updated at
      required:
        - id
        - property_id
        - name
        - code
        - type
        - is_public
        - is_active
        - is_migrated
        - created_at
        - updated_at
    PropertyReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор атрибута
          example: 202
        is_system:
          type: boolean
          description: Признак системного неизменяемого атрибута
          example: false
        is_common:
          type: boolean
          description: Признак общего для всех категорий атрибута
          example: false
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
      required:
        - id
        - is_system
        - is_common
        - created_at
        - updated_at
    PropertyFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название свойства
          example: Диагональ
        display_name:
          type: string
          description: Публичное наименование
          example: Диагональ экрана
        code:
          type: string
          description: Код свойства
          example: diagonal
        type:
          type: string
          description: Тип свойства из PropertyTypeEnum
          example: double
        hint_value:
          type: string
          nullable: true
          description: Подсказка при заполнении для значения
          example: Выберите цвет
        hint_value_name:
          type: string
          nullable: true
          description: Подсказка при заполнении для названия значения
          example: Введите название цвета
        is_multiple:
          type: boolean
          description: Поддерживает множественные значения
          example: true
        is_filterable:
          type: boolean
          description: Выводится в фильтрах на витрине
          example: false
        is_public:
          type: boolean
          description: Выводить на витрине
          example: false
        is_active:
          type: boolean
          description: Активность атрибута
          example: true
        is_required:
          type: boolean
          description: Обязательность заполнения для общего (is_common=true) атрибута
          example: true
        has_directory:
          type: boolean
          description: Атрибут имеет справочник значений
          example: false
        is_moderated:
          type: boolean
          description: Атрибут модерируется
          example: false
    PropertyFillableRequiredProperties:
      type: object
      required:
        - name
        - display_name
        - code
        - type
        - hint_value
        - hint_value_name
        - is_multiple
        - is_filterable
        - is_public
        - is_active
        - is_required
        - has_directory
        - is_moderated
      additionalProperties:
        type: string
    PropertyIncludes:
      type: object
      properties:
        directory:
          type: array
          items:
            $ref: "#/components/schemas/AttributeDirectoryValue"
    AttributeDirectoryValue:
      allOf:
        - $ref: "#/components/schemas/DirectoryValueReadonlyProperties"
        - $ref: "#/components/schemas/DirectoryValueFillableProperties"
    DirectoryValueReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор значения
          example: 1258
        url:
          type: string
          nullable: true
          description: URL файла
          example: https://images.com?id-123
        type:
          type: string
          description: Тип значения из перечисления CatalogPropertyTypeEnum
          example: integer
        property_id:
          type: integer
          description: Идентификатор атрибута, которому принадлежит значение
          example: 1
      required:
        - id
        - type
    DirectoryValueFillableProperties:
      type: object
      properties:
        value:
          nullable: false
          type: string
          description: >
            Значение элемента справочника (string|number|integer|boolean)
            Обязателен для заполнения, если не задан preload_file_id.
          example: "#FFFFFF"
        name:
          type: string
          description: Название значения (например, имя цвета)
          example: 500 мм
        code:
          type: string
          description: Символьный код значения
          example: 15-mm
    ActualCategoryPropertyFillableRequiredProperties:
      type: object
      required:
        - is_required
        - is_gluing
        - is_inherited
        - is_common
      additionalProperties:
        type: string
    SearchPropertiesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchPropertiesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор(ы) атрибутов
          example: 2
        name_like:
          type: string
          description: Название или часть названия атрибута
          example: Диаг
        code:
          type: string
          description: Код(ы) атрибутов
          example: diagonal
        is_filterable:
          type: boolean
          description: Атрибут доступен для фильтрации на витрине
          example: false
        is_active:
          type: boolean
          description: Атрибут активен и доступен для товаров
          example: true
    SearchPropertiesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Property"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreatePropertyRequest:
      allOf:
        - $ref: "#/components/schemas/PropertyFillableProperties"
        - $ref: "#/components/schemas/PropertyRequiredProperties"
    PropertyRequiredProperties:
      type: object
      required:
        - name
        - type
        - display_name
      additionalProperties:
        type: string
    PropertyResponse:
      x-lg-resource-class-name: ProductPropertiesResource
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Property"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ReplacePropertyRequest:
      allOf:
        - $ref: "#/components/schemas/PropertyFillableProperties"
        - $ref: "#/components/schemas/PropertyRequiredProperties"
    PatchPropertyRequest:
      allOf:
        - $ref: "#/components/schemas/PropertyFillableProperties"
    PropertiesTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PropertiesType"
      required:
        - data
    PropertiesType:
      type: object
      properties:
        id:
          type: string
          description: ID типа из CatalogPropertyTypeEnum
        name:
          type: string
          description: Наименование типа
      required:
        - id
        - name
    CreateDirectoryValueRequest:
      allOf:
        - $ref: "#/components/schemas/DirectoryValueFillableProperties"
        - $ref: "#/components/schemas/DirectoryValueModifyProperties"
    DirectoryValueModifyProperties:
      type: object
      properties:
        preload_file_id:
          type: integer
          description: Идентификатор предзагруженного ранее файла
          example: 1010
    DirectoryValueResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DirectoryValue"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DirectoryValue:
      allOf:
        - $ref: "#/components/schemas/DirectoryValueReadonlyProperties"
        - $ref: "#/components/schemas/DirectoryValueFillableProperties"
        - $ref: "#/components/schemas/DirectoryValueFillableRequiredProperties"
        - $ref: "#/components/schemas/DirectoryValueExtendedProperties"
    DirectoryValueFillableRequiredProperties:
      type: object
      required:
        - value
        - name
        - code
      additionalProperties:
        type: string
    DirectoryValueExtendedProperties:
      type: object
      properties:
        property_id:
          type: integer
          description: Идентификатор атрибута, которому принадлежит значение
          example: 150
    MassCreateDirectoryValueRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CreateDirectoryValueRequest"
    MassDirectoryValueResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryValue"
      required:
        - data
    SearchDirectoryValuesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          $ref: "#/components/schemas/SearchDirectoryValuesFilter"
    SearchDirectoryValuesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор(ы) значений
          example: 2
        name:
          type: string
          description: Название или часть названия значения
          example: Красный
        code:
          type: string
          description: Код(ы) значений
          example: krasnyi
        property_id:
          type: integer
          description: Идентификатор(ы) атрибута, которому принадлежит значение
          example: 1024
        value:
          type: string
          description: Значение элемента справочника (string|number|integer|boolean)
          example: "#FFFFFF"
    SearchDirectoryValuesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryValue"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ReplaceDirectoryValueRequest:
      allOf:
        - $ref: "#/components/schemas/DirectoryValueFillableProperties"
        - $ref: "#/components/schemas/DirectoryValueModifyProperties"
    SearchProductsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchProductsFilter:
      allOf:
        - $ref: "#/components/schemas/ProductsFilterProperties"
    ProductsFilterProperties:
      type: object
      properties:
        id:
          type: integer
          description: Product ID(s) from PIM
          example: 1254
        name:
          type: string
          description: Name or part of the product name
          example: apple
        code:
          type: string
          description: Product code(s) used in URL
          example: tv-1
        external_id:
          type: string
          example: "264807"
        category_id:
          type: integer
          description: Category ID(s) from PIM
          example: 11
        status_id:
          type: integer
          description: Status ID from ProductStatusSetting object from PIM
          example: 2
        allow_publish:
          type: boolean
          example: true
        vendor_code:
          type: string
          description: Article
          example: "123466"
        barcode:
          type: string
          description: EAN
          example: "1003912039"
        is_adult:
          type: boolean
          description: Is product 18+
          example: false
        type:
          type: integer
          description: Product type from CatalogProductTypeEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductTypeEnum"
        brand_id:
          type: array
          items:
            type: integer
            description: Brand ID from PIM
            example: 12
        has_product_groups:
          type: boolean
          description: Does product belong to at least one product group
          example: true
        has_no_filled_required_attributes:
          type: boolean
          description: Does the product have at least one unfilled required attribute
          example: true
        category_has_is_gluing:
          type: boolean
          description: Belongs to a category with at least one attribute for product groups
          example: true
        created_at_lte:
          type: string
          format: date-time
          description: Create date is less than or equal to
          example: 2021-07-09T04:25:11.000000Z
        created_at_gte:
          type: string
          format: date-time
          description: Create date is older than or equal to
          example: 2021-07-03T11:57:28.000000Z
        updated_at_lte:
          type: string
          format: date-time
          description: Update date is less than or equal to
          example: 2021-07-09T04:25:11.000000Z
        updated_at_gte:
          type: string
          format: date-time
          description: Update date is older than or equal to
          example: 2021-07-03T11:57:28.000000Z
    SearchProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateProductRequest:
      description: >
        Attributes and images are optional. If they are not required, the
        corresponding field must be absent from the request, the null value
        cannot be used.
      allOf:
        - $ref: "#/components/schemas/ProductFillableProperties"
        - $ref: "#/components/schemas/ProductRequiredProperties"
        - $ref: "#/components/schemas/ReplaceProductImagesRequest"
        - $ref: "#/components/schemas/ReplaceProductAttributesRequest"
    ProductRequiredProperties:
      required:
        - name
        - type
        - vendor_code
      type: object
      additionalProperties:
        type: string
    ReplaceProductImagesRequest:
      type: object
      properties:
        images:
          type: array
          description: Замещение всех имеющихся картинок на заданные
          items:
            $ref: "#/components/schemas/EditProductImage"
    EditProductImage:
      allOf:
        - $ref: "#/components/schemas/ProductImageEditProperties"
        - $ref: "#/components/schemas/ProductImageFillableProperties"
    ProductImageEditProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор имеющейся картинки. Если задан, то preload_file_id
            игнорируется.
          example: 202
        preload_file_id:
          type: integer
          description: Идентификатор предзагруженного ранее файла. Если задан, будет
            создана новая картинка из файла.
          example: 1010
    ReplaceProductAttributesRequest:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/EditProductAttributeValue"
    EditProductAttributeValue:
      allOf:
        - $ref: "#/components/schemas/ProductAttributeValueFillableProperties"
        - $ref: "#/components/schemas/ProductAttributeValueEditProperties"
        - $ref: "#/components/schemas/ProductAttributeValueRequired"
    ProductAttributeValueEditProperties:
      type: object
      properties:
        preload_file_id:
          type: integer
          description: >
            Идентификатор предварительно загруженного файла. Допустим только для
            атрибутов типа IMAGE. Если установлен, то поля value и
            directory_value_id должны отсутствовать. Поле name может быть
            задано, например, для описания картинки.
          example: 1010
        mark_to_delete:
          type: boolean
          description: Отметить атрибут на удаление.
    ProductAttributeValueRequired:
      required:
        - property_id
      type: object
      additionalProperties:
        type: string
    ProductDraftResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductDraft"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ProductDraft:
      allOf:
        - $ref: "#/components/schemas/ProductReadonlyProperties"
        - $ref: "#/components/schemas/ProductFillableProperties"
        - $ref: "#/components/schemas/ProductStatusProperties"
        - $ref: "#/components/schemas/ProductIncludes"
        - $ref: "#/components/schemas/ProductResponseRequiredProperties"
    MassPatchProductsRequest:
      allOf:
        - $ref: "#/components/schemas/RequestBodyMassOperation"
        - type: object
          properties:
            fields:
              allOf:
                - $ref: "#/components/schemas/ProductMassPatchableProperties"
                - $ref: "#/components/schemas/ProductStatusProperties"
        - $ref: "#/components/schemas/PatchProductAttributesRequest"
    RequestBodyMassOperation:
      type: object
      properties:
        ids:
          type: array
          items:
            type: integer
          description: Target entity IDs
          example:
            - 103
            - 115
      required:
        - ids
    PatchProductAttributesRequest:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/EditProductAttributeValue"
    MassPatchProductsResult:
      type: object
      properties:
        data:
          type: object
          properties:
            products_result:
              description: The result of changing the properties of products
              $ref: "#/components/schemas/MassOperationResultData"
          required:
            - products_result
      required:
        - data
    MassOperationResultData:
      type: object
      nullable: true
      properties:
        processed:
          type: array
          items:
            type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 122
              message:
                type: string
                example: Insufficient rights
            required:
              - id
              - message
      required:
        - processed
        - errors
    MassPatchProductsByQueryRequest:
      allOf:
        - type: object
          properties:
            filter:
              $ref: "#/components/schemas/ProductsFilterProperties"
            fields:
              allOf:
                - $ref: "#/components/schemas/ProductMassPatchableProperties"
                - $ref: "#/components/schemas/ProductStatusProperties"
        - $ref: "#/components/schemas/PatchProductAttributesRequest"
    ProductsCommonAttributesRequest:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/ProductsFilterProperties"
    ProductsCommonAttributesResponse:
      type: object
      description: Common product attributes
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Property"
      required:
        - data
    ProductResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Product"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ReplaceProductRequest:
      description: >
        Attributes and images are optional. If they do not need to be changed,
        the corresponding fields must be absent from the request, the null value
        cannot be used. The update procedure is the same as in the PUT
        .../products/{id}/attributes and PUT .../products/{id}/images requests.
      allOf:
        - $ref: "#/components/schemas/ProductFillableProperties"
        - $ref: "#/components/schemas/ProductStatusProperties"
        - $ref: "#/components/schemas/ProductRequiredProperties"
        - $ref: "#/components/schemas/ReplaceProductAttributesRequest"
        - $ref: "#/components/schemas/ReplaceProductImagesRequest"
    PatchProductRequest:
      description: >
        Attributes and images are optional. If they do not need to be changed,
        the corresponding fields must be absent from the request, the null value
        cannot be used. The update procedure is the same as in the PATCH
        .../products/{id}/attributes and PATCH .../products/{id}/images
        requests.
      allOf:
        - $ref: "#/components/schemas/ProductFillableProperties"
        - $ref: "#/components/schemas/ProductStatusProperties"
        - $ref: "#/components/schemas/PatchProductAttributesRequest"
        - $ref: "#/components/schemas/PatchProductImagesRequest"
    PatchProductImagesRequest:
      type: object
      properties:
        images:
          type: array
          description: Обновление только заданных в запросе картинок
          items:
            $ref: "#/components/schemas/EditProductImage"
    SearchProductDraftsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          $ref: "#/components/schemas/SearchProductDraftsFilter"
    SearchProductDraftsFilter:
      allOf:
        - $ref: "#/components/schemas/ProductsFilterProperties"
    SearchProductDraftsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductDraft"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ProductAttributesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductAttributeValue"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeleteProductAttributesRequest:
      type: object
      properties:
        property_ids:
          type: array
          items:
            type: integer
            description: Идентификатор атрибута
            example: 512
      required:
        - property_ids
    ProductImagesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductImage"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ProductImageUploadRequest:
      allOf:
        - $ref: "#/components/schemas/ProductImageCreateProperties"
        - $ref: "#/components/schemas/ProductImageFillableProperties"
        - $ref: "#/components/schemas/ProductImageCreateRequired"
    ProductImageCreateProperties:
      type: object
      properties:
        preload_file_id:
          type: integer
          description: Идентификатор предзагруженного ранее файла, при помощи которого
            будет создана новая картинка из файла.
          example: 1010
    ProductImageCreateRequired:
      required:
        - preload_file_id
      type: object
      additionalProperties:
        type: string
    ProductImageResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductImage"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ProductImageDeleteRequest:
      type: object
      properties:
        file_id:
          type: integer
          description: Идентификатор удаляемого файла
          example: 42
      required:
        - file_id
    SearchProductFieldsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          $ref: "#/components/schemas/SearchProductFieldsFilter"
    SearchProductFieldsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор(ы) полей
          example: 2
        name:
          type: string
          description: Наименование(я) поля
          example: Ширина
        is_required:
          type: boolean
          description: Признак обязательности заполнения
          example: false
        is_moderated:
          type: boolean
          description: Признак модерируемого поля
          example: false
        metrics_category:
          type: string
          nullable: true
          description: Категория метрики товара из перечисления MetricsCategoryEnum
          example: master
    SearchProductFieldsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductField"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ProductField:
      allOf:
        - $ref: "#/components/schemas/ProductFieldReadonlyProperties"
        - $ref: "#/components/schemas/ProductFieldFillableProperties"
        - $ref: "#/components/schemas/ProductFieldFillableRequiredProperties"
    ProductFieldReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор поля
          example: 1
        code:
          type: string
          description: Символьный код поля
          example: width
        edit_mask:
          type: array
          items:
            type: integer
          description: Значения из FieldSettingsMaskEnum, соответствующие доступным для
            редактирования свойствам
          example:
            - 1
            - 4
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
      required:
        - id
        - code
        - edit_mask
        - created_at
        - updated_at
    ProductFieldFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Наименование поля товара
          example: Длина
        is_required:
          type: boolean
          description: Признак обязательности заполнения
          example: false
        is_moderated:
          type: boolean
          description: Признак модерируемого поля
          example: true
        metric_category:
          type: string
          nullable: true
          description: Категория метрики товара - значение перечисления
            MetricsCategoryEnum или null
          example: master
    ProductFieldFillableRequiredProperties:
      required:
        - name
        - is_required
        - is_moderated
        - metric_category
      type: object
      additionalProperties:
        type: string
    ProductFieldResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductField"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchProductFieldRequest:
      allOf:
        - $ref: "#/components/schemas/ProductFieldFillableProperties"
    ProductTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductType"
      required:
        - data
    ProductType:
      type: object
      properties:
        id:
          type: integer
          description: ID типа из CatalogProductTypeEnum
        name:
          type: string
          description: Наименование типа
      required:
        - id
        - name
    ProductTariffingVolumesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductTariffingVolume"
      required:
        - data
    ProductTariffingVolume:
      type: object
      properties:
        id:
          type: integer
          description: ID тарификации продукта из CatalogProductTariffingVolumeEnum
        name:
          type: string
          description: Наименование тарификации продукта
      required:
        - id
        - name
    ProductUomResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductUom"
      required:
        - data
    ProductUom:
      type: object
      properties:
        id:
          type: integer
          description: ID единицы измерения из CatalogProductUomEnum
        name:
          type: string
          description: Наименование единицы измерения
      required:
        - id
        - name
    CreateProductGroupRequest:
      allOf:
        - $ref: "#/components/schemas/ProductGroupFillableProperties"
        - $ref: "#/components/schemas/ProductGroupFillableRequiredProperties"
    ProductGroupResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductGroup"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchProductGroupRequest:
      allOf:
        - $ref: "#/components/schemas/ProductGroupFillableProperties"
    BindProductGroupProductsRequest:
      type: object
      properties:
        replace:
          type: boolean
          default: false
          description: Если true, все отсутствующие в запросе привязки будут удалены
          example: true
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: Идентификатор атрибута
                example: 111
              vendor_code:
                type: string
                description: Артикул
                example: "123466"
              barcode:
                type: string
                description: Штрихкод (EAN)
                example: "1003912039"
    ProductGroupsBindResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductGroupsBindResult"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ProductGroupsBindResult:
      type: object
      properties:
        product_group:
          $ref: "#/components/schemas/ProductGroup"
        product_errors:
          type: array
          items:
            type: integer
            description: ID товара, для которого не заполнены ВСЕ свойства, участвующие в
              склейке
            example: 1
      required:
        - product_group
        - product_errors
    SearchProductGroupsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchProductGroupsInclude:
      type: array
      items:
        type: string
        description: Подгружаемые связанные сущности
        enum:
          - category
          - main_product
          - products
      example:
        - category
        - main_product
        - products
    SearchProductGroupsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор склейки
          example: 220
        category_id:
          type: integer
          description: Идентификатор категории
          example: 100
        name_like:
          type: string
          description: Название склейки (поиск по подстроке)
          example: Лабут
        product_name_like:
          type: string
          description: Название товара, входящего в склейку (поиск по подстроке)
          example: Охранная система
        product_barcode_like:
          type: string
          description: Штрихкод товара, входящего в склейку (поиск по подстроке)
          example: "4607"
        product_vendor_code_like:
          type: string
          description: Артикул товара, входящего в склейку (поиск по подстроке)
          example: A1234
    SearchProductGroupsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductGroup"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchBulkOperationsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          $ref: "#/components/schemas/SearchBulkOperationsFilter"
    SearchBulkOperationsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор(ы) массовой операции
          example: 3
        status:
          type: integer
          description: Идентификатор(ы) статусов из CatalogBulkOperationStatusEnum
        action:
          type: string
          description: Идентификатор(ы) действий из CatalogBulkOperationActionEnum
        entity:
          type: string
          description: Идентификатор(ы) сущностей из CatalogBulkOperationEntityEnum
        created_at_gte:
          type: string
          format: date-time
          description: Дата создания от
          example: 2021-07-03T11:57:28.000000Z
        created_at_lte:
          type: string
          format: date-time
          description: Дата создания до
          example: 2021-07-09T04:25:11.000000Z
        updated_at_gte:
          type: string
          format: date-time
          description: Дата обновления от
          example: 2021-07-03T11:57:28.000000Z
        updated_at_lte:
          type: string
          format: date-time
          description: Дата обновления до
          example: 2021-07-09T04:25:11.000000Z
    SearchBulkOperationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BulkOperation"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    BulkOperation:
      allOf:
        - $ref: "#/components/schemas/BulkOperationProperties"
        - $ref: "#/components/schemas/BulkOperationIncludes"
        - $ref: "#/components/schemas/BulkOperationRequiredProperties"
    BulkOperationProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор массовой операции
          example: 15324
        action:
          type: string
          $ref: "#/components/schemas/CatalogBulkOperationActionEnum"
        entity:
          type: string
          $ref: "#/components/schemas/CatalogBulkOperationEntityEnum"
        status:
          type: integer
          $ref: "#/components/schemas/CatalogBulkOperationStatusEnum"
        ids:
          type: array
          description: Идентификаторы для обработки
          items:
            type: integer
          example:
            - 1
            - 2
            - 3
        ids_string:
          type: string
          description: Идентификаторы для обработки (для вывода в таблицу)
          example: 1, 2, 3
        error_message:
          type: string
          description: Сообщение об ошибке
          nullable: true
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
    BulkOperationIncludes:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/BulkOperationError"
    BulkOperationError:
      type: object
      properties:
        operation_id:
          type: integer
          description: Идентификатор массовой операции
          example: 15324
        entity_id:
          type: integer
          description: Идентификатор сущности
          example: 15324
        message:
          type: string
          description: Ошибка
      required:
        - operation_id
        - entity_id
        - message
    BulkOperationRequiredProperties:
      type: object
      required:
        - id
        - action
        - entity
        - status
        - ids
        - ids_string
        - created_at
        - updated_at
      additionalProperties:
        type: string
    CreateProductImportRequest:
      type: object
      properties:
        preload_file_id:
          type: integer
          example: 1
        type:
          description: Import type from CatalogProductImportTypeEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductImportTypeEnum"
      required:
        - preload_file_id
        - type
    ProductImportResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductImport"
    ProductImport:
      allOf:
        - $ref: "#/components/schemas/ProductImportReadonlyProperties"
        - $ref: "#/components/schemas/ProductImportFillableProperties"
        - $ref: "#/components/schemas/ProductImportFillableRequiredProperties"
        - $ref: "#/components/schemas/ProductImportIncludes"
    ProductImportReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          example: 100
        created_at:
          description: Create time
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Update time
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        status:
          description: Import status from CatalogProductImportStatusEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductImportStatusEnum"
        file:
          type: string
          description: File url
          example: https://www.example.com/dir/file.csv
        file_name:
          type: string
          example: file.csv
        chunks_count:
          type: integer
          nullable: true
          description: Count of scheduled queue jobs
          example: 10
        chunks_finished:
          type: integer
          description: Count of finished queue jobs
          example: 2
      required:
        - id
        - created_at
        - updated_at
        - status
        - file
        - file_name
        - chunks_count
        - chunks_finished
    ProductImportFillableProperties:
      type: object
      properties:
        type:
          description: Import type from CatalofProductImportTypeEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductImportTypeEnum"
    ProductImportFillableRequiredProperties:
      type: object
      required:
        - type
      additionalProperties:
        type: string
    ProductImportIncludes:
      type: object
      properties:
        warnings:
          type: array
          items:
            $ref: "#/components/schemas/ProductImportWarning"
    ProductImportWarning:
      allOf:
        - $ref: "#/components/schemas/ProductImportWarningReadonlyProperties"
        - $ref: "#/components/schemas/ProductImportWarningIncludes"
    ProductImportWarningReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          example: 101
        created_at:
          description: Create time
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Update time
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        import_id:
          type: integer
          example: 101
        vendor_code:
          type: string
          nullable: true
          description: SKU of product with error
          example: GJN026494-3
        import_type:
          description: Import type from CatalogProductImportTypeEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CatalogProductImportTypeEnum"
        message:
          type: string
          example: Field height must be number
      required:
        - id
        - created_at
        - updated_at
        - import_id
        - vendor_code
        - import_type
        - message
    ProductImportWarningIncludes:
      type: object
      properties:
        import:
          $ref: "#/components/schemas/ProductImport"
    SearchProductImportsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          type: object
          additionalProperties:
            type: string
    SearchProductImportsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductImport"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchProductImportWarningsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          type: object
          additionalProperties:
            type: string
    SearchProductImportWarningsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductImportWarning"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    GetNextStatusRequest:
      type: object
      properties:
        id:
          type: integer
          description: Cтатус продукта
          nullable: true
          example: 1
    StatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Status"
      required:
        - data
    Status:
      allOf:
        - $ref: "#/components/schemas/StatusReadonlyProperties"
        - $ref: "#/components/schemas/StatusFillableProperties"
        - $ref: "#/components/schemas/StatusRequiredFillableProperties"
    SetPreviousStatusRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: integer
            description: Cтатус продукта
          example:
            - 1
      required:
        - ids
    StatusSettingResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/StatusSetting"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    StatusSetting:
      allOf:
        - $ref: "#/components/schemas/StatusSettingProperties"
        - $ref: "#/components/schemas/StatusSettingIncludes"
    StatusSettingProperties:
      allOf:
        - $ref: "#/components/schemas/StatusSettingReadonlyProperties"
        - $ref: "#/components/schemas/StatusSettingFillableProperties"
        - $ref: "#/components/schemas/StatusSettingFillableRequiredProperties"
    StatusSettingReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор статуса
          example: 1
        created_at:
          description: Время создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Время обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    StatusSettingFillableProperties:
      type: object
      properties:
        code:
          type: string
          description: Код статуса
          nullable: true
          example: NEW
        name:
          type: string
          description: Название статуса
          example: Новый
        color:
          type: string
          description: Цвет статуса
          nullable: true
          example: "#FFFF00"
        type:
          type: integer
          description: Тип статуса из ProductStatusTypeEnum
          example: 1
        is_active:
          type: boolean
          description: Признак активности статуса
        is_publication:
          type: boolean
          description: Флаг по которому у товара проставляется признак активности для
            витрины
        events:
          $ref: "#/components/schemas/EventConditions"
    EventConditions:
      type: object
      nullable: true
      description: Условия для перехода в статус
      properties:
        operation:
          type: integer
          description: Операция из EventOperationEnum
          nullable: true
          example: 1
        events:
          type: array
          description: Список событий
          items:
            type: integer
            description: Cобытие из ProductEventEnum
          example:
            - 1
            - 3
      required:
        - operation
    StatusSettingFillableRequiredProperties:
      required:
        - code
        - name
        - color
        - type
        - is_active
        - is_publication
      type: object
      additionalProperties:
        type: string
    StatusSettingIncludes:
      type: object
      properties:
        next_statuses:
          type: array
          items:
            $ref: "#/components/schemas/StatusSettingProperties"
        next_status_ids:
          type: string
          description: Список названий следующих статусов через запятую, возвращается при
            возврате next_statuses
          example: Новый, Опубликован
        previous_statuses:
          type: array
          items:
            $ref: "#/components/schemas/StatusSettingProperties"
        previous_status_ids:
          type: string
          description: Список названий предыдущих статусов через запятую, возвращается при
            возврате previous_statuses
          example: Новый, Опубликован
    SearchStatusSettingsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    StatusSettingsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StatusSetting"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateStatusSettingRequest:
      allOf:
        - $ref: "#/components/schemas/StatusSettingFillableProperties"
        - $ref: "#/components/schemas/StatusSettingFillableRequiredProperties"
    PatchStatusSettingRequest:
      allOf:
        - $ref: "#/components/schemas/StatusSettingFillableProperties"
    ProductStatusTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductStatusTypes"
      required:
        - data
    ProductStatusTypes:
      type: object
      properties:
        id:
          type: integer
          description: ID типа статуса из CatalogProductStatusTypeEnum
        name:
          type: string
          description: Название
      required:
        - id
        - name
    ProductEventsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductEvents"
      required:
        - data
    ProductEvents:
      type: object
      properties:
        id:
          type: integer
          description: ID события из CatalogProductEventEnum
        name:
          type: string
          description: Название события
      required:
        - id
        - name
    ProductEventOperationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductEventOperations"
      required:
        - data
    ProductEventOperations:
      type: object
      properties:
        id:
          type: integer
          description: ID из CatalogEventOperationEnum
        name:
          type: string
          description: Название
      required:
        - id
        - name
    SearchProductEventsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchProductEventsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductEvent"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ProductEvent:
      type: object
      properties:
        id:
          type: integer
          example: 220
        event_id:
          type: integer
          description: Event ID from ProductEventEnum
          example: 220
        product_id:
          type: integer
          description: Product ID
          example: 2
        created_at:
          description: Created at
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        updated_at:
          description: Updated at
          format: date-time
          type: string
          example: 2021-07-03T11:57:28.000000Z
        product:
          $ref: "#/components/schemas/ProductDraft"
      required:
        - id
        - event_id
        - product_id
        - created_at
        - updated_at
    OfferResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Offer"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Offer:
      type: object
      properties:
        id:
          type: integer
          description: Offer ID
        offer_id:
          type: integer
          description: Offer ID from Offers
        product_id:
          type: integer
          description: Product ID from Pim
        is_active:
          type: boolean
          description: The final activity of the offer
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        base_price:
          type: integer
          description: Base price
          nullable: true
        price:
          type: integer
          description: The final discounted price. If null, it is calculated during indexing
          nullable: true
        product:
          $ref: "#/components/schemas/Product"
          nullable: true
        discount:
          $ref: "#/components/schemas/Discount"
          nullable: true
        product_group:
          $ref: "#/components/schemas/ProductGroup"
          nullable: true
        product_group_product:
          $ref: "#/components/schemas/ProductGroupProduct"
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Offer created at
        updated_at:
          type: string
          format: date-time
          description: Offer updated at
      required:
        - id
        - offer_id
        - product_id
        - is_active
        - is_migrated
        - created_at
        - updated_at
    OfferReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор оффера
          example: 202
        product_id:
          type: integer
          description: Идентификатор товара, для которого создается оффер
          example: 512
        is_active:
          type: boolean
          description: Активность оффера (Вычисляется по активности товара, наличию стоков
            и т.п.)
        created_at:
          type: string
          format: date-time
          description: Дата создания оффера
          example: 2021-06-11T11:27:10.000000Z
        updated_at:
          type: string
          format: date-time
          description: Дата обновления оффера
          example: 2021-06-11T11:27:10.000000Z
      required:
        - id
        - product_id
        - is_active
        - created_at
        - updated_at
    OfferFillableProperties:
      type: object
      properties:
        allow_publish:
          type: boolean
          description: Признак активности для витрины
        price:
          type: integer
          nullable: true
          description: Цена предложения в коп.
          example: 12500
    OfferFillableRequiredProperties:
      type: object
      required:
        - allow_publish
        - price
      additionalProperties:
        type: string
    OfferIncludes:
      type: object
      properties:
        stocks:
          type: array
          items:
            $ref: "#/components/schemas/Stock"
    PatchOfferRequest:
      allOf:
        - $ref: "#/components/schemas/OfferFillableProperties"
    SearchOffersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchOffersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Offer"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    StockResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Stock"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchStockRequest:
      allOf:
        - $ref: "#/components/schemas/StockFillableProperties"
    SearchStocksRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
        filter:
          type: object
          additionalProperties:
            type: string
    SearchStocksResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Stock"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ReviewStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ReviewStatus"
      required:
        - data
    ReviewStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса публикации отзыва из ReviewStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    ReviewResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Review"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Review:
      allOf:
        - $ref: "#/components/schemas/ReviewReadonlyProperties"
        - $ref: "#/components/schemas/ReviewFillableProperties"
        - $ref: "#/components/schemas/ReviewRequiredProperties"
        - $ref: "#/components/schemas/ReviewIncludes"
    ReviewReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        grade:
          type: integer
          description: Оценка (от 1 до 5)
          example: 1
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - grade
        - created_at
        - updated_at
    ReviewFillableProperties:
      type: object
      properties:
        status_id:
          type: integer
          description: Статус публикации отзыва из ReviewStatusEnum
          example: 1
        comment:
          type: string
          nullable: true
          description: Комментарий
    ReviewRequiredProperties:
      required:
        - comment
        - status_id
      type: object
      additionalProperties:
        type: string
    ReviewIncludes:
      type: object
      properties:
        customer:
          type: object
          description: Пользователь, оставивший отзыв
          allOf:
            - $ref: "#/components/schemas/Customer"
          additionalProperties:
            type: string
        product:
          type: object
          description: Товар, на который оставивлен отзыв
          allOf:
            - $ref: "#/components/schemas/Product"
          additionalProperties:
            type: string
    PatchReviewRequest:
      allOf:
        - $ref: "#/components/schemas/ReviewFillableProperties"
    SearchReviewsRequest:
      type: object
      description: >
        Доступные для сортировки поля: `id, product_id, created_at, updated_at`.
        Загружаемые через include связанные сущности: `customers, products`.
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchReviewsFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchReviewsFilter:
      type: object
      additionalProperties:
        type: string
    SearchReviewsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    FeedResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Feed"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    Feed:
      allOf:
        - $ref: "#/components/schemas/FeedReadonlyProperties"
        - $ref: "#/components/schemas/FeedIncludes"
    FeedReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        code:
          type: string
          description: Код фида
          example: yandex
        file_url:
          type: string
          description: Ссылка
          example: https://es.ensi-dev.greensight.ru/catalog/feeds/39/4c/1_desktop_19XRlBz795cFngxd6qwP.xml
        planned_delete_at:
          type: string
          description: плановаяя дата удаления фида
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - code
        - file_url
        - planned_delete_at
        - created_at
        - updated_at
    FeedIncludes:
      type: object
      properties:
        feed_settings:
          $ref: "#/components/schemas/FeedSettings"
    FeedSettings:
      allOf:
        - $ref: "#/components/schemas/FeedSettingsReadonlyProperties"
        - $ref: "#/components/schemas/FeedSettingsFillableProperties"
        - $ref: "#/components/schemas/FeedSettingsRequiredProperties"
        - $ref: "#/components/schemas/FeedSettingsIncludes"
    FeedSettingsReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    FeedSettingsFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название фида
          example: Фид для Яндекс.Маркета
        code:
          type: string
          description: Код
          example: yandex.xml
        active:
          type: boolean
          description: Активность фида
        type:
          type: integer
          description: Тип фида из FeedTypeEnum
          example: 1
        platform:
          type: integer
          description: Платформа фида из FeedPlatformEnum
          example: 1
        active_product:
          type: boolean
          description: Добавлять в фид только активные товары
        active_category:
          type: boolean
          description: Добавлять в фид только активные категории
        shop_name:
          type: string
          description: Название магазина
          example: Shop ENSI
        shop_url:
          type: string
          description: Сайт магазина
          example: https://example.com
        shop_company:
          type: string
          description: Название организации
          example: OOO ENSI
        update_time:
          type: integer
          description: Частота обновления (в часах)
          example: 4
        delete_time:
          type: integer
          description: Время хранения старых версий фидов (в днях)
          example: 1
    FeedSettingsRequiredProperties:
      required:
        - name
        - code
        - active
        - type
        - platform
        - active_product
        - active_category
        - shop_name
        - shop_url
        - shop_company
        - update_time
        - delete_time
      type: object
      additionalProperties:
        type: string
    FeedSettingsIncludes:
      type: object
      properties:
        feeds:
          type: array
          items:
            $ref: "#/components/schemas/Feed"
    SearchFeedsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchFeedsFilter"
        include:
          type: array
          items:
            type: string
            enum:
              - feed_settings
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchFeedsFilter:
      type: object
      additionalProperties:
        type: string
    SearchFeedsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Feed"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    FeedTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FeedType"
      required:
        - data
    FeedType:
      type: object
      properties:
        id:
          type: integer
          description: ID типа фида из CatalogFeedTypeEnum
        name:
          type: string
          description: Описание типа фида
      required:
        - id
        - name
    FeedPlatformsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FeedPlatform"
      required:
        - data
    FeedPlatform:
      type: object
      properties:
        id:
          type: integer
          description: ID платформы фида из CatalogFeedPlatformEnum
        name:
          type: string
          description: Описание платформы фида
      required:
        - id
        - name
    FeedSettingsForCreate:
      allOf:
        - $ref: "#/components/schemas/FeedSettingsFillableProperties"
        - $ref: "#/components/schemas/FeedSettingsRequiredProperties"
    FeedSettingsResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/FeedSettings"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    FeedSettingsForPatch:
      allOf:
        - $ref: "#/components/schemas/FeedSettingsFillableProperties"
    SearchFeedSettingsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchFeedSettingsFilter"
        include:
          type: array
          items:
            type: string
            enum:
              - feeds
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchFeedSettingsFilter:
      type: object
      additionalProperties:
        type: string
    SearchFeedSettingsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FeedSettings"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CloudIntegrationResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CloudIntegration"
      required:
        - data
    CloudIntegration:
      allOf:
        - $ref: "#/components/schemas/CloudIntegrationReadonlyProperties"
        - $ref: "#/components/schemas/CloudIntegrationFillableProperties"
        - $ref: "#/components/schemas/CloudIntegrationRequiredProperties"
    CloudIntegrationReadonlyProperties:
      type: object
      properties:
        created_at:
          description: Время создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Время обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - created_at
        - updated_at
    CloudIntegrationFillableProperties:
      type: object
      properties:
        private_api_key:
          type: string
          description: Приватный API-ключ
          nullable: true
        public_api_key:
          type: string
          description: Публичный API-ключ
          nullable: true
        integration:
          type: boolean
          description: Интеграция с сервисом Ensi Cloud
    CloudIntegrationRequiredProperties:
      type: object
      required:
        - private_api_key
        - public_api_key
        - integration
      additionalProperties:
        type: string
    CreateCloudIntegrationRequest:
      allOf:
        - $ref: "#/components/schemas/CloudIntegrationFillableProperties"
        - $ref: "#/components/schemas/CloudIntegrationRequiredProperties"
    PatchCloudIntegrationRequest:
      allOf:
        - $ref: "#/components/schemas/CloudIntegrationFillableProperties"
    SearchIndexerTimestampsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchIndexerTimestampsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/IndexerTimestamp"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    IndexerTimestamp:
      allOf:
        - $ref: "#/components/schemas/IndexerTimestampReadonlyProperties"
        - $ref: "#/components/schemas/IndexerTimestampFillableProperties"
        - $ref: "#/components/schemas/IndexerTimestampFillableRequiredProperties"
    IndexerTimestampReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
        index:
          type: string
          description: The base name of the index (products, categories)
        stage:
          type: string
          description: The branch where indexing takes place
        index_hash:
          type: string
          description: Index hash
        is_current_index:
          type: boolean
          description: This setting is for the current hash
        is_current_stage:
          type: boolean
          description: This setting is for the current APP_STAGE
        is_current:
          type: boolean
          description: This setting is for current settings
      required:
        - id
        - index
        - stage
        - index_hash
        - is_current_index
        - is_current_stage
        - is_current
    IndexerTimestampFillableProperties:
      type: object
      properties:
        last_schedule:
          type: string
          format: date-time
          description: Last schedule time
    IndexerTimestampFillableRequiredProperties:
      required:
        - last_schedule
      type: object
      additionalProperties:
        type: string
    PatchIndexerTimestampRequest:
      allOf:
        - $ref: "#/components/schemas/IndexerTimestampFillableProperties"
    IndexerTimestampResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/IndexerTimestamp"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    SearchPropertyDirectoryValuesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchPropertyDirectoryValuesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDirectoryValue"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    PropertyDirectoryValue:
      type: object
      properties:
        id:
          type: integer
          description: Directory value id
        directory_value_id:
          type: integer
          description: Directory value id from PIM
        property_id:
          type: integer
          description: Property ID from PIM
        name:
          type: string
          description: Value name
          nullable: true
        code:
          type: string
          description: Code
          nullable: true
        value:
          type: string
          description: Value
        type:
          type: string
          description: Type of stored value
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Nameplate created at
        updated_at:
          type: string
          format: date-time
          description: Nameplate updated at
      required:
        - id
        - directory_value_id
        - property_id
        - name
        - code
        - value
        - type
        - is_migrated
        - created_at
        - updated_at
    Image:
      type: object
      properties:
        id:
          type: integer
          description: Image ID
        image_id:
          type: integer
          description: Image ID from PIM
        product_id:
          type: integer
          description: Product ID from PIM
        name:
          type: string
          description: Image description
          nullable: true
        sort:
          type: integer
          description: Sorting order
        file:
          type: string
          description: Image file
          nullable: true
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Image created at
        updated_at:
          type: string
          format: date-time
          description: Image updated at
      required:
        - id
        - image_id
        - product_id
        - name
        - sort
        - file
        - is_migrated
        - created_at
        - updated_at
    ProductPropertyValue:
      type: object
      properties:
        id:
          type: integer
          description: Product property value ID
        product_property_value_id:
          type: integer
          description: Product property value ID from PIM
        product_id:
          type: integer
          description: Product ID from PIM
        property_id:
          type: integer
          description: Property ID from PIM
        directory_value_id:
          type: integer
          description: Directory value ID from PIM
          nullable: true
        type:
          type: string
          description: Value type
        value:
          type: string
          description: Value
          nullable: true
        name:
          type: string
          description: Value name
          nullable: true
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        property:
          $ref: "#/components/schemas/Property"
          nullable: true
        directory_value:
          $ref: "#/components/schemas/PropertyDirectoryValue"
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Product property created at
        updated_at:
          type: string
          format: date-time
          description: Product property updated at
      required:
        - id
        - product_property_value_id
        - product_id
        - property_id
        - type
        - value
        - name
        - is_migrated
        - created_at
        - updated_at
    Discount:
      allOf:
        - $ref: "#/components/schemas/DiscountReadonlyProperties"
        - $ref: "#/components/schemas/DiscountCreateProperties"
        - $ref: "#/components/schemas/DiscountFillableProperties"
        - $ref: "#/components/schemas/DiscountRequiredProperties"
        - $ref: "#/components/schemas/DiscountIncludes"
    ProductGroupProduct:
      type: object
      properties:
        id:
          type: integer
          description: ID of the product link and the product
        product_group_product_id:
          type: integer
          description: ID of the product link and the product from PIM
        product_group_id:
          type: integer
          description: Product gluing ID from the PIM
        product_id:
          type: integer
          description: Product ID from PIM
        product_group:
          $ref: "#/components/schemas/ProductGroup"
          description: Product gluing
          nullable: true
        product:
          $ref: "#/components/schemas/Product"
          description: Product offers
        is_migrated:
          type: boolean
          description: Saved/created during migration of records from master services
        created_at:
          type: string
          format: date-time
          description: Product Group Product created at
        updated_at:
          type: string
          format: date-time
          description: Product Group Product updated at
      required:
        - id
        - product_group_product_id
        - product_group_id
        - product_id
        - is_migrated
        - created_at
        - updated_at
    SearchProductGroupProductsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchProductGroupProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductGroupProduct"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchDiscountsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDiscountsFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - products
              - products.product
          example:
            - products
            - products.product
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDiscountsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Discount"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchImagesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchImagesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchProductPropertyValuesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchProductPropertyValuesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductPropertyValue"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchCustomersRequest:
      type: object
      description: >
        Доступные для сортировки поля: `id, email, phone, first_name, last_name,
        middle_name, birthday, last_visit_date, created_at, updated_at, active`.
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchCustomersFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCustomersFilter:
      type: object
      additionalProperties:
        type: string
    SearchCustomersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Customer"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateCustomerRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerFillableProperties"
        - $ref: "#/components/schemas/CustomerFillableRequiredProperties"
    CustomerResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Customer"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
    PatchCustomerRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerFillableProperties"
    SearchUsersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchUsersFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchUsersFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор пользователя
          example: 1
          nullable: true
        login:
          type: string
          description: Логин
          example: TestLogin
          nullable: true
        active:
          type: boolean
          description: Активен
          example: true
          nullable: true
    SearchUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    UserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/User"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    CreateUserRequest:
      allOf:
        - $ref: "#/components/schemas/UserFillableProperties"
        - $ref: "#/components/schemas/UserWriteOnlyProperties"
        - $ref: "#/components/schemas/UserRequiredProperties"
    UserWriteOnlyProperties:
      type: object
      properties:
        password:
          type: string
          description: Пароль
          example: testPassword775105k#i*
    UserRequiredProperties:
      type: object
      required:
        - active
        - login
        - password
      additionalProperties:
        type: string
    PatchUserRequest:
      allOf:
        - $ref: "#/components/schemas/UserFillableProperties"
        - $ref: "#/components/schemas/UserWriteOnlyProperties"
    SearchCustomerAddressesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchCustomerAddressesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCustomerAddressesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
          nullable: true
        customer_id:
          type: integer
          description: Идентификатор пользователя
          example: 42
          nullable: true
        default:
          type: boolean
          description: Адрес по умолчанию
          nullable: true
    SearchCustomerAddressesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CustomerAddress"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateCustomerAddressRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerAddressFillableProperties"
        - $ref: "#/components/schemas/CustomerAddressFillableRequiredProperties"
    CustomerAddressResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CustomerAddress"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ReplaceCustomerAddressRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerAddressFillableProperties"
        - $ref: "#/components/schemas/CustomerAddressFillableRequiredProperties"
    SearchCustomerStatusesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/CustomerSearchStatusesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    CustomerSearchStatusesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор записи
          example: 11
          nullable: true
    SearchCustomerStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CustomerStatus"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateCustomerStatusRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerStatusFillableProperties"
        - $ref: "#/components/schemas/CustomerStatusFillableRequiredProperties"
    CustomerStatusResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CustomerStatus"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchCustomerStatusRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerStatusFillableProperties"
    SearchCustomerFavoritesRequest:
      type: object
      description: >
        Fields available for sort: `id, created_at`. Related entities available
        for uploading: `products`.
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchCustomerFavoritesFilter"
        include:
          type: array
          items:
            type: string
            enum:
              - products
          example:
            - products
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCustomerFavoritesFilter:
      type: object
      properties:
        id:
          type: integer
          example: 1
          nullable: true
        customer_id:
          type: integer
          example: 42
          nullable: true
        product_id:
          type: integer
          example: 12
          nullable: true
    SearchCustomerFavoritesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CustomerFavorite"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CustomerFavorite:
      allOf:
        - $ref: "#/components/schemas/CustomerFavoriteReadonlyProperties"
        - $ref: "#/components/schemas/CustomerFavoriteIncludes"
    CustomerFavoriteReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          example: 1
      required:
        - id
    CustomerFavoriteIncludes:
      type: object
      properties:
        product:
          type: object
          allOf:
            - $ref: "#/components/schemas/Product"
          additionalProperties:
            type: string
    CreateCustomerFavoritesRequest:
      type: object
      properties:
        customer_id:
          type: integer
          example: 11
        product_ids:
          type: array
          items:
            type: integer
          example:
            - 1234
            - 4321
      required:
        - customer_id
        - product_ids
    DeleteCustomerFavoritesRequest:
      type: object
      properties:
        customer_id:
          type: integer
          example: 11
        product_ids:
          type: array
          items:
            type: integer
          example:
            - 1234
            - 4321
      required:
        - customer_id
        - product_ids
    ClearCustomerFavoritesRequest:
      type: object
      properties:
        customer_id:
          type: integer
          example: 11
      required:
        - customer_id
    SearchCustomersInfoRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchCustomersInfoFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchCustomersInfoFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор покупателя
          example: 1
          nullable: true
        customer_id:
          type: integer
          description: Идентификатор пользователя
          example: 42
          nullable: true
    SearchCustomersInfoResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CustomerInfo"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CustomerInfo:
      allOf:
        - $ref: "#/components/schemas/CustomerInfoReadonlyProperties"
        - $ref: "#/components/schemas/CustomerInfoFillableProperties"
        - $ref: "#/components/schemas/CustomerInfoFillableRequiredRequestProperties"
    CustomerInfoReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор покупателя
          example: 1
      required:
        - id
    CustomerInfoFillableProperties:
      type: object
      properties:
        customer_id:
          type: integer
          description: Идентификатор пользователя
          example: 42
        kpi_sku_count:
          type: integer
          description: Колличетсво купленных товаров
          nullable: true
        kpi_sku_price_sum:
          type: integer
          description: Сумма цен купленных товаров
          nullable: true
        kpi_order_count:
          type: integer
          description: Колличетсво офрмленных заказов
          nullable: true
        kpi_shipment_count:
          type: integer
          description: Колличетсво оформленных отправок
          nullable: true
        kpi_delivered_count:
          type: integer
          description: Колличетсво досталенных
          nullable: true
        kpi_delivered_sum:
          type: integer
          description: Сумма цен доставленных
          nullable: true
        kpi_refunded_count:
          type: integer
          description: Колличетсво возвращенных
          nullable: true
        kpi_refunded_sum:
          type: integer
          description: Сумма цен возвращенных
          nullable: true
        kpi_canceled_count:
          type: integer
          description: Колличетсво отмененных
          nullable: true
        kpi_canceled_sum:
          type: integer
          description: Сумма цен отмененных
          nullable: true
    CustomerInfoFillableRequiredRequestProperties:
      type: object
      required:
        - customer_id
        - kpi_sku_count
        - kpi_sku_price_sum
        - kpi_order_count
        - kpi_shipment_count
        - kpi_delivered_count
        - kpi_delivered_sum
        - kpi_refunded_count
        - kpi_refunded_sum
        - kpi_canceled_count
        - kpi_canceled_sum
      additionalProperties:
        type: string
    CreateCustomerInfoRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerInfoFillableProperties"
        - $ref: "#/components/schemas/CustomerInfoFillableRequiredRequestProperties"
    CustomerInfoResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CustomerInfo"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    ReplaceCustomerInfoRequest:
      allOf:
        - $ref: "#/components/schemas/CustomerInfoFillableProperties"
        - $ref: "#/components/schemas/CustomerInfoFillableRequiredRequestProperties"
    SearchBonusOperationsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchBonusOperationsFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchBonusOperationsFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор записи
          example: 11
          nullable: true
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 2
          nullable: true
        order_number:
          type: integer
          description: Номер заказа
          example: 402100
          nullable: true
        earning:
          type: boolean
          description: Скоуп отбора операций начисления баллов
          example: true
          nullable: true
        spending:
          type: boolean
          description: Скоуп отбора операций списания баллов
          example: true
          nullable: true
    SearchBonusOperationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BonusOperation"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    BonusOperation:
      allOf:
        - $ref: "#/components/schemas/BonusOperationReadonlyProperties"
        - $ref: "#/components/schemas/BonusOperationFillableProperties"
        - $ref: "#/components/schemas/BonusOperationFillableRequiredProperties"
    BonusOperationReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор бонусной операции
          example: 10
      required:
        - id
    BonusOperationFillableProperties:
      type: object
      properties:
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 11
        order_number:
          type: integer
          description: Номре заказа
          example: 402100
          nullable: true
        bonus_amount:
          type: number
          description: Количество начисления/списания бонусов (с “-” при списании)
          example: -10.5
        comment:
          type: string
          description: Комментарий к бонусной операции
          nullable: true
        activation_date:
          type: string
          description: Дата активации
          nullable: true
        expiration_date:
          type: string
          description: Дата сгорания
          nullable: true
    BonusOperationFillableRequiredProperties:
      type: object
      required:
        - customer_id
        - order_number
        - bonus_amount
        - comment
        - activation_date
        - expiration_date
      additionalProperties:
        type: string
    CreateBonusOperationRequest:
      allOf:
        - $ref: "#/components/schemas/BonusOperationFillableProperties"
        - $ref: "#/components/schemas/BonusOperationFillableRequiredProperties"
    BonusOperationResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/BonusOperation"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchBonusOperationRequest:
      allOf:
        - $ref: "#/components/schemas/BonusOperationFillableProperties"
    SearchProductSubscribesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchProductSubscribesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchProductSubscribesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор записи
          example: 11
          nullable: true
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 2
          nullable: true
        product_id:
          type: integer
          description: Идентификатор товара
          example: 2
          nullable: true
    SearchProductSubscribesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductSubscribe"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ProductSubscribe:
      allOf:
        - $ref: "#/components/schemas/ProductSubscribeReadonlyProperties"
        - $ref: "#/components/schemas/ProductSubscribeFillableProperties"
        - $ref: "#/components/schemas/ProductSubscribeFillableRequiredProperties"
    ProductSubscribeReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
      required:
        - id
    ProductSubscribeFillableProperties:
      type: object
      properties:
        product_id:
          type: integer
          description: Идентификатор товара
          example: 104
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 11
    ProductSubscribeFillableRequiredProperties:
      type: object
      required:
        - product_id
        - customer_id
      additionalProperties:
        type: string
    CreateProductSubscribeRequest:
      allOf:
        - $ref: "#/components/schemas/ProductSubscribeFillableProperties"
        - $ref: "#/components/schemas/ProductSubscribeFillableRequiredProperties"
    ProductSubscribeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ProductSubscribe"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DeleteProductSubscribesRequest:
      type: object
      properties:
        product_id:
          type: integer
          description: Идентификатор товара
          example: 104
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 11
      required:
        - product_id
        - customer_id
    ClearProductSubscribesRequest:
      type: object
      properties:
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 11
      required:
        - customer_id
    SearchPreferencesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchPreferencesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchPreferencesFilter:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор записи
          example: 11
          nullable: true
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 2
          nullable: true
        attribute_name:
          type: string
          description: Название атрибута
          example: Бренд
          nullable: true
        attribute_value:
          type: string
          description: Значение атрибута атрибута
          example: IKEA
          nullable: true
    SearchPreferencesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Preference"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Preference:
      allOf:
        - $ref: "#/components/schemas/PreferenceReadonlyProperties"
    PreferenceReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
          example: 1
        customer_id:
          type: integer
          description: Идентификатор клиента
          example: 2
        attribute_name:
          type: string
          description: Название атрибута
          example: brand
        attribute_value:
          type: string
          description: Значение атрибута атрибута
          example: IKEA
        product_count:
          type: integer
          description: Колличество купленных товаров
          example: 15
        product_sum:
          type: integer
          description: Cумма стоимости купленных товаров
          example: 155000
      required:
        - id
        - customer_id
        - attribute_name
        - attribute_value
        - product_count
        - product_sum
    SearchConfirmationCodesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Filter. See the fields available for filtering in :meta
          additionalProperties:
            type: string
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchConfirmationCodesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ConfirmationCode"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    ConfirmationCode:
      type: object
      properties:
        id:
          type: integer
          description: Identifier of verification code
          example: 1
        user_id:
          type: integer
          description: Identifier of user
          nullable: true
          example: 1
        phone:
          type: string
          description: Phone number
          example: "+78889996655"
        attempt:
          type: integer
          description: Request verification code attempt number
          example: 1
        failed_checks_count:
          type: integer
          description: Number of errors when entering the verification code
          example: 0
        expired_at:
          description: Expiration date of the verification code
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        verified_at:
          description: Verification date (correct code entry)
          format: date-time
          type: string
          nullable: true
          example: 2021-01-29T12:36:13.000000Z
        created_at:
          description: Date of creation
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - phone
        - attempt
        - failed_checks_count
        - expired_at
        - created_at
    PromoCodeForCreate:
      allOf:
        - $ref: "#/components/schemas/PromoCodeFillableProperties"
        - $ref: "#/components/schemas/PromoCodeRequiredProperties"
    PromoCodeFillableProperties:
      type: object
      properties:
        status:
          type: integer
          description: статус промокода из PromoCodeStatusEnum
          example: 1
        name:
          type: string
          description: Название промокода
          example: Черная пятница
        code:
          type: string
          description: Код
          example: BLACK_FRIDAY
        counter:
          type: integer
          nullable: true
          description: Ограничение на количество использований промокода
        start_date:
          description: Дата начала действия промокода
          example: 2021-01-29
          type: string
          format: date
          nullable: true
        end_date:
          description: Дата окончания действия промокода
          example: 2021-01-29
          type: string
          format: date
          nullable: true
        discount_id:
          type: integer
          description: ID скидки
    PromoCodeRequiredProperties:
      required:
        - status
        - name
        - code
        - counter
        - start_date
        - end_date
        - discount_id
      type: object
      additionalProperties:
        type: string
    PromoCodeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/PromoCode"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PromoCode:
      allOf:
        - $ref: "#/components/schemas/PromoCodeReadonlyProperties"
        - $ref: "#/components/schemas/PromoCodeFillableProperties"
        - $ref: "#/components/schemas/PromoCodeRequiredProperties"
        - $ref: "#/components/schemas/PromoCodeIncludes"
    PromoCodeReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        current_counter:
          type: integer
          description: Количество использований промокода
          nullable: true
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    PromoCodeIncludes:
      type: object
      properties:
        discount:
          $ref: "#/components/schemas/Discount"
    DiscountReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        created_at:
          type: string
          description: Дата создания скидки
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления скидки
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    DiscountCreateProperties:
      type: object
      properties:
        type:
          type: integer
          description: Тип скидки из DiscountTypeEnum
          example: 1
      required:
        - type
    DiscountFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Наименование скидки
          example: Черная пятница
        value_type:
          type: integer
          description: Тип значения скидки из DiscountValueTypeEnum
          example: 1
        value:
          type: integer
          description: Размер скидки
        status:
          type: integer
          description: Статус скидки из DiscountStatusEnum
          example: 4
        start_date:
          description: Дата начала действия скидки
          example: 2021-01-01
          type: string
          format: date
          nullable: true
        end_date:
          description: Дата окончания действия скидки
          example: 2021-12-01
          type: string
          format: date
          nullable: true
        promo_code_only:
          type: boolean
          description: Скидка действительна только по промокоду
          example: true
    DiscountRequiredProperties:
      type: object
      required:
        - name
        - value_type
        - value
        - status
        - start_date
        - end_date
        - promo_code_only
      additionalProperties:
        type: string
    DiscountIncludes:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/DiscountProduct"
    DiscountProduct:
      allOf:
        - $ref: "#/components/schemas/DiscountProductReadonlyProperties"
        - $ref: "#/components/schemas/DiscountProductFillableProperties"
        - $ref: "#/components/schemas/DiscountProductFillableLikeIncludeProperties"
        - $ref: "#/components/schemas/DiscountProductFillableRequiredProperties"
        - $ref: "#/components/schemas/DiscountProductFillableLikeIncludeRequiredPropertie\
            s"
        - $ref: "#/components/schemas/DiscountProductIncludes"
    DiscountProductReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    DiscountProductFillableProperties:
      type: object
      properties:
        discount_id:
          type: integer
          description: Идентификатор скидки
          example: 1
    DiscountProductFillableLikeIncludeProperties:
      type: object
      properties:
        product_id:
          type: integer
          description: Идентификатор товара
          example: 2
    DiscountProductFillableRequiredProperties:
      type: object
      required:
        - discount_id
      additionalProperties:
        type: string
    DiscountProductFillableLikeIncludeRequiredProperties:
      type: object
      required:
        - product_id
      additionalProperties:
        type: string
    DiscountProductIncludes:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
    PromoCodeForPatch:
      allOf:
        - $ref: "#/components/schemas/PromoCodeFillableProperties"
    SearchPromoCodesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchPromoCodesFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - discount
              - discount.products
              - discount.products.product
          example:
            - discount
            - discount.products
            - discount.products.product
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchPromoCodesFilter:
      type: object
      additionalProperties:
        type: string
    SearchPromoCodesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PromoCode"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    GetPromoCodeStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PromoCodeStatus"
      required:
        - data
    PromoCodeStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса промокода из MarketingPromoCodeStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    DiscountForCreate:
      allOf:
        - $ref: "#/components/schemas/DiscountCreateProperties"
        - $ref: "#/components/schemas/DiscountFillableProperties"
        - $ref: "#/components/schemas/DiscountRequiredProperties"
        - $ref: "#/components/schemas/DiscountCreateIncludesProductsProperties"
    DiscountCreateIncludesProductsProperties:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/DiscountCreateIncludesProduct"
    DiscountCreateIncludesProduct:
      allOf:
        - $ref: "#/components/schemas/DiscountProductFillableLikeIncludeProperties"
        - $ref: "#/components/schemas/DiscountProductFillableLikeIncludeRequiredPropertie\
            s"
    DiscountResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Discount"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    DiscountForPatch:
      allOf:
        - $ref: "#/components/schemas/DiscountFillableProperties"
    SearchDiscountsFilter:
      type: object
      additionalProperties:
        type: string
    MassDiscountsStatusUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/IdsObject"
        - type: object
          properties:
            status:
              type: integer
              description: Статус скидки из DiscountStatusEnum
              example: 4
    PatchDiscountProductsRequest:
      type: object
      properties:
        products:
          type: array
          description: Обновление только заданных продуктов в скидке
          items:
            $ref: "#/components/schemas/EditDiscountProduct"
    EditDiscountProduct:
      allOf:
        - $ref: "#/components/schemas/DiscountProductFillableLikeIncludeProperties"
        - $ref: "#/components/schemas/DiscountProductFillableLikeIncludeRequiredPropertie\
            s"
    DeleteDiscountProductsRequest:
      type: object
      properties:
        ids:
          type: array
          description: Удаление только заданных в запросе продуктов
          items:
            type: integer
            description: Идентификатор продукта
            example: 202
      required:
        - ids
    GetDiscountStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DiscountStatus"
      required:
        - data
    DiscountStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса скидки из MarketingDiscountStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    GetDiscountTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DiscountType"
      required:
        - data
    DiscountType:
      type: object
      properties:
        id:
          type: integer
          description: ID типа скидки из MarketingDiscountTypeEnum
        name:
          type: string
          description: Название типа
      required:
        - id
        - name
    DiscountValueTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DiscountValueType"
      required:
        - data
    DiscountValueType:
      type: object
      properties:
        id:
          type: integer
          description: ID типа значения из MarketingDiscountValueTypeEnum
        name:
          type: string
          description: Название типа
      required:
        - id
        - name
    DiscountProductResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DiscountProduct"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    SearchDiscountProductsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchDiscountProductsFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - product
          example:
            - product
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchDiscountProductsFilter:
      type: object
      additionalProperties:
        type: string
    SearchDiscountProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DiscountProduct"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SearchStatusesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchStatusesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchStatusesFilter:
      type: object
      additionalProperties:
        type: string
    SearchStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Status"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    StatusReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор статуса
          example: 1
      required:
        - id
    StatusFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Имя статуса
          example: Новый
        active:
          type: boolean
          description: Активность
          nullable: true
        default:
          type: boolean
          description: По умолчанию
          nullable: true
        channel:
          type: array
          description: Каналы
          nullable: true
          items:
            type: integer
    StatusRequiredFillableProperties:
      type: object
      required:
        - name
        - active
        - default
        - channel
      additionalProperties:
        type: string
    CreateStatusRequest:
      allOf:
        - $ref: "#/components/schemas/StatusFillableProperties"
        - $ref: "#/components/schemas/StatusRequiredFillableProperties"
    StatusResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Status"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchStatusRequest:
      allOf:
        - $ref: "#/components/schemas/StatusFillableProperties"
    SearchThemesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchThemesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchThemesFilter:
      type: object
      additionalProperties:
        type: string
    SearchThemesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Theme"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Theme:
      allOf:
        - $ref: "#/components/schemas/ThemeReadonlyProperties"
        - $ref: "#/components/schemas/ThemeFillableProperties"
        - $ref: "#/components/schemas/ThemeRequiredFillableProperties"
    ThemeReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор статуса
          example: 1
      required:
        - id
    ThemeFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Имя статуса
          example: Новый
        active:
          type: boolean
          description: Активность
          nullable: true
        channel:
          type: array
          description: Каналы
          nullable: true
          items:
            type: integer
    ThemeRequiredFillableProperties:
      type: object
      required:
        - name
        - active
        - channel
      additionalProperties:
        type: string
    CreateThemeRequest:
      allOf:
        - $ref: "#/components/schemas/ThemeFillableProperties"
        - $ref: "#/components/schemas/ThemeRequiredFillableProperties"
    ThemeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Theme"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchThemeRequest:
      allOf:
        - $ref: "#/components/schemas/ThemeFillableProperties"
    SearchTypesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchTypesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchTypesFilter:
      type: object
      additionalProperties:
        type: string
    SearchTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Type"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Type:
      allOf:
        - $ref: "#/components/schemas/TypeReadonlyProperties"
        - $ref: "#/components/schemas/TypeFillableProperties"
        - $ref: "#/components/schemas/TypeRequiredFillableProperties"
    TypeReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор статуса
          example: 1
      required:
        - id
    TypeFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Имя статуса
          example: Новый
        active:
          type: boolean
          description: Активность
          nullable: true
        channel:
          type: array
          description: Каналы
          nullable: true
          items:
            type: integer
    TypeRequiredFillableProperties:
      type: object
      required:
        - name
        - active
        - channel
      additionalProperties:
        type: string
    CreateTypeRequest:
      allOf:
        - $ref: "#/components/schemas/TypeFillableProperties"
        - $ref: "#/components/schemas/TypeRequiredFillableProperties"
    TypeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Type"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchTypeRequest:
      allOf:
        - $ref: "#/components/schemas/TypeFillableProperties"
    SearchMessagesRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchMessagesFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchMessagesFilter:
      type: object
      properties:
        user_id:
          type: integer
          description: Id юзера
        chat_id:
          type: integer
          description: Id чата
        chat.theme_like:
          type: string
          description: Тема чата
        chat.type_id:
          type: integer
          description: Id типа чата
        chat.unread_admin:
          type: boolean
          description: Непрочитанный админом чат
        created_at_gte:
          type: string
          description: Дата отправления (От)
          example: 2021-06-11T11:27:10.000000Z
        created_at_lte:
          type: string
          description: Дата отправления (До)
          example: 2021-06-11T11:27:10.000000Z
    SearchMessagesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Message:
      allOf:
        - $ref: "#/components/schemas/MessageReadonlyProperties"
    MessageReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор сообщения
          example: 1
        user_id:
          type: integer
          description: Идентификатор пользователя
          example: 42
        user_type:
          description: Тип пользователя
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CommunicationUserTypeEnum"
        chat_id:
          type: integer
          description: Идентификатор чата
          example: 1
        text:
          type: string
          description: Содержание сообщения
        files:
          type: array
          description: Прикрепленные файлы
          items:
            $ref: "#/components/schemas/FileProtected"
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Дата создания сообщения
          example: 2021-06-11T11:27:10.000000Z
        updated_at:
          type: string
          format: date-time
          description: Дата обновления сообщения
          example: 2021-06-11T11:27:10.000000Z
      required:
        - id
        - user_id
        - user_type
        - chat_id
        - text
        - files
        - created_at
        - updated_at
    CreateBroadcastRequest:
      type: object
      properties:
        user_ids:
          type: array
          description: Id юзеров-адресатов
          items:
            type: integer
          example:
            - 1
            - 3
            - 5
        user_type:
          description: Тип пользователя
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CommunicationUserTypeEnum"
        theme:
          type: string
          description: Тема
        type_id:
          type: integer
          description: Id типа
        status_id:
          type: integer
          description: Id статуса
        message:
          type: string
          description: Текст сообщения
        files:
          type: array
          description: Прикрепленные файлы
          items:
            type: string
        required:
          - user_ids
          - user_type
          - theme
          - type_id
          - status_id
          - message
        type: object
        additionalProperties:
          type: string
    SearchChannelsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchChannelsFilter"
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchChannelsFilter:
      type: object
      properties:
        id:
          type: array
          items:
            type: integer
          description: Идентификаторы каналов
          example:
            - 3
        name:
          type: string
          description: Название или часть названия канала
          example: telegram
    SearchChannelsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Channel:
      allOf:
        - $ref: "#/components/schemas/ChannelReadonlyProperties"
        - $ref: "#/components/schemas/ChannelFillableProperties"
        - $ref: "#/components/schemas/ChannelRequiredFillableProperties"
    ChannelReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор канала
          example: 1
      required:
        - id
    ChannelFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Имя канала
          example: Внутренний канал
    ChannelRequiredFillableProperties:
      type: object
      required:
        - name
      additionalProperties:
        type: string
    CreateChannelRequest:
      allOf:
        - $ref: "#/components/schemas/ChannelFillableProperties"
        - $ref: "#/components/schemas/ChannelRequiredFillableProperties"
    ChannelResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Channel"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchChannelRequest:
      allOf:
        - $ref: "#/components/schemas/ChannelFillableProperties"
    SearchChatsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchChatsFilter"
        include:
          type: array
          items:
            type: string
            description: Подгружаемые связанные сущности
            enum:
              - messages
          example:
            - messages
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchChatsFilter:
      type: object
      properties:
        theme_like:
          type: string
          description: Тема
        type_id:
          type: integer
          description: Id типа
        unread_admin:
          type: boolean
          description: Непрочитанное админом
    SearchChatsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Chat"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Chat:
      allOf:
        - $ref: "#/components/schemas/ChatReadonlyProperties"
        - $ref: "#/components/schemas/ChatFillableProperties"
        - $ref: "#/components/schemas/ChatRequiredFillableProperties"
        - $ref: "#/components/schemas/ChatIncludes"
    ChatReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор чата
          example: 1
      required:
        - id
    ChatFillableProperties:
      type: object
      properties:
        user_id:
          type: integer
          description: Идентификатор пользователя
          example: 42
        user_type:
          description: Тип пользователя
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CommunicationUserTypeEnum"
        direction:
          description: Направление чата
          allOf:
            - type: integer
            - $ref: "#/components/schemas/CommunicationChatDirectionEnum"
        type_id:
          type: integer
          description: Тип чата
        theme:
          type: string
          description: Тема чата
          example: Поддержка
        muted:
          type: boolean
          description: Флаг чата без ответов
          example: false
        unread_user:
          type: boolean
          description: Флаг непрочтении юзером
          example: false
        unread_admin:
          type: boolean
          description: Флаг непрочтении админом
          example: true
    ChatRequiredFillableProperties:
      type: object
      required:
        - user_id
        - theme
        - type_id
        - muted
        - user_type
      additionalProperties:
        type: string
    ChatIncludes:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
    CreateChatRequest:
      allOf:
        - $ref: "#/components/schemas/ChatFillableProperties"
        - $ref: "#/components/schemas/ChatRequiredFillableProperties"
    ChatResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Chat"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchChatRequest:
      allOf:
        - $ref: "#/components/schemas/ChatFillableProperties"
    SearchNotificationsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchNotificationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Notification"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Notification:
      allOf:
        - $ref: "#/components/schemas/NotificationReadonlyProperties"
        - $ref: "#/components/schemas/NotificationFillableProperties"
        - $ref: "#/components/schemas/NotificationRequiredFillableProperties"
    NotificationReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Notification ID
          example: 1
        customer_id:
          type: integer
          description: Customer ID
          example: 1
        event:
          type: integer
          description: ID of notification event from NotificationEventEnum
          example: 101
        channels:
          type: array
          items:
            type: integer
            description: ID of sending channels from NotificationChannelEnum
          example:
            - 1
            - 3
        theme:
          type: string
          nullable: true
          description: Notification theme
          example: Order №23323232 created!
        text:
          type: string
          description: Notification text
          example: The order will be delivered to Zelenograd, Yunosti str., 1. Delivery
            date:12/10/2023 from 10 to 17
        created_at:
          type: string
          description: Date of creation
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Date of update
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - customer_id
        - event
        - channels
        - theme
        - text
        - created_at
        - updated_at
    NotificationFillableProperties:
      type: object
      properties:
        is_viewed:
          type: boolean
          description: Indicates whether the notification has been viewed
    NotificationRequiredFillableProperties:
      required:
        - is_viewed
      type: object
      additionalProperties:
        type: string
    CreateNotificationSettingRequest:
      allOf:
        - $ref: "#/components/schemas/NotificationSettingFillableProperties"
        - $ref: "#/components/schemas/NotificationSettingRequiredFillableProperties"
    NotificationSettingFillableProperties:
      type: object
      properties:
        name:
          type: string
          description: Название уведомления
          example: Создание заказа
        event:
          type: integer
          description: Идентификатор события уведомления из NotificationEventEnum
          example: 101
        channels:
          type: array
          items:
            type: integer
            description: Канал отправки из NotificationChannelEnum
          example:
            - 1
            - 3
        theme:
          type: string
          nullable: true
          description: Тема уведомлени
          example: Заказ №{order_number} создан!
        text:
          type: string
          description: Текст уведомления
          example: Заказ доставять по адресу {order_delivery_address}. Дата доставки
            {order_delivery_timeslot} {order_delivery_date}
    NotificationSettingRequiredFillableProperties:
      type: object
      required:
        - name
        - event
        - channels
        - theme
        - text
      additionalProperties:
        type: string
    NotificationSettingResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/NotificationSetting"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    NotificationSetting:
      allOf:
        - $ref: "#/components/schemas/NotificationSettingReadonlyProperties"
        - $ref: "#/components/schemas/NotificationSettingFillableProperties"
        - $ref: "#/components/schemas/NotificationSettingRequiredFillableProperties"
    NotificationSettingReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор настроек уведомления
          example: 1
        created_at:
          type: string
          description: Дата создания
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
        updated_at:
          type: string
          description: Дата обновления
          format: date-time
          example: 2021-12-20T18:00:10.000000Z
      required:
        - id
        - created_at
        - updated_at
    PatchNotificationSettingRequest:
      allOf:
        - $ref: "#/components/schemas/NotificationSettingFillableProperties"
    SearchNotificationSettingsRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchNotificationSettingsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/NotificationSetting"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    GetNotificationSettingChannelsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/NotificationSettingChannel"
      required:
        - data
    NotificationSettingChannel:
      type: object
      properties:
        id:
          type: integer
          description: ID канала из NotificationChannel
        name:
          type: string
          description: Название канала
      required:
        - id
        - name
    GetNotificationSettingEventsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/NotificationSettingEvent"
      required:
        - data
    NotificationSettingEvent:
      type: object
      properties:
        id:
          type: integer
          description: ID события из NotificationEvent
        name:
          type: string
          description: Название события
      required:
        - id
        - name
    VariablesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/VariablesDictionary"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    VariablesDictionary:
      type: object
      properties:
        event:
          description: Тип события из NotificationEventEnum
          type: integer
          example: 101
        variables:
          type: array
          items:
            $ref: "#/components/schemas/Variable"
      required:
        - event
        - variables
    Variable:
      type: object
      properties:
        id:
          description: Переменная из NotificationVariableEnum
          type: string
          example: "{product_name}"
        title:
          description: Описание переменной
          type: string
          example: Название товара
        items:
          type: array
          items:
            $ref: "#/components/schemas/Variable"
      required:
        - id
        - title
        - items
    SearchSellersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchSellersFilter"
        include:
          type: array
          items:
            type: string
            enum:
              - manager
              - manager.roles
              - stores
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchSellersFilter:
      type: object
      properties:
        id:
          type: array
          items:
            type: integer
          description: Идентификаторы продавца
          example:
            - 1254
            - 5241
        manager_id:
          type: integer
          description: Идентификаторы менеджера
          example:
            - 521004
            - 264807
        status:
          type: array
          items:
            $ref: "#/components/schemas/UnitsSellerStatusEnum"
        legal_name_like:
          type: string
          description: Название организации
          example: ООО Ромашка
        legal_address_like:
          type: string
          description: Адрес организации
          example: ООО Ромашка
        created_at_gte:
          type: string
          description: Дата регистрации (От)
          example: 2021-06-11T11:27:10.000000Z
        created_at_lte:
          type: string
          description: Дата регистрации (До)
          example: 2021-06-11T11:27:10.000000Z
        updated_at_gte:
          type: string
          description: Дата обновления (От)
          example: 2021-06-11T11:27:10.000000Z
        updated_at_lte:
          type: string
          description: Дата обновления (До)
          example: 2021-06-11T11:27:10.000000Z
    SearchSellersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Seller"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    Seller:
      allOf:
        - $ref: "#/components/schemas/SellerReadonlyProperties"
        - $ref: "#/components/schemas/SellerFillableProperties"
        - $ref: "#/components/schemas/SellerFillableRequiredProperties"
        - $ref: "#/components/schemas/SellerUpdateProperties"
        - $ref: "#/components/schemas/SellerUpdateRequiredProperties"
        - $ref: "#/components/schemas/SellerIncludes"
    SellerReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор продавца
          example: 1
        status_at:
          type: string
          format: date-time
          description: Время изменения статуса продавца
          example: 2021-01-15T14:55:35.000000Z
        created_at:
          type: string
          format: date-time
          description: Время создания продавца
          example: 2021-01-15T14:55:35.000000Z
        updated_at:
          type: string
          format: date-time
          description: Время обновления продавца
          example: 2021-01-15T14:55:35.000000Z
      required:
        - id
        - status_at
        - created_at
        - updated_at
    SellerFillableProperties:
      type: object
      properties:
        manager_id:
          type: integer
          description: ID менеджера
          nullable: true
          example: 1
        legal_name:
          type: string
          description: Юридическое наименование организации
          example: Сокольники
        legal_address:
          $ref: "#/components/schemas/Address"
        fact_address:
          $ref: "#/components/schemas/Address"
        inn:
          type: string
          description: ИНН
          nullable: true
          example: ""
        kpp:
          type: string
          description: КПП
          nullable: true
          example: ""
        payment_account:
          type: string
          description: Номер банковского счета
          nullable: true
          example: ""
        correspondent_account:
          type: string
          description: Номер корреспондентского счета банка
          nullable: true
          example: ""
        bank:
          type: string
          description: Наименование банка
          nullable: true
          example: ""
        bank_address:
          $ref: "#/components/schemas/Address"
        bank_bik:
          type: string
          description: БИК банка
          nullable: true
          example: ""
        site:
          type: string
          description: Сайт компании
          nullable: true
          example: https://example.com
        info:
          type: string
          description: Бренды и товары, которыми торгует Продавец
          nullable: true
          example: ""
    SellerFillableRequiredProperties:
      required:
        - manager_id
        - legal_name
        - inn
        - kpp
        - payment_account
        - correspondent_account
        - bank
        - bank_bik
        - site
        - info
      type: object
      additionalProperties:
        type: string
    SellerUpdateProperties:
      type: object
      properties:
        status:
          description: Статус продавца из SellerStatusEnum
          allOf:
            - type: integer
            - $ref: "#/components/schemas/UnitsSellerStatusEnum"
          example: 1
    SellerUpdateRequiredProperties:
      required:
        - status
      type: object
      additionalProperties:
        type: string
    SellerIncludes:
      type: object
      properties:
        manager:
          $ref: "#/components/schemas/AdminUser"
        stores:
          type: array
          items:
            $ref: "#/components/schemas/Store"
    CreateSellerRequest:
      allOf:
        - $ref: "#/components/schemas/SellerFillableProperties"
        - $ref: "#/components/schemas/SellerFillableRequiredProperties"
    SellerResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Seller"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchSellerRequest:
      allOf:
        - $ref: "#/components/schemas/SellerFillableProperties"
        - $ref: "#/components/schemas/SellerUpdateProperties"
    GetSellerStatusesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SellerStatus"
      required:
        - data
    SellerStatus:
      type: object
      properties:
        id:
          type: integer
          description: ID статуса из UnitsSellerStatusEnum
        name:
          type: string
          description: Название статуса
      required:
        - id
        - name
    SearchStoresRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchStoresFilter"
        include:
          type: array
          items:
            type: string
            enum:
              - workings
              - contacts
              - contact
              - pickup_times
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchStoresFilter:
      type: object
      properties:
        id:
          type: integer
          description: ID склада
          example: 1
        seller_id:
          type: integer
          description: ID продавца
          example: 1
        xml_id:
          type: string
          description: ID склада в системе продавца
          example: "015"
        active:
          type: boolean
          description: Флаг активности склада
          example: true
        name:
          type: string
          description: Название склада
          example: Третий склад
        timezone:
          type: string
          description: Часовой пояс
          example: Europe/Moscow
        address_string:
          type: string
          description: Адрес склада
          example: 124482, г Москва, г Зеленоград, р-н Савелки, к 305
        contact_name:
          type: string
          description: ФИО контактного лица
          example: Данилов Яков Евгеньевич
        contact_phone:
          type: string
          description: Телефон контактного лица
          example: "+79996663322"
        created_at_gte:
          type: string
          format: date-time
          description: Дата создания меньше или равна
          example: 2021-07-09T04:25:11.000000Z
        created_at_lte:
          type: string
          format: date-time
          description: Дата создания больше или равна
          example: 2021-07-03T11:57:28.000000Z
        updated_at_gte:
          type: string
          format: date-time
          description: Дата обновления меньше или равна
          example: 2021-07-09T04:25:11.000000Z
        updated_at_lte:
          type: string
          format: date-time
          description: Дата обновления больше или равна
          example: 2021-07-03T11:57:28.000000Z
    SearchStoresResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Store"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateStoreRequest:
      allOf:
        - $ref: "#/components/schemas/StoreFillableProperties"
        - $ref: "#/components/schemas/StoreFillableRequiredProperties"
    StoreResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Store"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchStoreRequest:
      allOf:
        - $ref: "#/components/schemas/StoreFillableProperties"
    CreateStoreWorkingRequest:
      allOf:
        - $ref: "#/components/schemas/StoreWorkingFillableProperties"
        - $ref: "#/components/schemas/StoreWorkingFillableRequiredProperties"
    StoreWorkingResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/StoreWorking"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchStoreWorkingRequest:
      allOf:
        - $ref: "#/components/schemas/StoreWorkingFillableProperties"
    CreateStorePickupTimeRequest:
      allOf:
        - $ref: "#/components/schemas/StorePickupTimeFillableProperties"
        - $ref: "#/components/schemas/StorePickupTimeFillableRequiredProperties"
    StorePickupTimeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/StorePickupTime"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchStorePickupTimeRequest:
      allOf:
        - $ref: "#/components/schemas/StorePickupTimeFillableProperties"
    CreateStoreContactRequest:
      allOf:
        - $ref: "#/components/schemas/StoreContactFillableProperties"
        - $ref: "#/components/schemas/StoreContactFillableRequiredProperties"
    StoreContactResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/StoreContact"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchStoreContactRequest:
      allOf:
        - $ref: "#/components/schemas/StoreContactFillableProperties"
    SearchSellerUsersRequest:
      type: object
      properties:
        sort:
          description: Сортировка. Доступные для сортировки поля см. в :meta
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          type: object
          description: Фильтр. Доступные для фильтрации поля см. в :meta
          additionalProperties:
            type: string
        include:
          $ref: "#/components/schemas/RequestBodyInclude"
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchSellerUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SellerUser"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SellerUser:
      allOf:
        - $ref: "#/components/schemas/SellerUserReadonlyProperties"
        - $ref: "#/components/schemas/SellerUserFillableProperties"
        - $ref: "#/components/schemas/SellerUserFillableRequiredProperties"
        - $ref: "#/components/schemas/SellerUserIncludes"
    SellerUserReadonlyProperties:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор пользователя продавца
          example: 1
        full_name:
          type: string
          description: Полное ФИО
          example: Иванов Иван Иванович
        short_name:
          type: string
          description: Сокращенное ФИО
          example: Иванов И.И.
        created_at:
          description: Дата регистрации
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - full_name
        - short_name
        - created_at
        - updated_at
    SellerUserFillableProperties:
      type: object
      properties:
        seller_id:
          type: integer
          description: id продавца
          example: 1
        active:
          type: boolean
          description: Активен
          example: true
        login:
          type: string
          description: Логин
          example: TestLogin
        last_name:
          type: string
          description: Фамилия
          example: Иванов
        first_name:
          type: string
          description: Имя
          example: Иван
        middle_name:
          type: string
          description: Отчество
          example: Иванович
        email:
          type: string
          description: Email
          example: test@mail.ru
        phone:
          type: string
          description: Телефон
          example: "+79191000000"
    SellerUserFillableRequiredProperties:
      type: object
      required:
        - seller_id
        - active
        - login
        - last_name
        - first_name
        - middle_name
        - email
        - phone
      additionalProperties:
        type: string
    SellerUserIncludes:
      type: object
      properties:
        roles:
          description: Роли пользователя продавца. Объект, в котором ключ - ID роли (см.
            UnitsSellerUserRoleEnum)
          type: array
          items:
            $ref: "#/components/schemas/SellerUserRoleIncluded"
    SellerUserRoleIncluded:
      allOf:
        - $ref: "#/components/schemas/SellerUserRoleIncludedReadonlyProperties"
        - $ref: "#/components/schemas/SellerUserRoleIncludedFillableProperties"
    SellerUserRoleIncludedReadonlyProperties:
      type: object
      properties:
        id:
          description: ID роли
          type: integer
          example: 1
      required:
        - id
    SellerUserRoleIncludedFillableProperties:
      type: object
      properties:
        title:
          description: Название роли
          type: string
          example: customer
        expires:
          description: Время жизни роли
          format: date-time
          nullable: true
          type: string
          example: 2021-01-29T12:36:13.000000Z
    CreateSellerUserRequest:
      allOf:
        - $ref: "#/components/schemas/SellerUserFillableProperties"
        - $ref: "#/components/schemas/SellerUserFillableRequiredProperties"
        - $ref: "#/components/schemas/SellerUserWriteOnlyProperties"
        - $ref: "#/components/schemas/SellerUserWriteOnlyRequiredProperties"
    SellerUserWriteOnlyProperties:
      type: object
      properties:
        password:
          type: string
          description: Пароль
          example: testPassword775105k#i*
    SellerUserWriteOnlyRequiredProperties:
      required:
        - password
      type: object
      additionalProperties:
        type: string
    SellerUserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/SellerUser"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchSellerUserRequest:
      allOf:
        - $ref: "#/components/schemas/SellerUserFillableProperties"
        - $ref: "#/components/schemas/SellerUserWriteOnlyProperties"
    AddRolesToSellerUserRequest:
      type: object
      properties:
        roles:
          type: array
          description: Идентификаторы добавляемых ролей
          items:
            type: integer
        expires:
          description: Время жизни роли
          format: date-time
          nullable: true
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - roles
    DeleteRoleFromSellerUserRequest:
      type: object
      properties:
        role_id:
          type: integer
          description: Идентификатор удаляемой роли
      required:
        - role_id
    SearchSellerUserRolesRequest:
      type: object
      properties:
        sort:
          type: array
          items:
            type: string
            enum:
              - id
              - created_at
              - updated_at
        filter:
          type: object
          properties:
            id:
              type: integer
              description: ID пользователя
              example: 1
            title:
              type: string
              description: Название роли
              example: customer
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchSellerUserRolesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SellerUserRole"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    SellerUserRole:
      allOf:
        - $ref: "#/components/schemas/SellerUserRoleReadonlyProperties"
        - $ref: "#/components/schemas/SellerUserRoleFillableProperties"
    SellerUserRoleReadonlyProperties:
      type: object
      properties:
        id:
          description: ID роли
          type: integer
          example: 1
      required:
        - id
    SellerUserRoleFillableProperties:
      type: object
      properties:
        title:
          description: Название роли
          type: string
          example: customer
    SearchAdminUsersRequest:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/RequestBodySort"
        filter:
          $ref: "#/components/schemas/SearchAdminUsersFilter"
        include:
          type: array
          items:
            type: string
            enum:
              - roles
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchAdminUsersFilter:
      type: object
      properties:
        id:
          type: integer
          description: ID пользователя
          example: 1
        email:
          type: string
          description: Email пользователя
          example: test@test.ru
        phone:
          type: string
          description: Телефон пользователя
          example: "+79996663322"
        phone_like:
          type: string
          description: Телефон пользователя
          example: "3322"
        last_name_like:
          type: string
          description: Фамилия
          example: Иванов
        first_name_like:
          type: string
          description: Имя
          example: Иван
        middle_name_like:
          type: string
          description: Отчество
          example: Иванович
        created_at_gte:
          type: string
          format: date-time
          description: Дата создания (от)
          example: 2020-01-01T15:47:21.000000Z
        created_at_lte:
          type: string
          format: date-time
          description: Дата создания (до)
          example: 2020-01-01T15:47:21.000000Z
        updated_at_gte:
          type: string
          format: date-time
          description: Дата последнего обновления (от)
          example: 2020-01-01T15:47:21.000000Z
        updated_at_lte:
          type: string
          format: date-time
          description: Дата последнего обновления (до)
          example: 2020-01-01T15:47:21.000000Z
        login:
          type: string
          description: Логин пользователя
          example: test@test.ru
        active:
          type: boolean
          description: Статус пользователя (true - Активен, false - Деактивирован)
          example: true
        role:
          type: integer
          description: ID роли
          example: 1
    SearchAdminUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AdminUser"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
    CreateAdminUserRequest:
      allOf:
        - $ref: "#/components/schemas/AdminUserFillableProperties"
        - $ref: "#/components/schemas/AdminUserWriteOnlyProperties"
        - $ref: "#/components/schemas/AdminUserRequiredProperties"
    AdminUserWriteOnlyProperties:
      type: object
      properties:
        password:
          type: string
          description: Пароль
          example: testPassword775105k#i*
    AdminUserRequiredProperties:
      type: object
      required:
        - active
        - login
        - password
        - email
        - phone
        - timezone
      additionalProperties:
        type: string
    AdminUserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AdminUser"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    PatchAdminUserRequest:
      allOf:
        - $ref: "#/components/schemas/AdminUserFillableProperties"
        - $ref: "#/components/schemas/AdminUserWriteOnlyProperties"
        - type: object
          properties:
            cause_deactivation:
              type: string
              description: Причина деактивации
    AddRolesToAdminUserRequest:
      type: object
      properties:
        roles:
          type: array
          description: Идентификаторы добавляемых ролей
          items:
            type: integer
        expires:
          description: Время жизни роли
          format: date-time
          nullable: true
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - roles
        - expires
    DeleteRoleFromAdminUserRequest:
      type: object
      properties:
        role_id:
          type: integer
          description: Идентификатор удаляемой роли
      required:
        - role_id
    MassChangeActiveRequest:
      type: object
      properties:
        user_ids:
          type: array
          description: ID пользователей
          items:
            type: integer
        active:
          type: boolean
          description: Статус пользователя (true - Активен, false - Деактивирован)
        cause_deactivation:
          type: string
          description: Причина деактивации
      required:
        - user_ids
        - active
    RightsAccessResponse:
      type: object
      x-lg-resource-class-name: RightsAccessDictionaryResource
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RightsAccessDictionary"
        meta:
          type: object
          additionalProperties:
            type: string
      required:
        - data
    RightsAccessDictionary:
      type: object
      properties:
        section:
          description: Подраздел
          type: string
          example: Список заказов
        items:
          type: array
          items:
            $ref: "#/components/schemas/RightsAccess"
    RightsAccess:
      type: object
      properties:
        id:
          description: ID права доступа
          type: integer
          example: 101
        title:
          description: Описание права доступа
          type: string
          example: Пользователю доступен табличный список с фильтрами и поиском
    CreateAdminUserRoleRequest:
      allOf:
        - $ref: "#/components/schemas/AdminUserRoleFillableProperties"
        - $ref: "#/components/schemas/AdminUserRoleRequiredProperties"
    AdminUserRoleFillableProperties:
      type: object
      properties:
        title:
          description: Название роли
          type: string
          example: customer
        active:
          description: Активность
          type: boolean
          example: true
        rights_access:
          description: Права доступа
          type: array
          items:
            $ref: "#/components/schemas/UnitsAdminUserRoleRightsAccessEnum"
    AdminUserRoleRequiredProperties:
      required:
        - title
        - rights_access
      type: object
      additionalProperties:
        type: string
    AdminUserRoleResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AdminUserRole"
        meta:
          type: object
          nullable: true
          additionalProperties:
            type: string
      required:
        - data
    AdminUserRole:
      allOf:
        - $ref: "#/components/schemas/AdminUserRoleReadonlyProperties"
        - $ref: "#/components/schemas/AdminUserRoleFillableProperties"
        - $ref: "#/components/schemas/AdminUserRoleRequiredProperties"
    AdminUserRoleReadonlyProperties:
      type: object
      properties:
        id:
          description: ID роли
          type: integer
          example: 1
        created_at:
          description: Дата создания
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
        updated_at:
          description: Дата обновления
          format: date-time
          type: string
          example: 2021-01-29T12:36:13.000000Z
      required:
        - id
        - created_at
        - updated_at
    PatchAdminUserRoleRequest:
      allOf:
        - $ref: "#/components/schemas/AdminUserRoleFillableProperties"
    SearchAdminUserRolesRequest:
      type: object
      properties:
        sort:
          type: array
          items:
            type: string
            enum:
              - id
              - created_at
              - updated_at
        filter:
          type: object
          properties:
            id:
              type: integer
              description: ID пользователя
              example: 1
            title:
              type: string
              description: Название роли
              example: customer
        pagination:
          $ref: "#/components/schemas/RequestBodyPagination"
    SearchAdminUserRolesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AdminUserRole"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/ResponseBodyPagination"
      required:
        - data
        - meta
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: X-Access-Token
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: ./errors.yaml#/ErrorResponse
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: ./errors.yaml#/ErrorResponse
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: ./errors.yaml#/ErrorResponse
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: ./errors.yaml#/ErrorResponse
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: ./errors.yaml#/ErrorResponse
    DeleteResponse:
      description: Delete success
      content:
        application/json:
          schema:
            $ref: ./common_schemas.yaml#/EmptyDataResponse
    SuccessEmptyResponse:
      description: The action was completed successfully
      content:
        application/json:
          schema:
            $ref: ./common_schemas.yaml#/EmptyDataResponse
    GetResourceMetaResponse:
      description: Getting fields for a tabular list
      content:
        application/json:
          schema:
            $ref: ./common/schemas/resource_meta.yaml#/GetResourceMetaResponse
    SearchEnumValuesResponse:
      description: Getting enumeration values
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: ./common/schemas/resource_meta.yaml#/EnumValueInteger
            required:
              - data
    MassOperationResultResponse:
      description: Mass operation success
      content:
        application/json:
          schema:
            $ref: ./common_schemas.yaml#/MassOperationResult
    PreloadFileResponse:
      description: File successfully loaded and saved
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: ./common_schemas.yaml#/PreloadFile
            required:
              - data
  requestBodies:
    SearchEnumValuesRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: ./common/schemas/resource_meta.yaml#/SearchEnumValuesBody
    MassDeleteBody:
      required: true
      content:
        application/json:
          schema:
            $ref: ./common_schemas.yaml#/RequestBodyMassOperation
security:
  - accessToken: []
